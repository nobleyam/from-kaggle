{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":2564,"databundleVersionId":29456,"sourceType":"competition"}],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# read the data","metadata":{}},{"cell_type":"code","source":"import pandas as pd\n\ndf = pd.read_csv('/kaggle/input/DontGetKicked/training.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-02T08:43:08.359217Z","iopub.execute_input":"2024-12-02T08:43:08.359674Z","iopub.status.idle":"2024-12-02T08:43:09.256719Z","shell.execute_reply.started":"2024-12-02T08:43:08.359615Z","shell.execute_reply":"2024-12-02T08:43:09.255483Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"import warnings\nwarnings.filterwarnings('ignore')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-02T08:43:09.258368Z","iopub.execute_input":"2024-12-02T08:43:09.258838Z","iopub.status.idle":"2024-12-02T08:43:09.264738Z","shell.execute_reply.started":"2024-12-02T08:43:09.258768Z","shell.execute_reply":"2024-12-02T08:43:09.263438Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"# Set 'RefId' as the index in df first\ndf = df.set_index('RefId')\n\n# Then define target and inputs\ntarget = df['IsBadBuy']\ninputs = df.drop(columns=['IsBadBuy'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-02T08:43:09.266519Z","iopub.execute_input":"2024-12-02T08:43:09.267020Z","iopub.status.idle":"2024-12-02T08:43:09.310480Z","shell.execute_reply.started":"2024-12-02T08:43:09.266961Z","shell.execute_reply":"2024-12-02T08:43:09.309365Z"}},"outputs":[],"execution_count":3},{"cell_type":"markdown","source":"# feature screening","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\n\n\n# split into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(inputs, target, test_size=0.30, random_state=42)\n\nX_train.shape,X_test.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-02T08:43:09.313468Z","iopub.execute_input":"2024-12-02T08:43:09.313842Z","iopub.status.idle":"2024-12-02T08:43:09.936230Z","shell.execute_reply.started":"2024-12-02T08:43:09.313771Z","shell.execute_reply":"2024-12-02T08:43:09.935076Z"}},"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"((51088, 32), (21895, 32))"},"metadata":{}}],"execution_count":4},{"cell_type":"code","source":"def feature_screening(data, min_cv=0.1, mode_threshold=99, distinct_threshold=90):\n    processed_data = data.copy()\n    \n\n    columns = inputs.columns\n\n    continuous = [\n        'VehYear', 'VehicleAge', 'VehOdo', \n        'MMRAcquisitionAuctionAveragePrice', 'MMRAcquisitionAuctionCleanPrice',\n        'MMRAcquisitionRetailAveragePrice', 'MMRAcquisitonRetailCleanPrice',\n        'MMRCurrentAuctionAveragePrice', 'MMRCurrentAuctionCleanPrice',\n        'MMRCurrentRetailAveragePrice', 'MMRCurrentRetailCleanPrice',\n        'VehBCost', 'WarrantyCost'\n    ]\n    categorical = [j for j in columns if j not in continuous]\n\n    # Define a minimum value for coefficient of variation\n    min_cv = min_cv\n\n    # Calculate the coefficient of variation for each column\n    cv_values = processed_data[continuous].std() / processed_data[continuous].mean()\n\n    # Filter out columns with CV less than 0.1\n    screen_cv =  cv_values[cv_values < min_cv].index.tolist()\n\n\n    # Define a threshold for the dominant category percentage\n    mode_threshold = mode_threshold\n\n    # Calculate the percentage of the mode category for each column\n    mode_category = (processed_data[categorical].apply(lambda x: x.value_counts().max() / len(x)) * 100)\n\n    # Select columns where the mode category percentage is greater than the threshold\n    screen_mode = mode_category[mode_category > mode_threshold].index.tolist()\n\n\n    # Set a threshold for excluding columns \n    distinct_threshold = distinct_threshold\n\n    # Calculate the percentage of distinct categories in categorical variables\n    distinct_percentage = (processed_data[categorical].apply(lambda x: x.dropna().nunique() / x.count()) * 100)\n\n    # Select categorical columns based on distinct percentage threshold\n    screen_distinct = distinct_percentage[distinct_percentage > distinct_threshold].index.tolist()\n\n    screened_features  = list(set(screen_cv + screen_mode + screen_distinct))\n     \n    return screened_features ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-02T08:43:09.937830Z","iopub.execute_input":"2024-12-02T08:43:09.938463Z","iopub.status.idle":"2024-12-02T08:43:09.949236Z","shell.execute_reply.started":"2024-12-02T08:43:09.938411Z","shell.execute_reply":"2024-12-02T08:43:09.947869Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"drop_list = feature_screening(X_train, min_cv=0.1, mode_threshold=99, distinct_threshold=90)\n\nX_train = X_train.drop(drop_list, axis=1)\nX_test = X_test.drop(drop_list, axis=1)\n\nX_train.shape, X_test.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-02T08:43:09.950882Z","iopub.execute_input":"2024-12-02T08:43:09.951327Z","iopub.status.idle":"2024-12-02T08:43:10.293384Z","shell.execute_reply.started":"2024-12-02T08:43:09.951281Z","shell.execute_reply":"2024-12-02T08:43:10.292134Z"}},"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"((51088, 31), (21895, 31))"},"metadata":{}}],"execution_count":6},{"cell_type":"markdown","source":"# Handle Out-of-Range ","metadata":{}},{"cell_type":"code","source":"import pandas as pd\n\ndef range_consistency(data, target):\n    # Define ranges for each column\n    column_ranges = {\n    'VehicleAge': (0,30),\n    'VehOdo': (0,120000),\n    'MMRAcquisitionAuctionAveragePrice': (800,46000),\n    'MMRAcquisitionAuctionCleanPrice': (1000,46000),\n    'MMRAcquisitionRetailAveragePrice': (1000,46000),\n    'MMRAcquisitonRetailCleanPrice': (1000,46000),\n    'MMRCurrentAuctionAveragePrice': (300,46000),\n    'MMRCurrentAuctionCleanPrice': (400,46000),\n    'MMRCurrentRetailAveragePrice': (800,46000),\n    'MMRCurrentRetailCleanPrice': (1000,46000),\n    'VehBCost': (1000,46000),\n    'WarrantyCost': (400,8000)\n    }\n\n    # Iterate through each column and fill NaN values outside the defined range\n    for column, (min_val, max_val) in column_ranges.items():\n        data[column] = data[column].apply(lambda x: x if min_val <= x <= max_val else None)\n        \n    return data, target","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-02T08:43:10.294732Z","iopub.execute_input":"2024-12-02T08:43:10.295149Z","iopub.status.idle":"2024-12-02T08:43:10.302348Z","shell.execute_reply.started":"2024-12-02T08:43:10.295114Z","shell.execute_reply":"2024-12-02T08:43:10.301280Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"X_train = range_consistency(X_train, y_train)[0]\nX_test = range_consistency(X_test, y_test)[0]\n\ny_train = range_consistency(X_train, y_train)[1]\ny_test = range_consistency(X_test, y_test)[1]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-02T08:43:10.303672Z","iopub.execute_input":"2024-12-02T08:43:10.304260Z","iopub.status.idle":"2024-12-02T08:43:10.987010Z","shell.execute_reply.started":"2024-12-02T08:43:10.304226Z","shell.execute_reply":"2024-12-02T08:43:10.985844Z"}},"outputs":[],"execution_count":8},{"cell_type":"code","source":"import numpy as np\n\ndef initial_preproc(data):\n    processed_data = data.copy()\n    # List of columns to drop\n    columns_to_drop = ['PurchDate', 'Model', 'Trim', 'SubModel', 'BYRNO', 'VNZIP1', 'VNST', 'WheelTypeID']\n    \n    # Drop the columns\n    processed_data = processed_data.drop(columns=columns_to_drop)\n    # Replace 'NOT AVAIL' in the 'Color' column with NaN\n    processed_data['Color'] = processed_data['Color'].replace('NOT AVAIL', np.nan)\n    processed_data['Transmission'] = processed_data['Transmission'].replace(['Manual'], 'MANUAL')\n    processed_data['Nationality'] = processed_data['Nationality'].replace(['OTHER','TOP LINE ASIAN'], 'OTHERS')\n    # Define a threshold for frequency (1% of total data)\n    threshold = 0.01 * len(processed_data)\n    \n    # Group classes in 'Color' column\n    color_freq = processed_data['Color'].value_counts()  # Get frequencies\n    color_to_other = color_freq[color_freq < threshold].index  # Classes with less than 1% frequency\n    processed_data['Color'] = processed_data['Color'].replace(color_to_other, 'OTHER')\n    \n    # Group classes in 'Make' column\n    make_freq = processed_data['Make'].value_counts()  # Get frequencies\n    make_to_other = make_freq[make_freq < threshold].index  # Classes with less than 1% frequency\n    processed_data['Make'] = processed_data['Make'].replace(make_to_other, 'OTHER')\n    \n    #From our previous Chi-Square Test\n    processed_data['PRIMEUNIT'].fillna('unknown', inplace=True)\n    processed_data['AUCGUART'].fillna('unknown', inplace=True)\n    \n    \n\n\n\n    return processed_data","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-02T08:43:10.988330Z","iopub.execute_input":"2024-12-02T08:43:10.988676Z","iopub.status.idle":"2024-12-02T08:43:10.997940Z","shell.execute_reply.started":"2024-12-02T08:43:10.988640Z","shell.execute_reply":"2024-12-02T08:43:10.996562Z"}},"outputs":[],"execution_count":9},{"cell_type":"code","source":"X_train = initial_preproc(X_train)\nX_test = initial_preproc(X_test)\n\nX_train.shape, X_test.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-02T08:43:10.999985Z","iopub.execute_input":"2024-12-02T08:43:11.000449Z","iopub.status.idle":"2024-12-02T08:43:11.196705Z","shell.execute_reply.started":"2024-12-02T08:43:11.000398Z","shell.execute_reply":"2024-12-02T08:43:11.195559Z"}},"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"((51088, 23), (21895, 23))"},"metadata":{}}],"execution_count":10},{"cell_type":"markdown","source":"# outliers","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\n\ndef outlier_handling(data, contamination=0.01):\n    inputs_iso = data.copy()\n    \n    # Continuous variables\n    continuous_columns = [\n        'VehicleAge', 'VehOdo', 'MMRAcquisitionAuctionAveragePrice', \n        'MMRAcquisitionAuctionCleanPrice', 'MMRAcquisitionRetailAveragePrice', \n        'MMRAcquisitonRetailCleanPrice', 'MMRCurrentAuctionAveragePrice', \n        'MMRCurrentAuctionCleanPrice', 'MMRCurrentRetailAveragePrice', \n        'MMRCurrentRetailCleanPrice', 'VehBCost', 'WarrantyCost'\n    ]\n    \n    # Categorical variables\n    categorical_columns = [\n        'Auction', 'Color', 'Transmission', 'WheelType', \n        'Nationality', 'Size', 'TopThreeAmericanName', \n        'PRIMEUNIT', 'AUCGUART', 'IsOnlineSale', 'Make' ]    \n    # Discard rows with NaN valuse\n    inputs_iso = inputs_iso.dropna()\n    \n    # Apply Z-score scaling to numerical columns\n    scaler = StandardScaler()\n    inputs_iso[continuous_columns] = scaler.fit_transform(inputs_iso[continuous_columns])\n    \n    # Apply label encoding to categorical columns\n    label_encoder = LabelEncoder()\n    inputs_iso[categorical_columns] = inputs_iso[categorical_columns].apply(label_encoder.fit_transform)\n    \n    # Fit Isolation Forest model\n    clf = IsolationForest(contamination=0.01, random_state=42)\n    clf.fit(inputs_iso)\n    \n    # Predict outliers\n    outliers = clf.predict(inputs_iso)\n    \n    # Add the outlier predictions to your DataFrame\n    inputs_iso['outlier'] = outliers\n    \n    outlier_index = inputs_iso[inputs_iso['outlier'] == -1].index\n\n    \n    return outlier_index","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-02T08:43:11.197894Z","iopub.execute_input":"2024-12-02T08:43:11.198182Z","iopub.status.idle":"2024-12-02T08:43:11.380742Z","shell.execute_reply.started":"2024-12-02T08:43:11.198153Z","shell.execute_reply":"2024-12-02T08:43:11.379672Z"}},"outputs":[],"execution_count":11},{"cell_type":"code","source":"outlier_index = outlier_handling(X_train, contamination=0.01)\n\nX_train = X_train.drop(outlier_index.tolist())\n\ny_train = y_train.drop(outlier_index.tolist())\n\nX_train.shape, y_train.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-02T08:43:11.381967Z","iopub.execute_input":"2024-12-02T08:43:11.382400Z","iopub.status.idle":"2024-12-02T08:43:12.413739Z","shell.execute_reply.started":"2024-12-02T08:43:11.382367Z","shell.execute_reply":"2024-12-02T08:43:12.412627Z"}},"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"((50607, 23), (50607,))"},"metadata":{}}],"execution_count":12},{"cell_type":"markdown","source":"# missing values","metadata":{}},{"cell_type":"markdown","source":"## Row cleaning","metadata":{}},{"cell_type":"code","source":"def missing_row_report(data, missrow=12):\n    processed_data = data.copy()\n\n    # Create a new column with the number of missing values in each row\n    processed_data['Num_Missing_Values'] = processed_data.isnull().sum(axis=1)\n\n    discard_missing_row = processed_data[processed_data['Num_Missing_Values'] > missrow].index.tolist()\n\n    return discard_missing_row","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-02T08:43:12.417505Z","iopub.execute_input":"2024-12-02T08:43:12.417949Z","iopub.status.idle":"2024-12-02T08:43:12.423999Z","shell.execute_reply.started":"2024-12-02T08:43:12.417914Z","shell.execute_reply":"2024-12-02T08:43:12.422586Z"}},"outputs":[],"execution_count":13},{"cell_type":"code","source":"discard_missing_row = missing_row_report(X_train, missrow=35)\n\nX_train = X_train.drop(discard_missing_row)\ny_train = y_train.drop(discard_missing_row)\n\nX_train.shape, y_train.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-02T08:43:12.425290Z","iopub.execute_input":"2024-12-02T08:43:12.425576Z","iopub.status.idle":"2024-12-02T08:43:12.502241Z","shell.execute_reply.started":"2024-12-02T08:43:12.425549Z","shell.execute_reply":"2024-12-02T08:43:12.500878Z"}},"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"((50607, 23), (50607,))"},"metadata":{}}],"execution_count":14},{"cell_type":"markdown","source":"## column cleaning ","metadata":{}},{"cell_type":"code","source":"def missing_col_report(data, misscol=50):\n    processed_data = data.copy()\n    \n    # Report on count and percentage of missing values in each column\n    missing_values_report = pd.DataFrame({\n        'Column': processed_data.columns,\n        'Missing Values': processed_data.isnull().sum(),\n        'Percentage Missing': processed_data.isnull().mean() * 100\n        })\n    discard_missing_col = missing_values_report[missing_values_report['Percentage Missing'] > misscol].index.tolist()\n    \n    return discard_missing_col","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-02T08:43:12.503678Z","iopub.execute_input":"2024-12-02T08:43:12.504159Z","iopub.status.idle":"2024-12-02T08:43:12.510769Z","shell.execute_reply.started":"2024-12-02T08:43:12.504110Z","shell.execute_reply":"2024-12-02T08:43:12.509572Z"}},"outputs":[],"execution_count":15},{"cell_type":"code","source":"discard_missing_col = missing_col_report(X_train, misscol=50)\n\nX_train = X_train.drop(discard_missing_col, axis=1)\nX_test = X_test.drop(discard_missing_col, axis=1)\n\nX_train.shape, X_test.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-02T08:43:12.512393Z","iopub.execute_input":"2024-12-02T08:43:12.512845Z","iopub.status.idle":"2024-12-02T08:43:12.603170Z","shell.execute_reply.started":"2024-12-02T08:43:12.512764Z","shell.execute_reply":"2024-12-02T08:43:12.602190Z"}},"outputs":[{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"((50607, 23), (21895, 23))"},"metadata":{}}],"execution_count":16},{"cell_type":"markdown","source":"## impute missing values","metadata":{}},{"cell_type":"code","source":"from sklearn.impute import  SimpleImputer\n\ndef missing_imputer(train, test):\n    \n    continuous = train.select_dtypes(exclude=['object','category']).columns.tolist()\n    categorical = train.select_dtypes(include=['object','category']).columns.tolist()\n\n    # Define imputation strategies for each subset of columns\n    cat_imputer = SimpleImputer(strategy='most_frequent')\n    cont_imputer = SimpleImputer(strategy='median')\n    \n    try:\n\n    # Impute missing values\n        train[continuous] = cont_imputer.fit_transform(train[continuous])\n        train[categorical] = cat_imputer.fit_transform(train[categorical])\n    \n        test[continuous] = cont_imputer.transform(test[continuous])\n        test[categorical] = cat_imputer.transform(test[categorical])\n\n    except:\n        test[continuous] = cont_imputer.transform(test[continuous])\n        test[categorical] = cat_imputer.transform(test[categorical])\n        \n    return train, test","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-02T08:43:12.605008Z","iopub.execute_input":"2024-12-02T08:43:12.605435Z","iopub.status.idle":"2024-12-02T08:43:12.616586Z","shell.execute_reply.started":"2024-12-02T08:43:12.605388Z","shell.execute_reply":"2024-12-02T08:43:12.615507Z"}},"outputs":[],"execution_count":17},{"cell_type":"code","source":"X_train, X_test = missing_imputer(X_train, X_test)\n\nX_train.shape, X_test.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-02T08:43:12.617935Z","iopub.execute_input":"2024-12-02T08:43:12.618342Z","iopub.status.idle":"2024-12-02T08:43:12.868882Z","shell.execute_reply.started":"2024-12-02T08:43:12.618297Z","shell.execute_reply":"2024-12-02T08:43:12.867835Z"}},"outputs":[{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"((50607, 23), (21895, 23))"},"metadata":{}}],"execution_count":18},{"cell_type":"markdown","source":"# transformation using the Box-Cox","metadata":{}},{"cell_type":"code","source":"from sklearn.preprocessing import PowerTransformer\n\nfrom sklearn.preprocessing import PowerTransformer\nimport pandas as pd\n\ndef transform_features(data):\n   \n    data_transformed = data.copy()  # Avoid modifying the original DataFrame\n    features = [\"VehBCost\", \"WarrantyCost\"]\n\n    for feature in features:\n        # Check if the feature contains non-positive values\n        has_negative_values = (data[feature] <= 0).any()\n        \n        # Select transformation method based on values\n        method = 'yeo-johnson' if has_negative_values else 'box-cox'\n        transformer = PowerTransformer(method=method, standardize=False)\n        \n        # Fit and transform the feature\n        data_transformed[f\"{feature}_transformed\"] = transformer.fit_transform(data[[feature]])\n        # Drop the original columns used for PowerTransformer\n        \n\n    return data_transformed","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-02T08:43:12.870439Z","iopub.execute_input":"2024-12-02T08:43:12.870922Z","iopub.status.idle":"2024-12-02T08:43:12.878455Z","shell.execute_reply.started":"2024-12-02T08:43:12.870873Z","shell.execute_reply":"2024-12-02T08:43:12.877334Z"}},"outputs":[],"execution_count":19},{"cell_type":"code","source":"transformed_train = transform_features(X_train)\ntransformed_test = transform_features(X_test)\n\ntransformed_train.shape, transformed_test.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-02T08:43:12.879746Z","iopub.execute_input":"2024-12-02T08:43:12.880132Z","iopub.status.idle":"2024-12-02T08:43:13.822681Z","shell.execute_reply.started":"2024-12-02T08:43:12.880101Z","shell.execute_reply":"2024-12-02T08:43:13.821681Z"}},"outputs":[{"execution_count":20,"output_type":"execute_result","data":{"text/plain":"((50607, 25), (21895, 25))"},"metadata":{}}],"execution_count":20},{"cell_type":"code","source":"\n\n\n# continuous variables\ncontinuous_columns_trans = [\n        'VehicleAge', 'VehOdo', 'MMRAcquisitionAuctionAveragePrice', \n        'MMRAcquisitionAuctionCleanPrice', 'MMRAcquisitionRetailAveragePrice', \n        'MMRAcquisitonRetailCleanPrice', 'MMRCurrentAuctionAveragePrice', \n        'MMRCurrentAuctionCleanPrice', 'MMRCurrentRetailAveragePrice', \n        'MMRCurrentRetailCleanPrice','VehBCost_transformed','WarrantyCost_transformed']\n    \n# Categorical variables\ncategorical_columns_trans = [\n        'Auction', 'Color', 'Transmission', 'WheelType', \n        'Nationality', 'Size', 'TopThreeAmericanName', \n        'PRIMEUNIT', 'AUCGUART', 'IsOnlineSale', 'Make' ]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-02T08:43:13.824053Z","iopub.execute_input":"2024-12-02T08:43:13.824374Z","iopub.status.idle":"2024-12-02T08:43:13.830494Z","shell.execute_reply.started":"2024-12-02T08:43:13.824343Z","shell.execute_reply":"2024-12-02T08:43:13.829023Z"}},"outputs":[],"execution_count":21},{"cell_type":"markdown","source":"# discretization by Chi-Merge","metadata":{}},{"cell_type":"code","source":"pip install scorecardbundle -q","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-02T08:43:13.832083Z","iopub.execute_input":"2024-12-02T08:43:13.832515Z","iopub.status.idle":"2024-12-02T08:43:24.028801Z","shell.execute_reply.started":"2024-12-02T08:43:13.832468Z","shell.execute_reply":"2024-12-02T08:43:24.027501Z"}},"outputs":[{"name":"stdout","text":"Note: you may need to restart the kernel to use updated packages.\n","output_type":"stream"}],"execution_count":22},{"cell_type":"code","source":"import numpy as np\n\ndef frequency_table(variable):\n    \n    # Get unique elements and their counts\n    unique_elements, counts = np.unique(variable, return_counts=True)\n\n    # Calculate percentages\n    percentages = (counts / len(variable)) * 100\n\n    # Create a dictionary to store the value counts and percentages\n    value_counts_and_percentages = zip(unique_elements, counts, percentages)\n\n    # Print the value counts and percentages\n    for i, j, k in value_counts_and_percentages:\n        print(f\"{i}: Count: {j}, Percentage: {k:.2f}%\")\n    return","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-02T08:43:24.030344Z","iopub.execute_input":"2024-12-02T08:43:24.030705Z","iopub.status.idle":"2024-12-02T08:43:24.037181Z","shell.execute_reply.started":"2024-12-02T08:43:24.030670Z","shell.execute_reply":"2024-12-02T08:43:24.036147Z"}},"outputs":[],"execution_count":23},{"cell_type":"code","source":"from scorecardbundle.feature_discretization import ChiMerge as cm\n\ndef discretizer1(train, test,y_train):\n    # Columns to discretize\n    chi_merge_list = [\"VehBCost\", \"WarrantyCost\"]\n    \n    # Initialize ChiMerge discretizer\n    trans_cm = cm.ChiMerge(max_intervals=5, min_intervals=1, decimal=3, output_dataframe=True)\n    result_cm = trans_cm.fit_transform(train[chi_merge_list], y_train.astype('int')) \n    boundaries_dict = {key: np.insert(boundaries, 0, -np.inf) for key, boundaries in trans_cm.boundaries_.items()}\n    \n    # Apply transformation to train and test sets\n    for key, boundaries in boundaries_dict.items():\n        column_name = f\"{key}_cat_cm\"\n        try:\n            # Discretize train set\n            train[column_name] = pd.cut(train[key], bins=boundaries, labels=False, right=False)\n            \n            # Discretize test set using the same boundaries\n            test[column_name] = pd.cut(test[key], bins=boundaries, labels=False, right=False)\n        except:\n            test[column_name] = pd.cut(test[key], bins=boundaries, labels=False, right=False)\n    \n    \n    return train, test\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-02T08:43:24.038679Z","iopub.execute_input":"2024-12-02T08:43:24.039129Z","iopub.status.idle":"2024-12-02T08:43:24.060005Z","shell.execute_reply.started":"2024-12-02T08:43:24.039084Z","shell.execute_reply":"2024-12-02T08:43:24.058918Z"}},"outputs":[],"execution_count":24},{"cell_type":"code","source":"from scorecardbundle.feature_discretization import ChiMerge as cm\nimport numpy as np\nimport pandas as pd\n\ndef discretizer(train, test, y_train):\n    # Columns to discretize\n    chi_merge_list = [\"VehBCost\", \"WarrantyCost\"]\n    \n    # Initialize ChiMerge discretizer\n    trans_cm = cm.ChiMerge(max_intervals=5, min_intervals=1, decimal=3, output_dataframe=True)\n    \n    # Fit ChiMerge on training data and target\n    result_cm = trans_cm.fit_transform(train[chi_merge_list], y_train.astype('int'))\n    \n    # Get boundaries for each column\n    boundaries_dict = {key: np.insert(boundaries, 0, -np.inf) for key, boundaries in trans_cm.boundaries_.items()}\n    \n    # Apply transformation to train and test sets using the same boundaries\n    for key, boundaries in boundaries_dict.items():\n        column_name = f\"{key}_cat_cm\"\n        \n        # Discretize train set\n        train[column_name] = pd.cut(train[key], bins=boundaries, labels=False, right=False)\n        \n        # Discretize test set using the same boundaries\n        try:\n            test[column_name] = pd.cut(test[key], bins=boundaries, labels=False, right=False)\n        except KeyError:\n            raise KeyError(f\"Column '{key}' not found in test set\")\n    \n    return train, test","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-02T08:43:24.061590Z","iopub.execute_input":"2024-12-02T08:43:24.062000Z","iopub.status.idle":"2024-12-02T08:43:24.071634Z","shell.execute_reply.started":"2024-12-02T08:43:24.061961Z","shell.execute_reply":"2024-12-02T08:43:24.070731Z"}},"outputs":[],"execution_count":25},{"cell_type":"code","source":"X_train, X_test = discretizer(X_train, X_test, y_train)\n\nX_train.shape, X_test.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-02T08:43:24.073365Z","iopub.execute_input":"2024-12-02T08:43:24.073734Z","iopub.status.idle":"2024-12-02T08:44:25.904191Z","shell.execute_reply.started":"2024-12-02T08:43:24.073701Z","shell.execute_reply":"2024-12-02T08:44:25.903057Z"}},"outputs":[{"execution_count":26,"output_type":"execute_result","data":{"text/plain":"((50607, 25), (21895, 25))"},"metadata":{}}],"execution_count":26},{"cell_type":"code","source":"\n# ordinal variables\nordinal_columns = [ 'VehBCost_cat_cm', 'WarrantyCost_cat_cm']\n\n# continuous variables\ncontinuous_columns = [\n        'VehicleAge', 'VehOdo', 'MMRAcquisitionAuctionAveragePrice', \n        'MMRAcquisitionAuctionCleanPrice', 'MMRAcquisitionRetailAveragePrice', \n        'MMRAcquisitonRetailCleanPrice', 'MMRCurrentAuctionAveragePrice', \n        'MMRCurrentAuctionCleanPrice', 'MMRCurrentRetailAveragePrice', \n        'MMRCurrentRetailCleanPrice']\n    \n# Categorical variables\ncategorical_columns = [\n        'Auction', 'Color', 'Transmission', 'WheelType', \n        'Nationality', 'Size', 'TopThreeAmericanName', \n        'PRIMEUNIT', 'AUCGUART', 'IsOnlineSale', 'Make' ]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-02T08:44:25.905683Z","iopub.execute_input":"2024-12-02T08:44:25.906145Z","iopub.status.idle":"2024-12-02T08:44:25.912151Z","shell.execute_reply.started":"2024-12-02T08:44:25.906098Z","shell.execute_reply":"2024-12-02T08:44:25.911115Z"}},"outputs":[],"execution_count":27},{"cell_type":"code","source":"!pip install shapely>=2.0.1 -q","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-02T08:44:25.913653Z","iopub.execute_input":"2024-12-02T08:44:25.914537Z","iopub.status.idle":"2024-12-02T08:44:36.054553Z","shell.execute_reply.started":"2024-12-02T08:44:25.914487Z","shell.execute_reply":"2024-12-02T08:44:36.052973Z"}},"outputs":[],"execution_count":28},{"cell_type":"code","source":"pip install --upgrade scikit-learn -q\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-02T08:44:36.056528Z","iopub.execute_input":"2024-12-02T08:44:36.056963Z","iopub.status.idle":"2024-12-02T08:44:46.353738Z","shell.execute_reply.started":"2024-12-02T08:44:36.056922Z","shell.execute_reply":"2024-12-02T08:44:46.352126Z"}},"outputs":[{"name":"stdout","text":"Note: you may need to restart the kernel to use updated packages.\n","output_type":"stream"}],"execution_count":29},{"cell_type":"code","source":"pip install -U scikit-learn -q\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-02T08:44:46.355918Z","iopub.execute_input":"2024-12-02T08:44:46.356446Z","iopub.status.idle":"2024-12-02T08:44:56.579807Z","shell.execute_reply.started":"2024-12-02T08:44:46.356394Z","shell.execute_reply":"2024-12-02T08:44:56.578450Z"}},"outputs":[{"name":"stdout","text":"Note: you may need to restart the kernel to use updated packages.\n","output_type":"stream"}],"execution_count":30},{"cell_type":"markdown","source":"# Pipeline","metadata":{}},{"cell_type":"code","source":"from sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.feature_selection import RFECV\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.preprocessing import  OneHotEncoder, OrdinalEncoder, StandardScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n\n\n\none_hot_encoder = OneHotEncoder(drop='first', handle_unknown='ignore', sparse_output=False)\n\nordinal_encoder = OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\n\nz_score = StandardScaler()\n\nlda = LinearDiscriminantAnalysis(n_components=None)\n\npca = PCA(n_components=2, random_state=717)\n\nwrapper = RFECV(estimator=DecisionTreeClassifier(random_state=29), step=1, min_features_to_select=10, cv=5, n_jobs=-1)\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-02T08:44:56.581903Z","iopub.execute_input":"2024-12-02T08:44:56.582387Z","iopub.status.idle":"2024-12-02T08:44:56.606512Z","shell.execute_reply.started":"2024-12-02T08:44:56.582335Z","shell.execute_reply":"2024-12-02T08:44:56.605325Z"}},"outputs":[],"execution_count":31},{"cell_type":"code","source":"# Define the preprocessing steps for numerical and categorical features separately\nnumerical_preprocessing_1 = Pipeline(steps=[\n    ('scaler', z_score),  # Scale numerical features\n    ('pca', pca)])  # Feature extraction on numerical features\n\n    \nnominal_preprocessing_1 = Pipeline(steps=[\n    ('encoder', one_hot_encoder),  # ordinal_encoder for chimerged  features\n    ('scaler', z_score)])  # Scale encoded features\n\nordinal_preprocessing_1 = Pipeline(steps=[\n    ('encoder', ordinal_encoder),  # One-hot encode nominal features\n    ('scaler', z_score)])  # Scale encoded features\n\n\n# Define the ColumnTransformer for numerical and categorical features\npreprocessor_1 = ColumnTransformer(transformers=[\n    (\"ord\", ordinal_preprocessing_1, ordinal_columns),\n    ('num', numerical_preprocessing_1, continuous_columns),\n    ('nom', nominal_preprocessing_1, categorical_columns),\n], remainder='drop')  # Passthrough any columns not specified\n\n\npipeline_1 = Pipeline(steps=[\n    ('preprocessor', preprocessor_1),\n    ('wrapper', wrapper),\n    ('model', DecisionTreeClassifier(random_state=42))])\n\n# Train the pipeline\npipe_1 = pipeline_1.fit(X_train, y_train)\npipe_1[:-1].get_feature_names_out().tolist()\n\n# Use the pipeline for prediction or other tasks\npredictions_1 = pipe_1.predict(X_test)\n\nfrom sklearn.metrics import accuracy_score\n\n# Calculate accuracy\naccuracy = accuracy_score(y_test, predictions_1)\nprint(\"Accuracy:\", accuracy)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-02T08:44:56.608251Z","iopub.execute_input":"2024-12-02T08:44:56.608604Z","iopub.status.idle":"2024-12-02T08:46:08.904465Z","shell.execute_reply.started":"2024-12-02T08:44:56.608570Z","shell.execute_reply":"2024-12-02T08:46:08.903167Z"}},"outputs":[{"name":"stdout","text":"Accuracy: 0.7858415163279288\n","output_type":"stream"}],"execution_count":32},{"cell_type":"code","source":"from sklearn.metrics import classification_report\n\n# Print a detailed classification report\nprint(classification_report(y_test, predictions_1))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-02T08:46:08.906314Z","iopub.execute_input":"2024-12-02T08:46:08.906649Z","iopub.status.idle":"2024-12-02T08:46:08.955144Z","shell.execute_reply.started":"2024-12-02T08:46:08.906617Z","shell.execute_reply":"2024-12-02T08:46:08.953895Z"}},"outputs":[{"name":"stdout","text":"              precision    recall  f1-score   support\n\n           0       0.89      0.87      0.88     19212\n           1       0.18      0.21      0.20      2683\n\n    accuracy                           0.79     21895\n   macro avg       0.53      0.54      0.54     21895\nweighted avg       0.80      0.79      0.79     21895\n\n","output_type":"stream"}],"execution_count":33},{"cell_type":"code","source":"pipeline_1","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-02T08:46:08.956470Z","iopub.execute_input":"2024-12-02T08:46:08.956799Z","iopub.status.idle":"2024-12-02T08:46:09.060993Z","shell.execute_reply.started":"2024-12-02T08:46:08.956748Z","shell.execute_reply":"2024-12-02T08:46:09.059844Z"}},"outputs":[{"execution_count":34,"output_type":"execute_result","data":{"text/plain":"Pipeline(steps=[('preprocessor',\n                 ColumnTransformer(transformers=[('ord',\n                                                  Pipeline(steps=[('encoder',\n                                                                   OrdinalEncoder(handle_unknown='use_encoded_value',\n                                                                                  unknown_value=-1)),\n                                                                  ('scaler',\n                                                                   StandardScaler())]),\n                                                  ['VehBCost_cat_cm',\n                                                   'WarrantyCost_cat_cm']),\n                                                 ('num',\n                                                  Pipeline(steps=[('scaler',\n                                                                   StandardScaler()),\n                                                                  ('pca',\n                                                                   PCA(n_components=2,\n                                                                       random_state=717))]),\n                                                  ['VehicleAge...\n                                                                                 sparse_output=False)),\n                                                                  ('scaler',\n                                                                   StandardScaler())]),\n                                                  ['Auction', 'Color',\n                                                   'Transmission', 'WheelType',\n                                                   'Nationality', 'Size',\n                                                   'TopThreeAmericanName',\n                                                   'PRIMEUNIT', 'AUCGUART',\n                                                   'IsOnlineSale', 'Make'])])),\n                ('wrapper',\n                 RFECV(cv=5, estimator=DecisionTreeClassifier(random_state=29),\n                       min_features_to_select=10, n_jobs=-1)),\n                ('model', DecisionTreeClassifier(random_state=42))])","text/html":"<style>#sk-container-id-1 {\n  /* Definition of color scheme common for light and dark mode */\n  --sklearn-color-text: black;\n  --sklearn-color-line: gray;\n  /* Definition of color scheme for unfitted estimators */\n  --sklearn-color-unfitted-level-0: #fff5e6;\n  --sklearn-color-unfitted-level-1: #f6e4d2;\n  --sklearn-color-unfitted-level-2: #ffe0b3;\n  --sklearn-color-unfitted-level-3: chocolate;\n  /* Definition of color scheme for fitted estimators */\n  --sklearn-color-fitted-level-0: #f0f8ff;\n  --sklearn-color-fitted-level-1: #d4ebff;\n  --sklearn-color-fitted-level-2: #b3dbfd;\n  --sklearn-color-fitted-level-3: cornflowerblue;\n\n  /* Specific color for light theme */\n  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-icon: #696969;\n\n  @media (prefers-color-scheme: dark) {\n    /* Redefinition of color scheme for dark theme */\n    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-icon: #878787;\n  }\n}\n\n#sk-container-id-1 {\n  color: var(--sklearn-color-text);\n}\n\n#sk-container-id-1 pre {\n  padding: 0;\n}\n\n#sk-container-id-1 input.sk-hidden--visually {\n  border: 0;\n  clip: rect(1px 1px 1px 1px);\n  clip: rect(1px, 1px, 1px, 1px);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}\n\n#sk-container-id-1 div.sk-dashed-wrapped {\n  border: 1px dashed var(--sklearn-color-line);\n  margin: 0 0.4em 0.5em 0.4em;\n  box-sizing: border-box;\n  padding-bottom: 0.4em;\n  background-color: var(--sklearn-color-background);\n}\n\n#sk-container-id-1 div.sk-container {\n  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n     but bootstrap.min.css set `[hidden] { display: none !important; }`\n     so we also need the `!important` here to be able to override the\n     default hidden behavior on the sphinx rendered scikit-learn.org.\n     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n  display: inline-block !important;\n  position: relative;\n}\n\n#sk-container-id-1 div.sk-text-repr-fallback {\n  display: none;\n}\n\ndiv.sk-parallel-item,\ndiv.sk-serial,\ndiv.sk-item {\n  /* draw centered vertical line to link estimators */\n  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n  background-size: 2px 100%;\n  background-repeat: no-repeat;\n  background-position: center center;\n}\n\n/* Parallel-specific style estimator block */\n\n#sk-container-id-1 div.sk-parallel-item::after {\n  content: \"\";\n  width: 100%;\n  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n  flex-grow: 1;\n}\n\n#sk-container-id-1 div.sk-parallel {\n  display: flex;\n  align-items: stretch;\n  justify-content: center;\n  background-color: var(--sklearn-color-background);\n  position: relative;\n}\n\n#sk-container-id-1 div.sk-parallel-item {\n  display: flex;\n  flex-direction: column;\n}\n\n#sk-container-id-1 div.sk-parallel-item:first-child::after {\n  align-self: flex-end;\n  width: 50%;\n}\n\n#sk-container-id-1 div.sk-parallel-item:last-child::after {\n  align-self: flex-start;\n  width: 50%;\n}\n\n#sk-container-id-1 div.sk-parallel-item:only-child::after {\n  width: 0;\n}\n\n/* Serial-specific style estimator block */\n\n#sk-container-id-1 div.sk-serial {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: var(--sklearn-color-background);\n  padding-right: 1em;\n  padding-left: 1em;\n}\n\n\n/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\nclickable and can be expanded/collapsed.\n- Pipeline and ColumnTransformer use this feature and define the default style\n- Estimators will overwrite some part of the style using the `sk-estimator` class\n*/\n\n/* Pipeline and ColumnTransformer style (default) */\n\n#sk-container-id-1 div.sk-toggleable {\n  /* Default theme specific background. It is overwritten whether we have a\n  specific estimator or a Pipeline/ColumnTransformer */\n  background-color: var(--sklearn-color-background);\n}\n\n/* Toggleable label */\n#sk-container-id-1 label.sk-toggleable__label {\n  cursor: pointer;\n  display: block;\n  width: 100%;\n  margin-bottom: 0;\n  padding: 0.5em;\n  box-sizing: border-box;\n  text-align: center;\n}\n\n#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n  /* Arrow on the left of the label */\n  content: \"▸\";\n  float: left;\n  margin-right: 0.25em;\n  color: var(--sklearn-color-icon);\n}\n\n#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n  color: var(--sklearn-color-text);\n}\n\n/* Toggleable content - dropdown */\n\n#sk-container-id-1 div.sk-toggleable__content {\n  max-height: 0;\n  max-width: 0;\n  overflow: hidden;\n  text-align: left;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-1 div.sk-toggleable__content.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-1 div.sk-toggleable__content pre {\n  margin: 0.2em;\n  border-radius: 0.25em;\n  color: var(--sklearn-color-text);\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n  /* unfitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n  /* Expand drop-down */\n  max-height: 200px;\n  max-width: 100%;\n  overflow: auto;\n}\n\n#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n  content: \"▾\";\n}\n\n/* Pipeline/ColumnTransformer-specific style */\n\n#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator-specific style */\n\n/* Colorize estimator box */\n#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n#sk-container-id-1 div.sk-label label {\n  /* The background is the default theme color */\n  color: var(--sklearn-color-text-on-default-background);\n}\n\n/* On hover, darken the color of the background */\n#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n/* Label box, darken color on hover, fitted */\n#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator label */\n\n#sk-container-id-1 div.sk-label label {\n  font-family: monospace;\n  font-weight: bold;\n  display: inline-block;\n  line-height: 1.2em;\n}\n\n#sk-container-id-1 div.sk-label-container {\n  text-align: center;\n}\n\n/* Estimator-specific */\n#sk-container-id-1 div.sk-estimator {\n  font-family: monospace;\n  border: 1px dotted var(--sklearn-color-border-box);\n  border-radius: 0.25em;\n  box-sizing: border-box;\n  margin-bottom: 0.5em;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-1 div.sk-estimator.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n/* on hover */\n#sk-container-id-1 div.sk-estimator:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-1 div.sk-estimator.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Specification for estimator info (e.g. \"i\" and \"?\") */\n\n/* Common style for \"i\" and \"?\" */\n\n.sk-estimator-doc-link,\na:link.sk-estimator-doc-link,\na:visited.sk-estimator-doc-link {\n  float: right;\n  font-size: smaller;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1em;\n  height: 1em;\n  width: 1em;\n  text-decoration: none !important;\n  margin-left: 1ex;\n  /* unfitted */\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n  color: var(--sklearn-color-unfitted-level-1);\n}\n\n.sk-estimator-doc-link.fitted,\na:link.sk-estimator-doc-link.fitted,\na:visited.sk-estimator-doc-link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\ndiv.sk-estimator:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\ndiv.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n/* Span, style for the box shown on hovering the info icon */\n.sk-estimator-doc-link span {\n  display: none;\n  z-index: 9999;\n  position: relative;\n  font-weight: normal;\n  right: .2ex;\n  padding: .5ex;\n  margin: .5ex;\n  width: min-content;\n  min-width: 20ex;\n  max-width: 50ex;\n  color: var(--sklearn-color-text);\n  box-shadow: 2pt 2pt 4pt #999;\n  /* unfitted */\n  background: var(--sklearn-color-unfitted-level-0);\n  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n}\n\n.sk-estimator-doc-link.fitted span {\n  /* fitted */\n  background: var(--sklearn-color-fitted-level-0);\n  border: var(--sklearn-color-fitted-level-3);\n}\n\n.sk-estimator-doc-link:hover span {\n  display: block;\n}\n\n/* \"?\"-specific style due to the `<a>` HTML tag */\n\n#sk-container-id-1 a.estimator_doc_link {\n  float: right;\n  font-size: 1rem;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1rem;\n  height: 1rem;\n  width: 1rem;\n  text-decoration: none;\n  /* unfitted */\n  color: var(--sklearn-color-unfitted-level-1);\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n}\n\n#sk-container-id-1 a.estimator_doc_link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\n#sk-container-id-1 a.estimator_doc_link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n}\n</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n                 ColumnTransformer(transformers=[(&#x27;ord&#x27;,\n                                                  Pipeline(steps=[(&#x27;encoder&#x27;,\n                                                                   OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,\n                                                                                  unknown_value=-1)),\n                                                                  (&#x27;scaler&#x27;,\n                                                                   StandardScaler())]),\n                                                  [&#x27;VehBCost_cat_cm&#x27;,\n                                                   &#x27;WarrantyCost_cat_cm&#x27;]),\n                                                 (&#x27;num&#x27;,\n                                                  Pipeline(steps=[(&#x27;scaler&#x27;,\n                                                                   StandardScaler()),\n                                                                  (&#x27;pca&#x27;,\n                                                                   PCA(n_components=2,\n                                                                       random_state=717))]),\n                                                  [&#x27;VehicleAge...\n                                                                                 sparse_output=False)),\n                                                                  (&#x27;scaler&#x27;,\n                                                                   StandardScaler())]),\n                                                  [&#x27;Auction&#x27;, &#x27;Color&#x27;,\n                                                   &#x27;Transmission&#x27;, &#x27;WheelType&#x27;,\n                                                   &#x27;Nationality&#x27;, &#x27;Size&#x27;,\n                                                   &#x27;TopThreeAmericanName&#x27;,\n                                                   &#x27;PRIMEUNIT&#x27;, &#x27;AUCGUART&#x27;,\n                                                   &#x27;IsOnlineSale&#x27;, &#x27;Make&#x27;])])),\n                (&#x27;wrapper&#x27;,\n                 RFECV(cv=5, estimator=DecisionTreeClassifier(random_state=29),\n                       min_features_to_select=10, n_jobs=-1)),\n                (&#x27;model&#x27;, DecisionTreeClassifier(random_state=42))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;Pipeline<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.pipeline.Pipeline.html\">?<span>Documentation for Pipeline</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n                 ColumnTransformer(transformers=[(&#x27;ord&#x27;,\n                                                  Pipeline(steps=[(&#x27;encoder&#x27;,\n                                                                   OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,\n                                                                                  unknown_value=-1)),\n                                                                  (&#x27;scaler&#x27;,\n                                                                   StandardScaler())]),\n                                                  [&#x27;VehBCost_cat_cm&#x27;,\n                                                   &#x27;WarrantyCost_cat_cm&#x27;]),\n                                                 (&#x27;num&#x27;,\n                                                  Pipeline(steps=[(&#x27;scaler&#x27;,\n                                                                   StandardScaler()),\n                                                                  (&#x27;pca&#x27;,\n                                                                   PCA(n_components=2,\n                                                                       random_state=717))]),\n                                                  [&#x27;VehicleAge...\n                                                                                 sparse_output=False)),\n                                                                  (&#x27;scaler&#x27;,\n                                                                   StandardScaler())]),\n                                                  [&#x27;Auction&#x27;, &#x27;Color&#x27;,\n                                                   &#x27;Transmission&#x27;, &#x27;WheelType&#x27;,\n                                                   &#x27;Nationality&#x27;, &#x27;Size&#x27;,\n                                                   &#x27;TopThreeAmericanName&#x27;,\n                                                   &#x27;PRIMEUNIT&#x27;, &#x27;AUCGUART&#x27;,\n                                                   &#x27;IsOnlineSale&#x27;, &#x27;Make&#x27;])])),\n                (&#x27;wrapper&#x27;,\n                 RFECV(cv=5, estimator=DecisionTreeClassifier(random_state=29),\n                       min_features_to_select=10, n_jobs=-1)),\n                (&#x27;model&#x27;, DecisionTreeClassifier(random_state=42))])</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;preprocessor: ColumnTransformer<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.compose.ColumnTransformer.html\">?<span>Documentation for preprocessor: ColumnTransformer</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>ColumnTransformer(transformers=[(&#x27;ord&#x27;,\n                                 Pipeline(steps=[(&#x27;encoder&#x27;,\n                                                  OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,\n                                                                 unknown_value=-1)),\n                                                 (&#x27;scaler&#x27;, StandardScaler())]),\n                                 [&#x27;VehBCost_cat_cm&#x27;, &#x27;WarrantyCost_cat_cm&#x27;]),\n                                (&#x27;num&#x27;,\n                                 Pipeline(steps=[(&#x27;scaler&#x27;, StandardScaler()),\n                                                 (&#x27;pca&#x27;,\n                                                  PCA(n_components=2,\n                                                      random_state=717))]),\n                                 [&#x27;VehicleAge&#x27;, &#x27;VehOdo&#x27;,\n                                  &#x27;MMRAcquisitionAuctio...\n                                  &#x27;MMRCurrentAuctionCleanPrice&#x27;,\n                                  &#x27;MMRCurrentRetailAveragePrice&#x27;,\n                                  &#x27;MMRCurrentRetailCleanPrice&#x27;]),\n                                (&#x27;nom&#x27;,\n                                 Pipeline(steps=[(&#x27;encoder&#x27;,\n                                                  OneHotEncoder(drop=&#x27;first&#x27;,\n                                                                handle_unknown=&#x27;ignore&#x27;,\n                                                                sparse_output=False)),\n                                                 (&#x27;scaler&#x27;, StandardScaler())]),\n                                 [&#x27;Auction&#x27;, &#x27;Color&#x27;, &#x27;Transmission&#x27;,\n                                  &#x27;WheelType&#x27;, &#x27;Nationality&#x27;, &#x27;Size&#x27;,\n                                  &#x27;TopThreeAmericanName&#x27;, &#x27;PRIMEUNIT&#x27;,\n                                  &#x27;AUCGUART&#x27;, &#x27;IsOnlineSale&#x27;, &#x27;Make&#x27;])])</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">ord</label><div class=\"sk-toggleable__content fitted\"><pre>[&#x27;VehBCost_cat_cm&#x27;, &#x27;WarrantyCost_cat_cm&#x27;]</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;OrdinalEncoder<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.preprocessing.OrdinalEncoder.html\">?<span>Documentation for OrdinalEncoder</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;, unknown_value=-1)</pre></div> </div></div><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;StandardScaler<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.preprocessing.StandardScaler.html\">?<span>Documentation for StandardScaler</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>StandardScaler()</pre></div> </div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">num</label><div class=\"sk-toggleable__content fitted\"><pre>[&#x27;VehicleAge&#x27;, &#x27;VehOdo&#x27;, &#x27;MMRAcquisitionAuctionAveragePrice&#x27;, &#x27;MMRAcquisitionAuctionCleanPrice&#x27;, &#x27;MMRAcquisitionRetailAveragePrice&#x27;, &#x27;MMRAcquisitonRetailCleanPrice&#x27;, &#x27;MMRCurrentAuctionAveragePrice&#x27;, &#x27;MMRCurrentAuctionCleanPrice&#x27;, &#x27;MMRCurrentRetailAveragePrice&#x27;, &#x27;MMRCurrentRetailCleanPrice&#x27;]</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;StandardScaler<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.preprocessing.StandardScaler.html\">?<span>Documentation for StandardScaler</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>StandardScaler()</pre></div> </div></div><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" ><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;PCA<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.decomposition.PCA.html\">?<span>Documentation for PCA</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>PCA(n_components=2, random_state=717)</pre></div> </div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" ><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">nom</label><div class=\"sk-toggleable__content fitted\"><pre>[&#x27;Auction&#x27;, &#x27;Color&#x27;, &#x27;Transmission&#x27;, &#x27;WheelType&#x27;, &#x27;Nationality&#x27;, &#x27;Size&#x27;, &#x27;TopThreeAmericanName&#x27;, &#x27;PRIMEUNIT&#x27;, &#x27;AUCGUART&#x27;, &#x27;IsOnlineSale&#x27;, &#x27;Make&#x27;]</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-10\" type=\"checkbox\" ><label for=\"sk-estimator-id-10\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;OneHotEncoder<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.preprocessing.OneHotEncoder.html\">?<span>Documentation for OneHotEncoder</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>OneHotEncoder(drop=&#x27;first&#x27;, handle_unknown=&#x27;ignore&#x27;, sparse_output=False)</pre></div> </div></div><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-11\" type=\"checkbox\" ><label for=\"sk-estimator-id-11\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;StandardScaler<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.preprocessing.StandardScaler.html\">?<span>Documentation for StandardScaler</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>StandardScaler()</pre></div> </div></div></div></div></div></div></div></div></div><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-12\" type=\"checkbox\" ><label for=\"sk-estimator-id-12\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;wrapper: RFECV<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.feature_selection.RFECV.html\">?<span>Documentation for wrapper: RFECV</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>RFECV(cv=5, estimator=DecisionTreeClassifier(random_state=29),\n      min_features_to_select=10, n_jobs=-1)</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-13\" type=\"checkbox\" ><label for=\"sk-estimator-id-13\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">estimator: DecisionTreeClassifier</label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeClassifier(random_state=29)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-14\" type=\"checkbox\" ><label for=\"sk-estimator-id-14\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;DecisionTreeClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.tree.DecisionTreeClassifier.html\">?<span>Documentation for DecisionTreeClassifier</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeClassifier(random_state=29)</pre></div> </div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-15\" type=\"checkbox\" ><label for=\"sk-estimator-id-15\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;DecisionTreeClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.tree.DecisionTreeClassifier.html\">?<span>Documentation for DecisionTreeClassifier</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeClassifier(random_state=42)</pre></div> </div></div></div></div></div></div>"},"metadata":{}}],"execution_count":34},{"cell_type":"code","source":"pipe_1 = pipeline_1.fit(X_train, y_train)\npipe_1[:-1].get_feature_names_out().tolist()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-02T08:46:09.062227Z","iopub.execute_input":"2024-12-02T08:46:09.062505Z","iopub.status.idle":"2024-12-02T08:47:18.063100Z","shell.execute_reply.started":"2024-12-02T08:46:09.062477Z","shell.execute_reply":"2024-12-02T08:47:18.061882Z"}},"outputs":[{"execution_count":35,"output_type":"execute_result","data":{"text/plain":"['ord__VehBCost_cat_cm',\n 'ord__WarrantyCost_cat_cm',\n 'num__pca0',\n 'num__pca1',\n 'nom__Auction_MANHEIM',\n 'nom__Auction_OTHER',\n 'nom__Color_BLACK',\n 'nom__Color_BLUE',\n 'nom__Color_GOLD',\n 'nom__Color_GREEN',\n 'nom__Color_GREY',\n 'nom__Color_MAROON',\n 'nom__Color_RED',\n 'nom__Color_SILVER',\n 'nom__Color_WHITE',\n 'nom__Transmission_MANUAL',\n 'nom__WheelType_Covers',\n 'nom__Nationality_OTHER ASIAN',\n 'nom__Size_LARGE',\n 'nom__Size_LARGE TRUCK',\n 'nom__Size_MEDIUM',\n 'nom__Size_MEDIUM SUV',\n 'nom__Size_VAN',\n 'nom__TopThreeAmericanName_FORD',\n 'nom__TopThreeAmericanName_GM',\n 'nom__TopThreeAmericanName_OTHER',\n 'nom__IsOnlineSale_1.0',\n 'nom__Make_CHRYSLER',\n 'nom__Make_DODGE',\n 'nom__Make_FORD',\n 'nom__Make_OTHER']"},"metadata":{}}],"execution_count":35},{"cell_type":"code","source":"# Define the preprocessing steps for numerical and categorical features separately\nnumerical_preprocessing_2 = Pipeline(steps=[\n    ('scaler', z_score),  # Scale numerical features\n    ('LDA', lda)])  # Feature extraction on numerical features\n\nordinal_preprocessing_2 = Pipeline(steps=[\n    ('encoder', ordinal_encoder),  # ordinal_encoder for chimerged  features\n    ('scaler', z_score)])  # Scale encoded features\n\nnominal_preprocessing_2 = Pipeline(steps=[\n    ('encoder', one_hot_encoder),  # One-hot encode nominal features\n    ('scaler', z_score)])  # Scale encoded features\n\n\n\n# Define the ColumnTransformer for numerical and categorical features\npreprocessor_2 = ColumnTransformer(transformers=[\n    (\"ord\", ordinal_preprocessing_2, ordinal_columns),\n    ('num', numerical_preprocessing_2, continuous_columns),\n    ('nom', nominal_preprocessing_2, categorical_columns),\n], remainder='drop')  # Passthrough any columns not specified\n\n\npipeline_2 = Pipeline(steps=[\n    ('preprocessor', preprocessor_2),\n    ('wrapper', wrapper),\n    ('model', DecisionTreeClassifier(random_state=42))])\n\n# Train the pipeline\npipe_2 = pipeline_2.fit(X_train, y_train)\npipe_2[:-1].get_feature_names_out().tolist()\n\n# Use the pipeline for prediction or other tasks\npredictions_2 = pipe_2.predict(X_test)\n\nfrom sklearn.metrics import accuracy_score\n\n# Calculate accuracy\naccuracy = accuracy_score(y_test, predictions_2)\nprint(\"Accuracy:\", accuracy)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-02T08:47:18.064749Z","iopub.execute_input":"2024-12-02T08:47:18.065110Z","iopub.status.idle":"2024-12-02T08:48:00.458474Z","shell.execute_reply.started":"2024-12-02T08:47:18.065076Z","shell.execute_reply":"2024-12-02T08:48:00.457270Z"}},"outputs":[{"name":"stdout","text":"Accuracy: 0.7905001141813199\n","output_type":"stream"}],"execution_count":36},{"cell_type":"code","source":"pipe_2","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-02T08:48:00.460021Z","iopub.execute_input":"2024-12-02T08:48:00.460368Z","iopub.status.idle":"2024-12-02T08:48:00.560987Z","shell.execute_reply.started":"2024-12-02T08:48:00.460331Z","shell.execute_reply":"2024-12-02T08:48:00.559870Z"}},"outputs":[{"execution_count":37,"output_type":"execute_result","data":{"text/plain":"Pipeline(steps=[('preprocessor',\n                 ColumnTransformer(transformers=[('ord',\n                                                  Pipeline(steps=[('encoder',\n                                                                   OrdinalEncoder(handle_unknown='use_encoded_value',\n                                                                                  unknown_value=-1)),\n                                                                  ('scaler',\n                                                                   StandardScaler())]),\n                                                  ['VehBCost_cat_cm',\n                                                   'WarrantyCost_cat_cm']),\n                                                 ('num',\n                                                  Pipeline(steps=[('scaler',\n                                                                   StandardScaler()),\n                                                                  ('LDA',\n                                                                   LinearDiscriminantAnalysis())]),\n                                                  ['VehicleAge', 'VehOd...\n                                                                                 sparse_output=False)),\n                                                                  ('scaler',\n                                                                   StandardScaler())]),\n                                                  ['Auction', 'Color',\n                                                   'Transmission', 'WheelType',\n                                                   'Nationality', 'Size',\n                                                   'TopThreeAmericanName',\n                                                   'PRIMEUNIT', 'AUCGUART',\n                                                   'IsOnlineSale', 'Make'])])),\n                ('wrapper',\n                 RFECV(cv=5, estimator=DecisionTreeClassifier(random_state=29),\n                       min_features_to_select=10, n_jobs=-1)),\n                ('model', DecisionTreeClassifier(random_state=42))])","text/html":"<style>#sk-container-id-2 {\n  /* Definition of color scheme common for light and dark mode */\n  --sklearn-color-text: black;\n  --sklearn-color-line: gray;\n  /* Definition of color scheme for unfitted estimators */\n  --sklearn-color-unfitted-level-0: #fff5e6;\n  --sklearn-color-unfitted-level-1: #f6e4d2;\n  --sklearn-color-unfitted-level-2: #ffe0b3;\n  --sklearn-color-unfitted-level-3: chocolate;\n  /* Definition of color scheme for fitted estimators */\n  --sklearn-color-fitted-level-0: #f0f8ff;\n  --sklearn-color-fitted-level-1: #d4ebff;\n  --sklearn-color-fitted-level-2: #b3dbfd;\n  --sklearn-color-fitted-level-3: cornflowerblue;\n\n  /* Specific color for light theme */\n  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-icon: #696969;\n\n  @media (prefers-color-scheme: dark) {\n    /* Redefinition of color scheme for dark theme */\n    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-icon: #878787;\n  }\n}\n\n#sk-container-id-2 {\n  color: var(--sklearn-color-text);\n}\n\n#sk-container-id-2 pre {\n  padding: 0;\n}\n\n#sk-container-id-2 input.sk-hidden--visually {\n  border: 0;\n  clip: rect(1px 1px 1px 1px);\n  clip: rect(1px, 1px, 1px, 1px);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}\n\n#sk-container-id-2 div.sk-dashed-wrapped {\n  border: 1px dashed var(--sklearn-color-line);\n  margin: 0 0.4em 0.5em 0.4em;\n  box-sizing: border-box;\n  padding-bottom: 0.4em;\n  background-color: var(--sklearn-color-background);\n}\n\n#sk-container-id-2 div.sk-container {\n  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n     but bootstrap.min.css set `[hidden] { display: none !important; }`\n     so we also need the `!important` here to be able to override the\n     default hidden behavior on the sphinx rendered scikit-learn.org.\n     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n  display: inline-block !important;\n  position: relative;\n}\n\n#sk-container-id-2 div.sk-text-repr-fallback {\n  display: none;\n}\n\ndiv.sk-parallel-item,\ndiv.sk-serial,\ndiv.sk-item {\n  /* draw centered vertical line to link estimators */\n  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n  background-size: 2px 100%;\n  background-repeat: no-repeat;\n  background-position: center center;\n}\n\n/* Parallel-specific style estimator block */\n\n#sk-container-id-2 div.sk-parallel-item::after {\n  content: \"\";\n  width: 100%;\n  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n  flex-grow: 1;\n}\n\n#sk-container-id-2 div.sk-parallel {\n  display: flex;\n  align-items: stretch;\n  justify-content: center;\n  background-color: var(--sklearn-color-background);\n  position: relative;\n}\n\n#sk-container-id-2 div.sk-parallel-item {\n  display: flex;\n  flex-direction: column;\n}\n\n#sk-container-id-2 div.sk-parallel-item:first-child::after {\n  align-self: flex-end;\n  width: 50%;\n}\n\n#sk-container-id-2 div.sk-parallel-item:last-child::after {\n  align-self: flex-start;\n  width: 50%;\n}\n\n#sk-container-id-2 div.sk-parallel-item:only-child::after {\n  width: 0;\n}\n\n/* Serial-specific style estimator block */\n\n#sk-container-id-2 div.sk-serial {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: var(--sklearn-color-background);\n  padding-right: 1em;\n  padding-left: 1em;\n}\n\n\n/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\nclickable and can be expanded/collapsed.\n- Pipeline and ColumnTransformer use this feature and define the default style\n- Estimators will overwrite some part of the style using the `sk-estimator` class\n*/\n\n/* Pipeline and ColumnTransformer style (default) */\n\n#sk-container-id-2 div.sk-toggleable {\n  /* Default theme specific background. It is overwritten whether we have a\n  specific estimator or a Pipeline/ColumnTransformer */\n  background-color: var(--sklearn-color-background);\n}\n\n/* Toggleable label */\n#sk-container-id-2 label.sk-toggleable__label {\n  cursor: pointer;\n  display: block;\n  width: 100%;\n  margin-bottom: 0;\n  padding: 0.5em;\n  box-sizing: border-box;\n  text-align: center;\n}\n\n#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n  /* Arrow on the left of the label */\n  content: \"▸\";\n  float: left;\n  margin-right: 0.25em;\n  color: var(--sklearn-color-icon);\n}\n\n#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n  color: var(--sklearn-color-text);\n}\n\n/* Toggleable content - dropdown */\n\n#sk-container-id-2 div.sk-toggleable__content {\n  max-height: 0;\n  max-width: 0;\n  overflow: hidden;\n  text-align: left;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-2 div.sk-toggleable__content.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-2 div.sk-toggleable__content pre {\n  margin: 0.2em;\n  border-radius: 0.25em;\n  color: var(--sklearn-color-text);\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n  /* unfitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n  /* Expand drop-down */\n  max-height: 200px;\n  max-width: 100%;\n  overflow: auto;\n}\n\n#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n  content: \"▾\";\n}\n\n/* Pipeline/ColumnTransformer-specific style */\n\n#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator-specific style */\n\n/* Colorize estimator box */\n#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n#sk-container-id-2 div.sk-label label {\n  /* The background is the default theme color */\n  color: var(--sklearn-color-text-on-default-background);\n}\n\n/* On hover, darken the color of the background */\n#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n/* Label box, darken color on hover, fitted */\n#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator label */\n\n#sk-container-id-2 div.sk-label label {\n  font-family: monospace;\n  font-weight: bold;\n  display: inline-block;\n  line-height: 1.2em;\n}\n\n#sk-container-id-2 div.sk-label-container {\n  text-align: center;\n}\n\n/* Estimator-specific */\n#sk-container-id-2 div.sk-estimator {\n  font-family: monospace;\n  border: 1px dotted var(--sklearn-color-border-box);\n  border-radius: 0.25em;\n  box-sizing: border-box;\n  margin-bottom: 0.5em;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-2 div.sk-estimator.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n/* on hover */\n#sk-container-id-2 div.sk-estimator:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-2 div.sk-estimator.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Specification for estimator info (e.g. \"i\" and \"?\") */\n\n/* Common style for \"i\" and \"?\" */\n\n.sk-estimator-doc-link,\na:link.sk-estimator-doc-link,\na:visited.sk-estimator-doc-link {\n  float: right;\n  font-size: smaller;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1em;\n  height: 1em;\n  width: 1em;\n  text-decoration: none !important;\n  margin-left: 1ex;\n  /* unfitted */\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n  color: var(--sklearn-color-unfitted-level-1);\n}\n\n.sk-estimator-doc-link.fitted,\na:link.sk-estimator-doc-link.fitted,\na:visited.sk-estimator-doc-link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\ndiv.sk-estimator:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\ndiv.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n/* Span, style for the box shown on hovering the info icon */\n.sk-estimator-doc-link span {\n  display: none;\n  z-index: 9999;\n  position: relative;\n  font-weight: normal;\n  right: .2ex;\n  padding: .5ex;\n  margin: .5ex;\n  width: min-content;\n  min-width: 20ex;\n  max-width: 50ex;\n  color: var(--sklearn-color-text);\n  box-shadow: 2pt 2pt 4pt #999;\n  /* unfitted */\n  background: var(--sklearn-color-unfitted-level-0);\n  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n}\n\n.sk-estimator-doc-link.fitted span {\n  /* fitted */\n  background: var(--sklearn-color-fitted-level-0);\n  border: var(--sklearn-color-fitted-level-3);\n}\n\n.sk-estimator-doc-link:hover span {\n  display: block;\n}\n\n/* \"?\"-specific style due to the `<a>` HTML tag */\n\n#sk-container-id-2 a.estimator_doc_link {\n  float: right;\n  font-size: 1rem;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1rem;\n  height: 1rem;\n  width: 1rem;\n  text-decoration: none;\n  /* unfitted */\n  color: var(--sklearn-color-unfitted-level-1);\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n}\n\n#sk-container-id-2 a.estimator_doc_link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\n#sk-container-id-2 a.estimator_doc_link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n}\n</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n                 ColumnTransformer(transformers=[(&#x27;ord&#x27;,\n                                                  Pipeline(steps=[(&#x27;encoder&#x27;,\n                                                                   OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,\n                                                                                  unknown_value=-1)),\n                                                                  (&#x27;scaler&#x27;,\n                                                                   StandardScaler())]),\n                                                  [&#x27;VehBCost_cat_cm&#x27;,\n                                                   &#x27;WarrantyCost_cat_cm&#x27;]),\n                                                 (&#x27;num&#x27;,\n                                                  Pipeline(steps=[(&#x27;scaler&#x27;,\n                                                                   StandardScaler()),\n                                                                  (&#x27;LDA&#x27;,\n                                                                   LinearDiscriminantAnalysis())]),\n                                                  [&#x27;VehicleAge&#x27;, &#x27;VehOd...\n                                                                                 sparse_output=False)),\n                                                                  (&#x27;scaler&#x27;,\n                                                                   StandardScaler())]),\n                                                  [&#x27;Auction&#x27;, &#x27;Color&#x27;,\n                                                   &#x27;Transmission&#x27;, &#x27;WheelType&#x27;,\n                                                   &#x27;Nationality&#x27;, &#x27;Size&#x27;,\n                                                   &#x27;TopThreeAmericanName&#x27;,\n                                                   &#x27;PRIMEUNIT&#x27;, &#x27;AUCGUART&#x27;,\n                                                   &#x27;IsOnlineSale&#x27;, &#x27;Make&#x27;])])),\n                (&#x27;wrapper&#x27;,\n                 RFECV(cv=5, estimator=DecisionTreeClassifier(random_state=29),\n                       min_features_to_select=10, n_jobs=-1)),\n                (&#x27;model&#x27;, DecisionTreeClassifier(random_state=42))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-16\" type=\"checkbox\" ><label for=\"sk-estimator-id-16\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;Pipeline<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.pipeline.Pipeline.html\">?<span>Documentation for Pipeline</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n                 ColumnTransformer(transformers=[(&#x27;ord&#x27;,\n                                                  Pipeline(steps=[(&#x27;encoder&#x27;,\n                                                                   OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,\n                                                                                  unknown_value=-1)),\n                                                                  (&#x27;scaler&#x27;,\n                                                                   StandardScaler())]),\n                                                  [&#x27;VehBCost_cat_cm&#x27;,\n                                                   &#x27;WarrantyCost_cat_cm&#x27;]),\n                                                 (&#x27;num&#x27;,\n                                                  Pipeline(steps=[(&#x27;scaler&#x27;,\n                                                                   StandardScaler()),\n                                                                  (&#x27;LDA&#x27;,\n                                                                   LinearDiscriminantAnalysis())]),\n                                                  [&#x27;VehicleAge&#x27;, &#x27;VehOd...\n                                                                                 sparse_output=False)),\n                                                                  (&#x27;scaler&#x27;,\n                                                                   StandardScaler())]),\n                                                  [&#x27;Auction&#x27;, &#x27;Color&#x27;,\n                                                   &#x27;Transmission&#x27;, &#x27;WheelType&#x27;,\n                                                   &#x27;Nationality&#x27;, &#x27;Size&#x27;,\n                                                   &#x27;TopThreeAmericanName&#x27;,\n                                                   &#x27;PRIMEUNIT&#x27;, &#x27;AUCGUART&#x27;,\n                                                   &#x27;IsOnlineSale&#x27;, &#x27;Make&#x27;])])),\n                (&#x27;wrapper&#x27;,\n                 RFECV(cv=5, estimator=DecisionTreeClassifier(random_state=29),\n                       min_features_to_select=10, n_jobs=-1)),\n                (&#x27;model&#x27;, DecisionTreeClassifier(random_state=42))])</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-17\" type=\"checkbox\" ><label for=\"sk-estimator-id-17\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;preprocessor: ColumnTransformer<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.compose.ColumnTransformer.html\">?<span>Documentation for preprocessor: ColumnTransformer</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>ColumnTransformer(transformers=[(&#x27;ord&#x27;,\n                                 Pipeline(steps=[(&#x27;encoder&#x27;,\n                                                  OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,\n                                                                 unknown_value=-1)),\n                                                 (&#x27;scaler&#x27;, StandardScaler())]),\n                                 [&#x27;VehBCost_cat_cm&#x27;, &#x27;WarrantyCost_cat_cm&#x27;]),\n                                (&#x27;num&#x27;,\n                                 Pipeline(steps=[(&#x27;scaler&#x27;, StandardScaler()),\n                                                 (&#x27;LDA&#x27;,\n                                                  LinearDiscriminantAnalysis())]),\n                                 [&#x27;VehicleAge&#x27;, &#x27;VehOdo&#x27;,\n                                  &#x27;MMRAcquisitionAuctionAverage...\n                                  &#x27;MMRCurrentAuctionCleanPrice&#x27;,\n                                  &#x27;MMRCurrentRetailAveragePrice&#x27;,\n                                  &#x27;MMRCurrentRetailCleanPrice&#x27;]),\n                                (&#x27;nom&#x27;,\n                                 Pipeline(steps=[(&#x27;encoder&#x27;,\n                                                  OneHotEncoder(drop=&#x27;first&#x27;,\n                                                                handle_unknown=&#x27;ignore&#x27;,\n                                                                sparse_output=False)),\n                                                 (&#x27;scaler&#x27;, StandardScaler())]),\n                                 [&#x27;Auction&#x27;, &#x27;Color&#x27;, &#x27;Transmission&#x27;,\n                                  &#x27;WheelType&#x27;, &#x27;Nationality&#x27;, &#x27;Size&#x27;,\n                                  &#x27;TopThreeAmericanName&#x27;, &#x27;PRIMEUNIT&#x27;,\n                                  &#x27;AUCGUART&#x27;, &#x27;IsOnlineSale&#x27;, &#x27;Make&#x27;])])</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-18\" type=\"checkbox\" ><label for=\"sk-estimator-id-18\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">ord</label><div class=\"sk-toggleable__content fitted\"><pre>[&#x27;VehBCost_cat_cm&#x27;, &#x27;WarrantyCost_cat_cm&#x27;]</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-19\" type=\"checkbox\" ><label for=\"sk-estimator-id-19\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;OrdinalEncoder<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.preprocessing.OrdinalEncoder.html\">?<span>Documentation for OrdinalEncoder</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;, unknown_value=-1)</pre></div> </div></div><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-20\" type=\"checkbox\" ><label for=\"sk-estimator-id-20\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;StandardScaler<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.preprocessing.StandardScaler.html\">?<span>Documentation for StandardScaler</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>StandardScaler()</pre></div> </div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-21\" type=\"checkbox\" ><label for=\"sk-estimator-id-21\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">num</label><div class=\"sk-toggleable__content fitted\"><pre>[&#x27;VehicleAge&#x27;, &#x27;VehOdo&#x27;, &#x27;MMRAcquisitionAuctionAveragePrice&#x27;, &#x27;MMRAcquisitionAuctionCleanPrice&#x27;, &#x27;MMRAcquisitionRetailAveragePrice&#x27;, &#x27;MMRAcquisitonRetailCleanPrice&#x27;, &#x27;MMRCurrentAuctionAveragePrice&#x27;, &#x27;MMRCurrentAuctionCleanPrice&#x27;, &#x27;MMRCurrentRetailAveragePrice&#x27;, &#x27;MMRCurrentRetailCleanPrice&#x27;]</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-22\" type=\"checkbox\" ><label for=\"sk-estimator-id-22\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;StandardScaler<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.preprocessing.StandardScaler.html\">?<span>Documentation for StandardScaler</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>StandardScaler()</pre></div> </div></div><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-23\" type=\"checkbox\" ><label for=\"sk-estimator-id-23\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;LinearDiscriminantAnalysis<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.html\">?<span>Documentation for LinearDiscriminantAnalysis</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>LinearDiscriminantAnalysis()</pre></div> </div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-24\" type=\"checkbox\" ><label for=\"sk-estimator-id-24\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">nom</label><div class=\"sk-toggleable__content fitted\"><pre>[&#x27;Auction&#x27;, &#x27;Color&#x27;, &#x27;Transmission&#x27;, &#x27;WheelType&#x27;, &#x27;Nationality&#x27;, &#x27;Size&#x27;, &#x27;TopThreeAmericanName&#x27;, &#x27;PRIMEUNIT&#x27;, &#x27;AUCGUART&#x27;, &#x27;IsOnlineSale&#x27;, &#x27;Make&#x27;]</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-25\" type=\"checkbox\" ><label for=\"sk-estimator-id-25\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;OneHotEncoder<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.preprocessing.OneHotEncoder.html\">?<span>Documentation for OneHotEncoder</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>OneHotEncoder(drop=&#x27;first&#x27;, handle_unknown=&#x27;ignore&#x27;, sparse_output=False)</pre></div> </div></div><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-26\" type=\"checkbox\" ><label for=\"sk-estimator-id-26\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;StandardScaler<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.preprocessing.StandardScaler.html\">?<span>Documentation for StandardScaler</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>StandardScaler()</pre></div> </div></div></div></div></div></div></div></div></div><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-27\" type=\"checkbox\" ><label for=\"sk-estimator-id-27\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;wrapper: RFECV<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.feature_selection.RFECV.html\">?<span>Documentation for wrapper: RFECV</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>RFECV(cv=5, estimator=DecisionTreeClassifier(random_state=29),\n      min_features_to_select=10, n_jobs=-1)</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-28\" type=\"checkbox\" ><label for=\"sk-estimator-id-28\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">estimator: DecisionTreeClassifier</label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeClassifier(random_state=29)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-29\" type=\"checkbox\" ><label for=\"sk-estimator-id-29\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;DecisionTreeClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.tree.DecisionTreeClassifier.html\">?<span>Documentation for DecisionTreeClassifier</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeClassifier(random_state=29)</pre></div> </div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-30\" type=\"checkbox\" ><label for=\"sk-estimator-id-30\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;DecisionTreeClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.tree.DecisionTreeClassifier.html\">?<span>Documentation for DecisionTreeClassifier</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeClassifier(random_state=42)</pre></div> </div></div></div></div></div></div>"},"metadata":{}}],"execution_count":37},{"cell_type":"code","source":"pipe_2 = pipeline_2.fit(X_train, y_train)\npipe_2[:-1].get_feature_names_out().tolist()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-02T08:48:00.562490Z","iopub.execute_input":"2024-12-02T08:48:00.562986Z","iopub.status.idle":"2024-12-02T08:48:42.703888Z","shell.execute_reply.started":"2024-12-02T08:48:00.562934Z","shell.execute_reply":"2024-12-02T08:48:42.702719Z"}},"outputs":[{"execution_count":38,"output_type":"execute_result","data":{"text/plain":"['ord__VehBCost_cat_cm',\n 'ord__WarrantyCost_cat_cm',\n 'num__lineardiscriminantanalysis0',\n 'nom__Auction_MANHEIM',\n 'nom__Auction_OTHER',\n 'nom__Color_BLACK',\n 'nom__Color_BLUE',\n 'nom__Color_GOLD',\n 'nom__Color_GREEN',\n 'nom__Color_GREY',\n 'nom__Color_MAROON',\n 'nom__Color_OTHER',\n 'nom__Color_RED',\n 'nom__Color_SILVER',\n 'nom__Color_WHITE',\n 'nom__Transmission_MANUAL',\n 'nom__WheelType_Covers',\n 'nom__WheelType_Special',\n 'nom__Nationality_OTHER ASIAN',\n 'nom__Nationality_OTHERS',\n 'nom__Size_CROSSOVER',\n 'nom__Size_LARGE',\n 'nom__Size_LARGE SUV',\n 'nom__Size_LARGE TRUCK',\n 'nom__Size_MEDIUM',\n 'nom__Size_MEDIUM SUV',\n 'nom__Size_SMALL SUV',\n 'nom__Size_SMALL TRUCK',\n 'nom__Size_SPORTS',\n 'nom__Size_VAN',\n 'nom__TopThreeAmericanName_FORD',\n 'nom__TopThreeAmericanName_GM',\n 'nom__TopThreeAmericanName_OTHER',\n 'nom__PRIMEUNIT_unknown',\n 'nom__AUCGUART_unknown',\n 'nom__IsOnlineSale_1.0',\n 'nom__Make_CHRYSLER',\n 'nom__Make_DODGE',\n 'nom__Make_FORD',\n 'nom__Make_HYUNDAI',\n 'nom__Make_KIA',\n 'nom__Make_MITSUBISHI',\n 'nom__Make_NISSAN',\n 'nom__Make_OTHER',\n 'nom__Make_PONTIAC',\n 'nom__Make_SATURN',\n 'nom__Make_SUZUKI']"},"metadata":{}}],"execution_count":38},{"cell_type":"code","source":"from sklearn.metrics import classification_report\n\n# Print a detailed classification report\nprint(classification_report(y_test, predictions_2))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-02T08:48:42.705055Z","iopub.execute_input":"2024-12-02T08:48:42.705339Z","iopub.status.idle":"2024-12-02T08:48:42.753185Z","shell.execute_reply.started":"2024-12-02T08:48:42.705310Z","shell.execute_reply":"2024-12-02T08:48:42.752185Z"}},"outputs":[{"name":"stdout","text":"              precision    recall  f1-score   support\n\n           0       0.89      0.87      0.88     19212\n           1       0.18      0.21      0.19      2683\n\n    accuracy                           0.79     21895\n   macro avg       0.54      0.54      0.54     21895\nweighted avg       0.80      0.79      0.80     21895\n\n","output_type":"stream"}],"execution_count":39},{"cell_type":"code","source":"# Define the preprocessing steps for numerical and categorical features separately\nnumerical_preprocessing_3 = Pipeline(steps=[\n    ('scaler', z_score),  # Scale numerical features\n    ('LDA', lda)])  # Feature extraction on numerical features\n\n\n\nnominal_preprocessing_3 = Pipeline(steps=[\n    ('encoder', one_hot_encoder),  # One-hot encode nominal features\n    ('scaler', z_score)])  # Scale encoded features\n\n\n\n# Define the ColumnTransformer for numerical and categorical features\npreprocessor_3 = ColumnTransformer(transformers=[\n    ('num', numerical_preprocessing_3, continuous_columns_trans),\n    ('nom', nominal_preprocessing_3, categorical_columns_trans),\n], remainder='drop')  # Passthrough any columns not specified\n\n\npipeline_3 = Pipeline(steps=[\n    ('preprocessor', preprocessor_3),\n    ('wrapper', wrapper),\n    ('model', DecisionTreeClassifier(random_state=42))])\n\n# Train the pipeline\npipe_3 = pipeline_3.fit(transformed_train, y_train)\npipe_3[:-1].get_feature_names_out().tolist()\n\n# Use the pipeline for prediction or other tasks\npredictions_3 = pipe_3.predict(transformed_test)\n\nfrom sklearn.metrics import accuracy_score\n\n# Calculate accuracy\naccuracy = accuracy_score(y_test, predictions_3)\nprint(\"Accuracy:\", accuracy)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-02T08:48:42.760332Z","iopub.execute_input":"2024-12-02T08:48:42.760813Z","iopub.status.idle":"2024-12-02T08:49:23.763314Z","shell.execute_reply.started":"2024-12-02T08:48:42.760747Z","shell.execute_reply":"2024-12-02T08:49:23.762176Z"}},"outputs":[{"name":"stdout","text":"Accuracy: 0.6121488924411966\n","output_type":"stream"}],"execution_count":40},{"cell_type":"code","source":"pipe_3","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-02T08:49:23.764692Z","iopub.execute_input":"2024-12-02T08:49:23.765075Z","iopub.status.idle":"2024-12-02T08:49:23.839929Z","shell.execute_reply.started":"2024-12-02T08:49:23.765042Z","shell.execute_reply":"2024-12-02T08:49:23.838854Z"}},"outputs":[{"execution_count":41,"output_type":"execute_result","data":{"text/plain":"Pipeline(steps=[('preprocessor',\n                 ColumnTransformer(transformers=[('num',\n                                                  Pipeline(steps=[('scaler',\n                                                                   StandardScaler()),\n                                                                  ('LDA',\n                                                                   LinearDiscriminantAnalysis())]),\n                                                  ['VehicleAge', 'VehOdo',\n                                                   'MMRAcquisitionAuctionAveragePrice',\n                                                   'MMRAcquisitionAuctionCleanPrice',\n                                                   'MMRAcquisitionRetailAveragePrice',\n                                                   'MMRAcquisitonRetailCleanPrice',\n                                                   'MMRCurrentAuctionAveragePrice',\n                                                   'MMR...\n                                                                                 sparse_output=False)),\n                                                                  ('scaler',\n                                                                   StandardScaler())]),\n                                                  ['Auction', 'Color',\n                                                   'Transmission', 'WheelType',\n                                                   'Nationality', 'Size',\n                                                   'TopThreeAmericanName',\n                                                   'PRIMEUNIT', 'AUCGUART',\n                                                   'IsOnlineSale', 'Make'])])),\n                ('wrapper',\n                 RFECV(cv=5, estimator=DecisionTreeClassifier(random_state=29),\n                       min_features_to_select=10, n_jobs=-1)),\n                ('model', DecisionTreeClassifier(random_state=42))])","text/html":"<style>#sk-container-id-3 {\n  /* Definition of color scheme common for light and dark mode */\n  --sklearn-color-text: black;\n  --sklearn-color-line: gray;\n  /* Definition of color scheme for unfitted estimators */\n  --sklearn-color-unfitted-level-0: #fff5e6;\n  --sklearn-color-unfitted-level-1: #f6e4d2;\n  --sklearn-color-unfitted-level-2: #ffe0b3;\n  --sklearn-color-unfitted-level-3: chocolate;\n  /* Definition of color scheme for fitted estimators */\n  --sklearn-color-fitted-level-0: #f0f8ff;\n  --sklearn-color-fitted-level-1: #d4ebff;\n  --sklearn-color-fitted-level-2: #b3dbfd;\n  --sklearn-color-fitted-level-3: cornflowerblue;\n\n  /* Specific color for light theme */\n  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-icon: #696969;\n\n  @media (prefers-color-scheme: dark) {\n    /* Redefinition of color scheme for dark theme */\n    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-icon: #878787;\n  }\n}\n\n#sk-container-id-3 {\n  color: var(--sklearn-color-text);\n}\n\n#sk-container-id-3 pre {\n  padding: 0;\n}\n\n#sk-container-id-3 input.sk-hidden--visually {\n  border: 0;\n  clip: rect(1px 1px 1px 1px);\n  clip: rect(1px, 1px, 1px, 1px);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}\n\n#sk-container-id-3 div.sk-dashed-wrapped {\n  border: 1px dashed var(--sklearn-color-line);\n  margin: 0 0.4em 0.5em 0.4em;\n  box-sizing: border-box;\n  padding-bottom: 0.4em;\n  background-color: var(--sklearn-color-background);\n}\n\n#sk-container-id-3 div.sk-container {\n  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n     but bootstrap.min.css set `[hidden] { display: none !important; }`\n     so we also need the `!important` here to be able to override the\n     default hidden behavior on the sphinx rendered scikit-learn.org.\n     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n  display: inline-block !important;\n  position: relative;\n}\n\n#sk-container-id-3 div.sk-text-repr-fallback {\n  display: none;\n}\n\ndiv.sk-parallel-item,\ndiv.sk-serial,\ndiv.sk-item {\n  /* draw centered vertical line to link estimators */\n  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n  background-size: 2px 100%;\n  background-repeat: no-repeat;\n  background-position: center center;\n}\n\n/* Parallel-specific style estimator block */\n\n#sk-container-id-3 div.sk-parallel-item::after {\n  content: \"\";\n  width: 100%;\n  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n  flex-grow: 1;\n}\n\n#sk-container-id-3 div.sk-parallel {\n  display: flex;\n  align-items: stretch;\n  justify-content: center;\n  background-color: var(--sklearn-color-background);\n  position: relative;\n}\n\n#sk-container-id-3 div.sk-parallel-item {\n  display: flex;\n  flex-direction: column;\n}\n\n#sk-container-id-3 div.sk-parallel-item:first-child::after {\n  align-self: flex-end;\n  width: 50%;\n}\n\n#sk-container-id-3 div.sk-parallel-item:last-child::after {\n  align-self: flex-start;\n  width: 50%;\n}\n\n#sk-container-id-3 div.sk-parallel-item:only-child::after {\n  width: 0;\n}\n\n/* Serial-specific style estimator block */\n\n#sk-container-id-3 div.sk-serial {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: var(--sklearn-color-background);\n  padding-right: 1em;\n  padding-left: 1em;\n}\n\n\n/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\nclickable and can be expanded/collapsed.\n- Pipeline and ColumnTransformer use this feature and define the default style\n- Estimators will overwrite some part of the style using the `sk-estimator` class\n*/\n\n/* Pipeline and ColumnTransformer style (default) */\n\n#sk-container-id-3 div.sk-toggleable {\n  /* Default theme specific background. It is overwritten whether we have a\n  specific estimator or a Pipeline/ColumnTransformer */\n  background-color: var(--sklearn-color-background);\n}\n\n/* Toggleable label */\n#sk-container-id-3 label.sk-toggleable__label {\n  cursor: pointer;\n  display: block;\n  width: 100%;\n  margin-bottom: 0;\n  padding: 0.5em;\n  box-sizing: border-box;\n  text-align: center;\n}\n\n#sk-container-id-3 label.sk-toggleable__label-arrow:before {\n  /* Arrow on the left of the label */\n  content: \"▸\";\n  float: left;\n  margin-right: 0.25em;\n  color: var(--sklearn-color-icon);\n}\n\n#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {\n  color: var(--sklearn-color-text);\n}\n\n/* Toggleable content - dropdown */\n\n#sk-container-id-3 div.sk-toggleable__content {\n  max-height: 0;\n  max-width: 0;\n  overflow: hidden;\n  text-align: left;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-3 div.sk-toggleable__content.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-3 div.sk-toggleable__content pre {\n  margin: 0.2em;\n  border-radius: 0.25em;\n  color: var(--sklearn-color-text);\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-3 div.sk-toggleable__content.fitted pre {\n  /* unfitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n  /* Expand drop-down */\n  max-height: 200px;\n  max-width: 100%;\n  overflow: auto;\n}\n\n#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n  content: \"▾\";\n}\n\n/* Pipeline/ColumnTransformer-specific style */\n\n#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-3 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator-specific style */\n\n/* Colorize estimator box */\n#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-3 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n#sk-container-id-3 div.sk-label label.sk-toggleable__label,\n#sk-container-id-3 div.sk-label label {\n  /* The background is the default theme color */\n  color: var(--sklearn-color-text-on-default-background);\n}\n\n/* On hover, darken the color of the background */\n#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n/* Label box, darken color on hover, fitted */\n#sk-container-id-3 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator label */\n\n#sk-container-id-3 div.sk-label label {\n  font-family: monospace;\n  font-weight: bold;\n  display: inline-block;\n  line-height: 1.2em;\n}\n\n#sk-container-id-3 div.sk-label-container {\n  text-align: center;\n}\n\n/* Estimator-specific */\n#sk-container-id-3 div.sk-estimator {\n  font-family: monospace;\n  border: 1px dotted var(--sklearn-color-border-box);\n  border-radius: 0.25em;\n  box-sizing: border-box;\n  margin-bottom: 0.5em;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-3 div.sk-estimator.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n/* on hover */\n#sk-container-id-3 div.sk-estimator:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-3 div.sk-estimator.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Specification for estimator info (e.g. \"i\" and \"?\") */\n\n/* Common style for \"i\" and \"?\" */\n\n.sk-estimator-doc-link,\na:link.sk-estimator-doc-link,\na:visited.sk-estimator-doc-link {\n  float: right;\n  font-size: smaller;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1em;\n  height: 1em;\n  width: 1em;\n  text-decoration: none !important;\n  margin-left: 1ex;\n  /* unfitted */\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n  color: var(--sklearn-color-unfitted-level-1);\n}\n\n.sk-estimator-doc-link.fitted,\na:link.sk-estimator-doc-link.fitted,\na:visited.sk-estimator-doc-link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\ndiv.sk-estimator:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\ndiv.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n/* Span, style for the box shown on hovering the info icon */\n.sk-estimator-doc-link span {\n  display: none;\n  z-index: 9999;\n  position: relative;\n  font-weight: normal;\n  right: .2ex;\n  padding: .5ex;\n  margin: .5ex;\n  width: min-content;\n  min-width: 20ex;\n  max-width: 50ex;\n  color: var(--sklearn-color-text);\n  box-shadow: 2pt 2pt 4pt #999;\n  /* unfitted */\n  background: var(--sklearn-color-unfitted-level-0);\n  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n}\n\n.sk-estimator-doc-link.fitted span {\n  /* fitted */\n  background: var(--sklearn-color-fitted-level-0);\n  border: var(--sklearn-color-fitted-level-3);\n}\n\n.sk-estimator-doc-link:hover span {\n  display: block;\n}\n\n/* \"?\"-specific style due to the `<a>` HTML tag */\n\n#sk-container-id-3 a.estimator_doc_link {\n  float: right;\n  font-size: 1rem;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1rem;\n  height: 1rem;\n  width: 1rem;\n  text-decoration: none;\n  /* unfitted */\n  color: var(--sklearn-color-unfitted-level-1);\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n}\n\n#sk-container-id-3 a.estimator_doc_link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\n#sk-container-id-3 a.estimator_doc_link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n#sk-container-id-3 a.estimator_doc_link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n}\n</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n                 ColumnTransformer(transformers=[(&#x27;num&#x27;,\n                                                  Pipeline(steps=[(&#x27;scaler&#x27;,\n                                                                   StandardScaler()),\n                                                                  (&#x27;LDA&#x27;,\n                                                                   LinearDiscriminantAnalysis())]),\n                                                  [&#x27;VehicleAge&#x27;, &#x27;VehOdo&#x27;,\n                                                   &#x27;MMRAcquisitionAuctionAveragePrice&#x27;,\n                                                   &#x27;MMRAcquisitionAuctionCleanPrice&#x27;,\n                                                   &#x27;MMRAcquisitionRetailAveragePrice&#x27;,\n                                                   &#x27;MMRAcquisitonRetailCleanPrice&#x27;,\n                                                   &#x27;MMRCurrentAuctionAveragePrice&#x27;,\n                                                   &#x27;MMR...\n                                                                                 sparse_output=False)),\n                                                                  (&#x27;scaler&#x27;,\n                                                                   StandardScaler())]),\n                                                  [&#x27;Auction&#x27;, &#x27;Color&#x27;,\n                                                   &#x27;Transmission&#x27;, &#x27;WheelType&#x27;,\n                                                   &#x27;Nationality&#x27;, &#x27;Size&#x27;,\n                                                   &#x27;TopThreeAmericanName&#x27;,\n                                                   &#x27;PRIMEUNIT&#x27;, &#x27;AUCGUART&#x27;,\n                                                   &#x27;IsOnlineSale&#x27;, &#x27;Make&#x27;])])),\n                (&#x27;wrapper&#x27;,\n                 RFECV(cv=5, estimator=DecisionTreeClassifier(random_state=29),\n                       min_features_to_select=10, n_jobs=-1)),\n                (&#x27;model&#x27;, DecisionTreeClassifier(random_state=42))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-31\" type=\"checkbox\" ><label for=\"sk-estimator-id-31\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;Pipeline<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.pipeline.Pipeline.html\">?<span>Documentation for Pipeline</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n                 ColumnTransformer(transformers=[(&#x27;num&#x27;,\n                                                  Pipeline(steps=[(&#x27;scaler&#x27;,\n                                                                   StandardScaler()),\n                                                                  (&#x27;LDA&#x27;,\n                                                                   LinearDiscriminantAnalysis())]),\n                                                  [&#x27;VehicleAge&#x27;, &#x27;VehOdo&#x27;,\n                                                   &#x27;MMRAcquisitionAuctionAveragePrice&#x27;,\n                                                   &#x27;MMRAcquisitionAuctionCleanPrice&#x27;,\n                                                   &#x27;MMRAcquisitionRetailAveragePrice&#x27;,\n                                                   &#x27;MMRAcquisitonRetailCleanPrice&#x27;,\n                                                   &#x27;MMRCurrentAuctionAveragePrice&#x27;,\n                                                   &#x27;MMR...\n                                                                                 sparse_output=False)),\n                                                                  (&#x27;scaler&#x27;,\n                                                                   StandardScaler())]),\n                                                  [&#x27;Auction&#x27;, &#x27;Color&#x27;,\n                                                   &#x27;Transmission&#x27;, &#x27;WheelType&#x27;,\n                                                   &#x27;Nationality&#x27;, &#x27;Size&#x27;,\n                                                   &#x27;TopThreeAmericanName&#x27;,\n                                                   &#x27;PRIMEUNIT&#x27;, &#x27;AUCGUART&#x27;,\n                                                   &#x27;IsOnlineSale&#x27;, &#x27;Make&#x27;])])),\n                (&#x27;wrapper&#x27;,\n                 RFECV(cv=5, estimator=DecisionTreeClassifier(random_state=29),\n                       min_features_to_select=10, n_jobs=-1)),\n                (&#x27;model&#x27;, DecisionTreeClassifier(random_state=42))])</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-32\" type=\"checkbox\" ><label for=\"sk-estimator-id-32\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;preprocessor: ColumnTransformer<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.compose.ColumnTransformer.html\">?<span>Documentation for preprocessor: ColumnTransformer</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>ColumnTransformer(transformers=[(&#x27;num&#x27;,\n                                 Pipeline(steps=[(&#x27;scaler&#x27;, StandardScaler()),\n                                                 (&#x27;LDA&#x27;,\n                                                  LinearDiscriminantAnalysis())]),\n                                 [&#x27;VehicleAge&#x27;, &#x27;VehOdo&#x27;,\n                                  &#x27;MMRAcquisitionAuctionAveragePrice&#x27;,\n                                  &#x27;MMRAcquisitionAuctionCleanPrice&#x27;,\n                                  &#x27;MMRAcquisitionRetailAveragePrice&#x27;,\n                                  &#x27;MMRAcquisitonRetailCleanPrice&#x27;,\n                                  &#x27;MMRCurrentAuctionAveragePrice&#x27;,\n                                  &#x27;MMRCurrentAuctionCleanPrice&#x27;,\n                                  &#x27;MMRCu...\n                                  &#x27;MMRCurrentRetailCleanPrice&#x27;,\n                                  &#x27;VehBCost_transformed&#x27;,\n                                  &#x27;WarrantyCost_transformed&#x27;]),\n                                (&#x27;nom&#x27;,\n                                 Pipeline(steps=[(&#x27;encoder&#x27;,\n                                                  OneHotEncoder(drop=&#x27;first&#x27;,\n                                                                handle_unknown=&#x27;ignore&#x27;,\n                                                                sparse_output=False)),\n                                                 (&#x27;scaler&#x27;, StandardScaler())]),\n                                 [&#x27;Auction&#x27;, &#x27;Color&#x27;, &#x27;Transmission&#x27;,\n                                  &#x27;WheelType&#x27;, &#x27;Nationality&#x27;, &#x27;Size&#x27;,\n                                  &#x27;TopThreeAmericanName&#x27;, &#x27;PRIMEUNIT&#x27;,\n                                  &#x27;AUCGUART&#x27;, &#x27;IsOnlineSale&#x27;, &#x27;Make&#x27;])])</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-33\" type=\"checkbox\" ><label for=\"sk-estimator-id-33\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">num</label><div class=\"sk-toggleable__content fitted\"><pre>[&#x27;VehicleAge&#x27;, &#x27;VehOdo&#x27;, &#x27;MMRAcquisitionAuctionAveragePrice&#x27;, &#x27;MMRAcquisitionAuctionCleanPrice&#x27;, &#x27;MMRAcquisitionRetailAveragePrice&#x27;, &#x27;MMRAcquisitonRetailCleanPrice&#x27;, &#x27;MMRCurrentAuctionAveragePrice&#x27;, &#x27;MMRCurrentAuctionCleanPrice&#x27;, &#x27;MMRCurrentRetailAveragePrice&#x27;, &#x27;MMRCurrentRetailCleanPrice&#x27;, &#x27;VehBCost_transformed&#x27;, &#x27;WarrantyCost_transformed&#x27;]</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-34\" type=\"checkbox\" ><label for=\"sk-estimator-id-34\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;StandardScaler<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.preprocessing.StandardScaler.html\">?<span>Documentation for StandardScaler</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>StandardScaler()</pre></div> </div></div><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-35\" type=\"checkbox\" ><label for=\"sk-estimator-id-35\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;LinearDiscriminantAnalysis<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.html\">?<span>Documentation for LinearDiscriminantAnalysis</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>LinearDiscriminantAnalysis()</pre></div> </div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-36\" type=\"checkbox\" ><label for=\"sk-estimator-id-36\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">nom</label><div class=\"sk-toggleable__content fitted\"><pre>[&#x27;Auction&#x27;, &#x27;Color&#x27;, &#x27;Transmission&#x27;, &#x27;WheelType&#x27;, &#x27;Nationality&#x27;, &#x27;Size&#x27;, &#x27;TopThreeAmericanName&#x27;, &#x27;PRIMEUNIT&#x27;, &#x27;AUCGUART&#x27;, &#x27;IsOnlineSale&#x27;, &#x27;Make&#x27;]</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-37\" type=\"checkbox\" ><label for=\"sk-estimator-id-37\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;OneHotEncoder<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.preprocessing.OneHotEncoder.html\">?<span>Documentation for OneHotEncoder</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>OneHotEncoder(drop=&#x27;first&#x27;, handle_unknown=&#x27;ignore&#x27;, sparse_output=False)</pre></div> </div></div><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-38\" type=\"checkbox\" ><label for=\"sk-estimator-id-38\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;StandardScaler<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.preprocessing.StandardScaler.html\">?<span>Documentation for StandardScaler</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>StandardScaler()</pre></div> </div></div></div></div></div></div></div></div></div><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-39\" type=\"checkbox\" ><label for=\"sk-estimator-id-39\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;wrapper: RFECV<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.feature_selection.RFECV.html\">?<span>Documentation for wrapper: RFECV</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>RFECV(cv=5, estimator=DecisionTreeClassifier(random_state=29),\n      min_features_to_select=10, n_jobs=-1)</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-40\" type=\"checkbox\" ><label for=\"sk-estimator-id-40\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">estimator: DecisionTreeClassifier</label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeClassifier(random_state=29)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-41\" type=\"checkbox\" ><label for=\"sk-estimator-id-41\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;DecisionTreeClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.tree.DecisionTreeClassifier.html\">?<span>Documentation for DecisionTreeClassifier</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeClassifier(random_state=29)</pre></div> </div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-42\" type=\"checkbox\" ><label for=\"sk-estimator-id-42\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;DecisionTreeClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.tree.DecisionTreeClassifier.html\">?<span>Documentation for DecisionTreeClassifier</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeClassifier(random_state=42)</pre></div> </div></div></div></div></div></div>"},"metadata":{}}],"execution_count":41},{"cell_type":"code","source":"pipe_3 = pipeline_3.fit(transformed_train, y_train)\npipe_3[:-1].get_feature_names_out().tolist()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-02T08:49:23.841274Z","iopub.execute_input":"2024-12-02T08:49:23.841594Z","iopub.status.idle":"2024-12-02T08:50:05.660668Z","shell.execute_reply.started":"2024-12-02T08:49:23.841562Z","shell.execute_reply":"2024-12-02T08:50:05.659524Z"}},"outputs":[{"execution_count":42,"output_type":"execute_result","data":{"text/plain":"['num__lineardiscriminantanalysis0',\n 'nom__Auction_MANHEIM',\n 'nom__Auction_OTHER',\n 'nom__Color_BLACK',\n 'nom__Color_BLUE',\n 'nom__Color_GOLD',\n 'nom__Color_GREEN',\n 'nom__Color_GREY',\n 'nom__Color_MAROON',\n 'nom__Color_OTHER',\n 'nom__Color_RED',\n 'nom__Color_SILVER',\n 'nom__Color_WHITE',\n 'nom__Transmission_MANUAL',\n 'nom__WheelType_Covers',\n 'nom__WheelType_Special',\n 'nom__Nationality_OTHER ASIAN',\n 'nom__Nationality_OTHERS',\n 'nom__Size_CROSSOVER',\n 'nom__Size_LARGE',\n 'nom__Size_LARGE SUV',\n 'nom__Size_LARGE TRUCK',\n 'nom__Size_MEDIUM',\n 'nom__Size_MEDIUM SUV',\n 'nom__Size_SMALL SUV',\n 'nom__Size_SMALL TRUCK',\n 'nom__Size_SPORTS',\n 'nom__Size_VAN',\n 'nom__TopThreeAmericanName_FORD',\n 'nom__TopThreeAmericanName_GM',\n 'nom__TopThreeAmericanName_OTHER',\n 'nom__AUCGUART_unknown',\n 'nom__IsOnlineSale_1.0',\n 'nom__Make_CHRYSLER',\n 'nom__Make_DODGE',\n 'nom__Make_FORD',\n 'nom__Make_HYUNDAI',\n 'nom__Make_JEEP',\n 'nom__Make_KIA',\n 'nom__Make_NISSAN',\n 'nom__Make_OTHER',\n 'nom__Make_PONTIAC',\n 'nom__Make_SATURN',\n 'nom__Make_SUZUKI']"},"metadata":{}}],"execution_count":42},{"cell_type":"code","source":"# Define the preprocessing steps for numerical and categorical features separately\nnumerical_preprocessing_4 = Pipeline(steps=[\n    ('scaler', z_score),  # Scale numerical features\n    ('pca', pca)])  # Feature extraction on numerical features\n\n\n\nnominal_preprocessing_4 = Pipeline(steps=[\n    ('encoder', one_hot_encoder),  # One-hot encode nominal features\n    ('scaler', z_score)])  # Scale encoded features\n\n\n\n# Define the ColumnTransformer for numerical and categorical features\npreprocessor_4 = ColumnTransformer(transformers=[\n    ('num', numerical_preprocessing_4, continuous_columns_trans),\n    ('nom', nominal_preprocessing_4, categorical_columns_trans),\n], remainder='drop')  # Passthrough any columns not specified\n\n\npipeline_4 = Pipeline(steps=[\n    ('preprocessor', preprocessor_4),\n    ('wrapper', wrapper),\n    ('model', DecisionTreeClassifier(random_state=42))])\n\n# Train the pipeline\npipe_4 = pipeline_4.fit(transformed_train, y_train)\npipe_4[:-1].get_feature_names_out().tolist()\n\n# Use the pipeline for prediction or other tasks\npredictions_4 = pipe_4.predict(transformed_test)\n\nfrom sklearn.metrics import accuracy_score\n\n# Calculate accuracy\naccuracy = accuracy_score(y_test, predictions_4)\nprint(\"Accuracy:\", accuracy)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-02T08:50:05.662228Z","iopub.execute_input":"2024-12-02T08:50:05.662666Z","iopub.status.idle":"2024-12-02T08:51:00.816067Z","shell.execute_reply.started":"2024-12-02T08:50:05.662618Z","shell.execute_reply":"2024-12-02T08:51:00.814878Z"}},"outputs":[{"name":"stdout","text":"Accuracy: 0.7717743777118063\n","output_type":"stream"}],"execution_count":43},{"cell_type":"code","source":"pipe_4","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-02T08:51:00.817544Z","iopub.execute_input":"2024-12-02T08:51:00.818041Z","iopub.status.idle":"2024-12-02T08:51:00.897771Z","shell.execute_reply.started":"2024-12-02T08:51:00.817992Z","shell.execute_reply":"2024-12-02T08:51:00.896692Z"}},"outputs":[{"execution_count":44,"output_type":"execute_result","data":{"text/plain":"Pipeline(steps=[('preprocessor',\n                 ColumnTransformer(transformers=[('num',\n                                                  Pipeline(steps=[('scaler',\n                                                                   StandardScaler()),\n                                                                  ('pca',\n                                                                   PCA(n_components=2,\n                                                                       random_state=717))]),\n                                                  ['VehicleAge', 'VehOdo',\n                                                   'MMRAcquisitionAuctionAveragePrice',\n                                                   'MMRAcquisitionAuctionCleanPrice',\n                                                   'MMRAcquisitionRetailAveragePrice',\n                                                   'MMRAcquisitonRetailCleanPrice',\n                                                   'MMRCurrentAuctionAveragePri...\n                                                                                 sparse_output=False)),\n                                                                  ('scaler',\n                                                                   StandardScaler())]),\n                                                  ['Auction', 'Color',\n                                                   'Transmission', 'WheelType',\n                                                   'Nationality', 'Size',\n                                                   'TopThreeAmericanName',\n                                                   'PRIMEUNIT', 'AUCGUART',\n                                                   'IsOnlineSale', 'Make'])])),\n                ('wrapper',\n                 RFECV(cv=5, estimator=DecisionTreeClassifier(random_state=29),\n                       min_features_to_select=10, n_jobs=-1)),\n                ('model', DecisionTreeClassifier(random_state=42))])","text/html":"<style>#sk-container-id-4 {\n  /* Definition of color scheme common for light and dark mode */\n  --sklearn-color-text: black;\n  --sklearn-color-line: gray;\n  /* Definition of color scheme for unfitted estimators */\n  --sklearn-color-unfitted-level-0: #fff5e6;\n  --sklearn-color-unfitted-level-1: #f6e4d2;\n  --sklearn-color-unfitted-level-2: #ffe0b3;\n  --sklearn-color-unfitted-level-3: chocolate;\n  /* Definition of color scheme for fitted estimators */\n  --sklearn-color-fitted-level-0: #f0f8ff;\n  --sklearn-color-fitted-level-1: #d4ebff;\n  --sklearn-color-fitted-level-2: #b3dbfd;\n  --sklearn-color-fitted-level-3: cornflowerblue;\n\n  /* Specific color for light theme */\n  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-icon: #696969;\n\n  @media (prefers-color-scheme: dark) {\n    /* Redefinition of color scheme for dark theme */\n    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-icon: #878787;\n  }\n}\n\n#sk-container-id-4 {\n  color: var(--sklearn-color-text);\n}\n\n#sk-container-id-4 pre {\n  padding: 0;\n}\n\n#sk-container-id-4 input.sk-hidden--visually {\n  border: 0;\n  clip: rect(1px 1px 1px 1px);\n  clip: rect(1px, 1px, 1px, 1px);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}\n\n#sk-container-id-4 div.sk-dashed-wrapped {\n  border: 1px dashed var(--sklearn-color-line);\n  margin: 0 0.4em 0.5em 0.4em;\n  box-sizing: border-box;\n  padding-bottom: 0.4em;\n  background-color: var(--sklearn-color-background);\n}\n\n#sk-container-id-4 div.sk-container {\n  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n     but bootstrap.min.css set `[hidden] { display: none !important; }`\n     so we also need the `!important` here to be able to override the\n     default hidden behavior on the sphinx rendered scikit-learn.org.\n     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n  display: inline-block !important;\n  position: relative;\n}\n\n#sk-container-id-4 div.sk-text-repr-fallback {\n  display: none;\n}\n\ndiv.sk-parallel-item,\ndiv.sk-serial,\ndiv.sk-item {\n  /* draw centered vertical line to link estimators */\n  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n  background-size: 2px 100%;\n  background-repeat: no-repeat;\n  background-position: center center;\n}\n\n/* Parallel-specific style estimator block */\n\n#sk-container-id-4 div.sk-parallel-item::after {\n  content: \"\";\n  width: 100%;\n  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n  flex-grow: 1;\n}\n\n#sk-container-id-4 div.sk-parallel {\n  display: flex;\n  align-items: stretch;\n  justify-content: center;\n  background-color: var(--sklearn-color-background);\n  position: relative;\n}\n\n#sk-container-id-4 div.sk-parallel-item {\n  display: flex;\n  flex-direction: column;\n}\n\n#sk-container-id-4 div.sk-parallel-item:first-child::after {\n  align-self: flex-end;\n  width: 50%;\n}\n\n#sk-container-id-4 div.sk-parallel-item:last-child::after {\n  align-self: flex-start;\n  width: 50%;\n}\n\n#sk-container-id-4 div.sk-parallel-item:only-child::after {\n  width: 0;\n}\n\n/* Serial-specific style estimator block */\n\n#sk-container-id-4 div.sk-serial {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: var(--sklearn-color-background);\n  padding-right: 1em;\n  padding-left: 1em;\n}\n\n\n/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\nclickable and can be expanded/collapsed.\n- Pipeline and ColumnTransformer use this feature and define the default style\n- Estimators will overwrite some part of the style using the `sk-estimator` class\n*/\n\n/* Pipeline and ColumnTransformer style (default) */\n\n#sk-container-id-4 div.sk-toggleable {\n  /* Default theme specific background. It is overwritten whether we have a\n  specific estimator or a Pipeline/ColumnTransformer */\n  background-color: var(--sklearn-color-background);\n}\n\n/* Toggleable label */\n#sk-container-id-4 label.sk-toggleable__label {\n  cursor: pointer;\n  display: block;\n  width: 100%;\n  margin-bottom: 0;\n  padding: 0.5em;\n  box-sizing: border-box;\n  text-align: center;\n}\n\n#sk-container-id-4 label.sk-toggleable__label-arrow:before {\n  /* Arrow on the left of the label */\n  content: \"▸\";\n  float: left;\n  margin-right: 0.25em;\n  color: var(--sklearn-color-icon);\n}\n\n#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {\n  color: var(--sklearn-color-text);\n}\n\n/* Toggleable content - dropdown */\n\n#sk-container-id-4 div.sk-toggleable__content {\n  max-height: 0;\n  max-width: 0;\n  overflow: hidden;\n  text-align: left;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-4 div.sk-toggleable__content.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-4 div.sk-toggleable__content pre {\n  margin: 0.2em;\n  border-radius: 0.25em;\n  color: var(--sklearn-color-text);\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-4 div.sk-toggleable__content.fitted pre {\n  /* unfitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n  /* Expand drop-down */\n  max-height: 200px;\n  max-width: 100%;\n  overflow: auto;\n}\n\n#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n  content: \"▾\";\n}\n\n/* Pipeline/ColumnTransformer-specific style */\n\n#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-4 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator-specific style */\n\n/* Colorize estimator box */\n#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-4 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n#sk-container-id-4 div.sk-label label.sk-toggleable__label,\n#sk-container-id-4 div.sk-label label {\n  /* The background is the default theme color */\n  color: var(--sklearn-color-text-on-default-background);\n}\n\n/* On hover, darken the color of the background */\n#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n/* Label box, darken color on hover, fitted */\n#sk-container-id-4 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator label */\n\n#sk-container-id-4 div.sk-label label {\n  font-family: monospace;\n  font-weight: bold;\n  display: inline-block;\n  line-height: 1.2em;\n}\n\n#sk-container-id-4 div.sk-label-container {\n  text-align: center;\n}\n\n/* Estimator-specific */\n#sk-container-id-4 div.sk-estimator {\n  font-family: monospace;\n  border: 1px dotted var(--sklearn-color-border-box);\n  border-radius: 0.25em;\n  box-sizing: border-box;\n  margin-bottom: 0.5em;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-4 div.sk-estimator.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n/* on hover */\n#sk-container-id-4 div.sk-estimator:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-4 div.sk-estimator.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Specification for estimator info (e.g. \"i\" and \"?\") */\n\n/* Common style for \"i\" and \"?\" */\n\n.sk-estimator-doc-link,\na:link.sk-estimator-doc-link,\na:visited.sk-estimator-doc-link {\n  float: right;\n  font-size: smaller;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1em;\n  height: 1em;\n  width: 1em;\n  text-decoration: none !important;\n  margin-left: 1ex;\n  /* unfitted */\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n  color: var(--sklearn-color-unfitted-level-1);\n}\n\n.sk-estimator-doc-link.fitted,\na:link.sk-estimator-doc-link.fitted,\na:visited.sk-estimator-doc-link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\ndiv.sk-estimator:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\ndiv.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n/* Span, style for the box shown on hovering the info icon */\n.sk-estimator-doc-link span {\n  display: none;\n  z-index: 9999;\n  position: relative;\n  font-weight: normal;\n  right: .2ex;\n  padding: .5ex;\n  margin: .5ex;\n  width: min-content;\n  min-width: 20ex;\n  max-width: 50ex;\n  color: var(--sklearn-color-text);\n  box-shadow: 2pt 2pt 4pt #999;\n  /* unfitted */\n  background: var(--sklearn-color-unfitted-level-0);\n  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n}\n\n.sk-estimator-doc-link.fitted span {\n  /* fitted */\n  background: var(--sklearn-color-fitted-level-0);\n  border: var(--sklearn-color-fitted-level-3);\n}\n\n.sk-estimator-doc-link:hover span {\n  display: block;\n}\n\n/* \"?\"-specific style due to the `<a>` HTML tag */\n\n#sk-container-id-4 a.estimator_doc_link {\n  float: right;\n  font-size: 1rem;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1rem;\n  height: 1rem;\n  width: 1rem;\n  text-decoration: none;\n  /* unfitted */\n  color: var(--sklearn-color-unfitted-level-1);\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n}\n\n#sk-container-id-4 a.estimator_doc_link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\n#sk-container-id-4 a.estimator_doc_link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n#sk-container-id-4 a.estimator_doc_link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n}\n</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n                 ColumnTransformer(transformers=[(&#x27;num&#x27;,\n                                                  Pipeline(steps=[(&#x27;scaler&#x27;,\n                                                                   StandardScaler()),\n                                                                  (&#x27;pca&#x27;,\n                                                                   PCA(n_components=2,\n                                                                       random_state=717))]),\n                                                  [&#x27;VehicleAge&#x27;, &#x27;VehOdo&#x27;,\n                                                   &#x27;MMRAcquisitionAuctionAveragePrice&#x27;,\n                                                   &#x27;MMRAcquisitionAuctionCleanPrice&#x27;,\n                                                   &#x27;MMRAcquisitionRetailAveragePrice&#x27;,\n                                                   &#x27;MMRAcquisitonRetailCleanPrice&#x27;,\n                                                   &#x27;MMRCurrentAuctionAveragePri...\n                                                                                 sparse_output=False)),\n                                                                  (&#x27;scaler&#x27;,\n                                                                   StandardScaler())]),\n                                                  [&#x27;Auction&#x27;, &#x27;Color&#x27;,\n                                                   &#x27;Transmission&#x27;, &#x27;WheelType&#x27;,\n                                                   &#x27;Nationality&#x27;, &#x27;Size&#x27;,\n                                                   &#x27;TopThreeAmericanName&#x27;,\n                                                   &#x27;PRIMEUNIT&#x27;, &#x27;AUCGUART&#x27;,\n                                                   &#x27;IsOnlineSale&#x27;, &#x27;Make&#x27;])])),\n                (&#x27;wrapper&#x27;,\n                 RFECV(cv=5, estimator=DecisionTreeClassifier(random_state=29),\n                       min_features_to_select=10, n_jobs=-1)),\n                (&#x27;model&#x27;, DecisionTreeClassifier(random_state=42))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-43\" type=\"checkbox\" ><label for=\"sk-estimator-id-43\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;Pipeline<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.pipeline.Pipeline.html\">?<span>Documentation for Pipeline</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n                 ColumnTransformer(transformers=[(&#x27;num&#x27;,\n                                                  Pipeline(steps=[(&#x27;scaler&#x27;,\n                                                                   StandardScaler()),\n                                                                  (&#x27;pca&#x27;,\n                                                                   PCA(n_components=2,\n                                                                       random_state=717))]),\n                                                  [&#x27;VehicleAge&#x27;, &#x27;VehOdo&#x27;,\n                                                   &#x27;MMRAcquisitionAuctionAveragePrice&#x27;,\n                                                   &#x27;MMRAcquisitionAuctionCleanPrice&#x27;,\n                                                   &#x27;MMRAcquisitionRetailAveragePrice&#x27;,\n                                                   &#x27;MMRAcquisitonRetailCleanPrice&#x27;,\n                                                   &#x27;MMRCurrentAuctionAveragePri...\n                                                                                 sparse_output=False)),\n                                                                  (&#x27;scaler&#x27;,\n                                                                   StandardScaler())]),\n                                                  [&#x27;Auction&#x27;, &#x27;Color&#x27;,\n                                                   &#x27;Transmission&#x27;, &#x27;WheelType&#x27;,\n                                                   &#x27;Nationality&#x27;, &#x27;Size&#x27;,\n                                                   &#x27;TopThreeAmericanName&#x27;,\n                                                   &#x27;PRIMEUNIT&#x27;, &#x27;AUCGUART&#x27;,\n                                                   &#x27;IsOnlineSale&#x27;, &#x27;Make&#x27;])])),\n                (&#x27;wrapper&#x27;,\n                 RFECV(cv=5, estimator=DecisionTreeClassifier(random_state=29),\n                       min_features_to_select=10, n_jobs=-1)),\n                (&#x27;model&#x27;, DecisionTreeClassifier(random_state=42))])</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-44\" type=\"checkbox\" ><label for=\"sk-estimator-id-44\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;preprocessor: ColumnTransformer<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.compose.ColumnTransformer.html\">?<span>Documentation for preprocessor: ColumnTransformer</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>ColumnTransformer(transformers=[(&#x27;num&#x27;,\n                                 Pipeline(steps=[(&#x27;scaler&#x27;, StandardScaler()),\n                                                 (&#x27;pca&#x27;,\n                                                  PCA(n_components=2,\n                                                      random_state=717))]),\n                                 [&#x27;VehicleAge&#x27;, &#x27;VehOdo&#x27;,\n                                  &#x27;MMRAcquisitionAuctionAveragePrice&#x27;,\n                                  &#x27;MMRAcquisitionAuctionCleanPrice&#x27;,\n                                  &#x27;MMRAcquisitionRetailAveragePrice&#x27;,\n                                  &#x27;MMRAcquisitonRetailCleanPrice&#x27;,\n                                  &#x27;MMRCurrentAuctionAveragePrice&#x27;,\n                                  &#x27;MMRCurrentAuctionCleanPrice...\n                                  &#x27;MMRCurrentRetailCleanPrice&#x27;,\n                                  &#x27;VehBCost_transformed&#x27;,\n                                  &#x27;WarrantyCost_transformed&#x27;]),\n                                (&#x27;nom&#x27;,\n                                 Pipeline(steps=[(&#x27;encoder&#x27;,\n                                                  OneHotEncoder(drop=&#x27;first&#x27;,\n                                                                handle_unknown=&#x27;ignore&#x27;,\n                                                                sparse_output=False)),\n                                                 (&#x27;scaler&#x27;, StandardScaler())]),\n                                 [&#x27;Auction&#x27;, &#x27;Color&#x27;, &#x27;Transmission&#x27;,\n                                  &#x27;WheelType&#x27;, &#x27;Nationality&#x27;, &#x27;Size&#x27;,\n                                  &#x27;TopThreeAmericanName&#x27;, &#x27;PRIMEUNIT&#x27;,\n                                  &#x27;AUCGUART&#x27;, &#x27;IsOnlineSale&#x27;, &#x27;Make&#x27;])])</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-45\" type=\"checkbox\" ><label for=\"sk-estimator-id-45\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">num</label><div class=\"sk-toggleable__content fitted\"><pre>[&#x27;VehicleAge&#x27;, &#x27;VehOdo&#x27;, &#x27;MMRAcquisitionAuctionAveragePrice&#x27;, &#x27;MMRAcquisitionAuctionCleanPrice&#x27;, &#x27;MMRAcquisitionRetailAveragePrice&#x27;, &#x27;MMRAcquisitonRetailCleanPrice&#x27;, &#x27;MMRCurrentAuctionAveragePrice&#x27;, &#x27;MMRCurrentAuctionCleanPrice&#x27;, &#x27;MMRCurrentRetailAveragePrice&#x27;, &#x27;MMRCurrentRetailCleanPrice&#x27;, &#x27;VehBCost_transformed&#x27;, &#x27;WarrantyCost_transformed&#x27;]</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-46\" type=\"checkbox\" ><label for=\"sk-estimator-id-46\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;StandardScaler<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.preprocessing.StandardScaler.html\">?<span>Documentation for StandardScaler</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>StandardScaler()</pre></div> </div></div><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-47\" type=\"checkbox\" ><label for=\"sk-estimator-id-47\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;PCA<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.decomposition.PCA.html\">?<span>Documentation for PCA</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>PCA(n_components=2, random_state=717)</pre></div> </div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-48\" type=\"checkbox\" ><label for=\"sk-estimator-id-48\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">nom</label><div class=\"sk-toggleable__content fitted\"><pre>[&#x27;Auction&#x27;, &#x27;Color&#x27;, &#x27;Transmission&#x27;, &#x27;WheelType&#x27;, &#x27;Nationality&#x27;, &#x27;Size&#x27;, &#x27;TopThreeAmericanName&#x27;, &#x27;PRIMEUNIT&#x27;, &#x27;AUCGUART&#x27;, &#x27;IsOnlineSale&#x27;, &#x27;Make&#x27;]</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-49\" type=\"checkbox\" ><label for=\"sk-estimator-id-49\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;OneHotEncoder<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.preprocessing.OneHotEncoder.html\">?<span>Documentation for OneHotEncoder</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>OneHotEncoder(drop=&#x27;first&#x27;, handle_unknown=&#x27;ignore&#x27;, sparse_output=False)</pre></div> </div></div><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-50\" type=\"checkbox\" ><label for=\"sk-estimator-id-50\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;StandardScaler<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.preprocessing.StandardScaler.html\">?<span>Documentation for StandardScaler</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>StandardScaler()</pre></div> </div></div></div></div></div></div></div></div></div><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-51\" type=\"checkbox\" ><label for=\"sk-estimator-id-51\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;wrapper: RFECV<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.feature_selection.RFECV.html\">?<span>Documentation for wrapper: RFECV</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>RFECV(cv=5, estimator=DecisionTreeClassifier(random_state=29),\n      min_features_to_select=10, n_jobs=-1)</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-52\" type=\"checkbox\" ><label for=\"sk-estimator-id-52\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">estimator: DecisionTreeClassifier</label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeClassifier(random_state=29)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-53\" type=\"checkbox\" ><label for=\"sk-estimator-id-53\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;DecisionTreeClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.tree.DecisionTreeClassifier.html\">?<span>Documentation for DecisionTreeClassifier</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeClassifier(random_state=29)</pre></div> </div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-54\" type=\"checkbox\" ><label for=\"sk-estimator-id-54\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;DecisionTreeClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.tree.DecisionTreeClassifier.html\">?<span>Documentation for DecisionTreeClassifier</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeClassifier(random_state=42)</pre></div> </div></div></div></div></div></div>"},"metadata":{}}],"execution_count":44},{"cell_type":"code","source":"pipe_4 = pipeline_4.fit(transformed_train, y_train)\npipe_4[:-1].get_feature_names_out().tolist()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-02T08:51:00.899081Z","iopub.execute_input":"2024-12-02T08:51:00.899402Z","iopub.status.idle":"2024-12-02T08:51:53.776081Z","shell.execute_reply.started":"2024-12-02T08:51:00.899371Z","shell.execute_reply":"2024-12-02T08:51:53.775073Z"}},"outputs":[{"execution_count":45,"output_type":"execute_result","data":{"text/plain":"['num__pca0',\n 'num__pca1',\n 'nom__Auction_MANHEIM',\n 'nom__Auction_OTHER',\n 'nom__Color_BLACK',\n 'nom__Color_BLUE',\n 'nom__Color_GOLD',\n 'nom__Color_GREEN',\n 'nom__Color_GREY',\n 'nom__Color_MAROON',\n 'nom__Color_OTHER',\n 'nom__Color_RED',\n 'nom__Color_SILVER',\n 'nom__Color_WHITE',\n 'nom__Transmission_MANUAL',\n 'nom__WheelType_Covers',\n 'nom__WheelType_Special',\n 'nom__Nationality_OTHER ASIAN',\n 'nom__Size_LARGE',\n 'nom__Size_LARGE SUV',\n 'nom__Size_LARGE TRUCK',\n 'nom__Size_MEDIUM',\n 'nom__Size_MEDIUM SUV',\n 'nom__Size_SMALL SUV',\n 'nom__Size_SMALL TRUCK',\n 'nom__Size_SPORTS',\n 'nom__Size_VAN',\n 'nom__TopThreeAmericanName_FORD',\n 'nom__TopThreeAmericanName_GM',\n 'nom__TopThreeAmericanName_OTHER',\n 'nom__PRIMEUNIT_unknown',\n 'nom__IsOnlineSale_1.0',\n 'nom__Make_CHRYSLER',\n 'nom__Make_DODGE',\n 'nom__Make_FORD',\n 'nom__Make_HYUNDAI',\n 'nom__Make_JEEP',\n 'nom__Make_KIA',\n 'nom__Make_MAZDA',\n 'nom__Make_MERCURY',\n 'nom__Make_MITSUBISHI',\n 'nom__Make_NISSAN',\n 'nom__Make_OTHER',\n 'nom__Make_PONTIAC',\n 'nom__Make_SATURN',\n 'nom__Make_SUZUKI',\n 'nom__Make_TOYOTA']"},"metadata":{}}],"execution_count":45},{"cell_type":"markdown","source":"# Hyperparameters Tuning","metadata":{}},{"cell_type":"code","source":"from sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder, OrdinalEncoder\nfrom sklearn.decomposition import PCA\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import f1_score, make_scorer\n\n# Define your preprocessing steps\nnumerical_preprocessing_1 = Pipeline(steps=[\n    ('scaler', StandardScaler(with_mean=False)),  # Set with_mean=False for sparse data\n    ('pca', PCA(n_components=2))])  # Example PCA component number\n\nnominal_preprocessing_1 = Pipeline(steps=[\n    ('encoder', OneHotEncoder(handle_unknown='ignore')),  # Handle unknown categories\n    ('scaler', StandardScaler(with_mean=False))])  # Set with_mean=False for sparse data\n\nordinal_preprocessing_1 = Pipeline(steps=[\n    ('encoder', OrdinalEncoder()),  # Assuming ordinal_encoder is OrdinalEncoder\n    ('scaler', StandardScaler(with_mean=False))])  # Set with_mean=False for sparse data\n\n# Define ColumnTransformer\npreprocessor_1 = ColumnTransformer(transformers=[\n    (\"ord\", ordinal_preprocessing_1, ordinal_columns),\n    ('num', numerical_preprocessing_1, continuous_columns),\n    ('nom', nominal_preprocessing_1, categorical_columns)],\n    remainder='drop')\n\n# Define the full pipeline including preprocessing and model\npipeline_1 = Pipeline(steps=[\n    ('preprocessor', preprocessor_1),\n    ('model', DecisionTreeClassifier(random_state=42))\n])\n\n# Define a custom scorer for class '1' F1-score\ncustom_scorer = make_scorer(f1_score, labels=[1], average='binary')\n\n# Define parameter grid for GridSearchCV including pipeline steps\nparam_grid = {\n    'model__criterion': ['gini', 'entropy'],\n    'model__max_depth': [2, 3, 4],\n    'model__min_samples_split': [10, 15, 25],\n    'model__min_samples_leaf': [5, 8, 12],\n    'model__class_weight': [None, 'balanced']\n}\n\n# Instantiate GridSearchCV with the full pipeline\ngrid_search = GridSearchCV(pipeline_1, param_grid, cv=5, scoring=custom_scorer)\n\n# Perform GridSearchCV\ngrid_search.fit(X_train, y_train)\n\n# Get the best parameters and estimator\nbest_params = grid_search.best_params_\nprint(\"Best Parameters:\", best_params)\n\nbest_pipeline = grid_search.best_estimator_\n\n# Evaluate the best estimator on the test set\naccuracy = best_pipeline.score(X_test, y_test)\nprint(\"Test Accuracy:\", accuracy)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-02T09:18:50.147899Z","iopub.execute_input":"2024-12-02T09:18:50.148307Z","iopub.status.idle":"2024-12-02T09:22:31.352212Z","shell.execute_reply.started":"2024-12-02T09:18:50.148274Z","shell.execute_reply":"2024-12-02T09:22:31.350846Z"}},"outputs":[{"name":"stdout","text":"Best Parameters: {'model__class_weight': 'balanced', 'model__criterion': 'entropy', 'model__max_depth': 4, 'model__min_samples_leaf': 5, 'model__min_samples_split': 10}\nTest Accuracy: 0.531171500342544\n","output_type":"stream"}],"execution_count":55},{"cell_type":"code","source":"from sklearn.metrics import confusion_matrix, classification_report, roc_auc_score\n\n# Train the classifier with the full training data\nbest_pipeline.fit(X_train, y_train)\n\n# Predict the labels for the train set\ny_pred_train = best_pipeline.predict(X_train)\ny_prob_train = best_pipeline.predict_proba(X_train)\n\n# Confusion Matrix for Training Set\nconf_matrix_train = confusion_matrix(y_train, y_pred_train)\nprint(\"Confusion Matrix for Training Set:\")\nprint(conf_matrix_train)\n\n# Classification Report for Training Set\nreport_train = classification_report(y_train, y_pred_train, labels=None, zero_division='warn')\nprint(\"Classification Report for Training Set:\")\nprint(report_train)\n\n# ROC AUC Score for Training Set\nroc_auc_train = roc_auc_score(y_train, y_prob_train[:, 1])\nprint(\"ROC AUC Score for Training Set:\", roc_auc_train)\nprint(\"#\" * 60)\n\n# Predict the labels for the test set\ny_pred = best_pipeline.predict(X_test)\ny_prob = best_pipeline.predict_proba(X_test)\n\n# Confusion Matrix for Test Set\nconf_matrix = confusion_matrix(y_test, y_pred)\nprint(\"Confusion Matrix for Test Set:\")\nprint(conf_matrix)\n\n# Classification Report for Test Set\nreport = classification_report(y_test, y_pred, labels=None, zero_division='warn')\nprint(\"Classification Report for Test Set:\")\nprint(report)\n\n# ROC AUC Score for Test Set\nroc_auc = roc_auc_score(y_test, y_prob[:, 1])\nprint(\"ROC AUC Score for Test Set:\", roc_auc)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-02T09:28:10.836419Z","iopub.execute_input":"2024-12-02T09:28:10.837168Z","iopub.status.idle":"2024-12-02T09:28:12.366149Z","shell.execute_reply.started":"2024-12-02T09:28:10.837100Z","shell.execute_reply":"2024-12-02T09:28:12.364815Z"}},"outputs":[{"name":"stdout","text":"Confusion Matrix for Training Set:\n[[22390 21980]\n [ 1534  4703]]\nClassification Report for Training Set:\n              precision    recall  f1-score   support\n\n           0       0.94      0.50      0.66     44370\n           1       0.18      0.75      0.29      6237\n\n    accuracy                           0.54     50607\n   macro avg       0.56      0.63      0.47     50607\nweighted avg       0.84      0.54      0.61     50607\n\nROC AUC Score for Training Set: 0.6786095804989953\n############################################################\nConfusion Matrix for Test Set:\n[[9637 9575]\n [ 690 1993]]\nClassification Report for Test Set:\n              precision    recall  f1-score   support\n\n           0       0.93      0.50      0.65     19212\n           1       0.17      0.74      0.28      2683\n\n    accuracy                           0.53     21895\n   macro avg       0.55      0.62      0.47     21895\nweighted avg       0.84      0.53      0.61     21895\n\nROC AUC Score for Test Set: 0.6680585842538933\n","output_type":"stream"}],"execution_count":57},{"cell_type":"code","source":"from sklearn.tree import plot_tree\nimport matplotlib.pyplot as plt\n\n# Extract the decision tree classifier from the best pipeline\nbest_clf = best_pipeline.named_steps['model']\n\n# Plotting the decision tree\nplt.figure(figsize=(20, 10))  # Adjust the figure size as needed\nplot_tree(best_clf, \n          feature_names=best_pipeline.named_steps['preprocessor'].get_feature_names_out(),  \n          class_names=[str(cls) for cls in best_clf.classes_],\n          proportion=True,\n          filled=True, \n          rounded=True)\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-02T09:34:30.792500Z","iopub.execute_input":"2024-12-02T09:34:30.792910Z","iopub.status.idle":"2024-12-02T09:34:32.118947Z","shell.execute_reply.started":"2024-12-02T09:34:30.792875Z","shell.execute_reply":"2024-12-02T09:34:32.117860Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 2000x1000 with 1 Axes>","image/png":""},"metadata":{}}],"execution_count":60},{"cell_type":"code","source":"from sklearn.tree import export_text\n\n# Extract the decision tree classifier from the best pipeline\nbest_clf = best_pipeline.named_steps['model']\n\n# Get feature names from the preprocessor\nfeature_names = best_pipeline.named_steps['preprocessor'].get_feature_names_out()\n\n# Export the decision tree rules as text\ntree_rules = export_text(best_clf, feature_names=feature_names,\n                         spacing=3,\n                         decimals=2,\n                         show_weights=True)\n\nprint(tree_rules)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-02T09:35:45.629862Z","iopub.execute_input":"2024-12-02T09:35:45.630251Z","iopub.status.idle":"2024-12-02T09:35:45.640465Z","shell.execute_reply.started":"2024-12-02T09:35:45.630222Z","shell.execute_reply":"2024-12-02T09:35:45.639021Z"}},"outputs":[{"name":"stdout","text":"|--- num__pca0 <= -1.47\n|   |--- num__pca1 <= 0.81\n|   |   |--- nom__WheelType_Alloy <= 1.00\n|   |   |   |--- num__pca1 <= -0.21\n|   |   |   |   |--- weights: [1669.79, 1245.50] class: 0\n|   |   |   |--- num__pca1 >  -0.21\n|   |   |   |   |--- weights: [1274.01, 1610.63] class: 1\n|   |   |--- nom__WheelType_Alloy >  1.00\n|   |   |   |--- nom__Auction_MANHEIM <= 1.01\n|   |   |   |   |--- weights: [1066.43, 2308.43] class: 1\n|   |   |   |--- nom__Auction_MANHEIM >  1.01\n|   |   |   |   |--- weights: [1572.27, 2186.72] class: 1\n|   |--- num__pca1 >  0.81\n|   |   |--- nom__AUCGUART_GREEN <= 2.54\n|   |   |   |--- ord__VehBCost_cat_cm <= 2.62\n|   |   |   |   |--- weights: [1076.70, 3411.94] class: 1\n|   |   |   |--- ord__VehBCost_cat_cm >  2.62\n|   |   |   |   |--- weights: [657.54, 1225.21] class: 1\n|   |   |--- nom__AUCGUART_GREEN >  2.54\n|   |   |   |--- num__pca1 <= 2.20\n|   |   |   |   |--- weights: [166.52, 73.03] class: 0\n|   |   |   |--- num__pca1 >  2.20\n|   |   |   |   |--- weights: [29.65, 0.00] class: 0\n|--- num__pca0 >  -1.47\n|   |--- nom__WheelType_Covers <= 1.00\n|   |   |--- nom__Auction_MANHEIM <= 1.01\n|   |   |   |--- ord__VehBCost_cat_cm <= 3.67\n|   |   |   |   |--- weights: [491.01, 1127.85] class: 1\n|   |   |   |--- ord__VehBCost_cat_cm >  3.67\n|   |   |   |   |--- weights: [3355.55, 3939.35] class: 1\n|   |   |--- nom__Auction_MANHEIM >  1.01\n|   |   |   |--- num__pca1 <= 0.27\n|   |   |   |   |--- weights: [2444.24, 1464.58] class: 0\n|   |   |   |--- num__pca1 >  0.27\n|   |   |   |   |--- weights: [3041.32, 3269.94] class: 1\n|   |--- nom__WheelType_Covers >  1.00\n|   |   |--- ord__VehBCost_cat_cm <= 3.67\n|   |   |   |--- nom__Make_DODGE <= 1.31\n|   |   |   |   |--- weights: [1848.29, 1282.01] class: 0\n|   |   |   |--- nom__Make_DODGE >  1.31\n|   |   |   |   |--- weights: [493.30, 113.60] class: 0\n|   |   |--- ord__VehBCost_cat_cm >  3.67\n|   |   |   |--- num__pca1 <= -2.14\n|   |   |   |   |--- weights: [635.30, 40.57] class: 0\n|   |   |   |--- num__pca1 >  -2.14\n|   |   |   |   |--- weights: [5481.57, 2004.16] class: 0\n\n","output_type":"stream"}],"execution_count":61},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}