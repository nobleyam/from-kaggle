{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":2564,"databundleVersionId":29456,"sourceType":"competition"}],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# read the data","metadata":{}},{"cell_type":"code","source":"import pandas as pd\n\ndf = pd.read_csv('/kaggle/input/DontGetKicked/training.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T07:04:40.512054Z","iopub.execute_input":"2024-11-20T07:04:40.512540Z","iopub.status.idle":"2024-11-20T07:04:41.324655Z","shell.execute_reply.started":"2024-11-20T07:04:40.512488Z","shell.execute_reply":"2024-11-20T07:04:41.323569Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"import warnings\nwarnings.filterwarnings('ignore')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T07:04:41.326004Z","iopub.execute_input":"2024-11-20T07:04:41.326603Z","iopub.status.idle":"2024-11-20T07:04:41.332627Z","shell.execute_reply.started":"2024-11-20T07:04:41.326550Z","shell.execute_reply":"2024-11-20T07:04:41.331405Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"# Set 'RefId' as the index in df first\ndf = df.set_index('RefId')\n\n# Then define target and inputs\ntarget = df['IsBadBuy']\ninputs = df.drop(columns=['IsBadBuy'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T07:04:41.335915Z","iopub.execute_input":"2024-11-20T07:04:41.336371Z","iopub.status.idle":"2024-11-20T07:04:41.378129Z","shell.execute_reply.started":"2024-11-20T07:04:41.336321Z","shell.execute_reply":"2024-11-20T07:04:41.377063Z"}},"outputs":[],"execution_count":3},{"cell_type":"markdown","source":"# feature screening","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\n\n\n# split into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(inputs, target, test_size=0.30, random_state=42)\n\nX_train.shape,X_test.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T07:04:41.379579Z","iopub.execute_input":"2024-11-20T07:04:41.380052Z","iopub.status.idle":"2024-11-20T07:04:42.025894Z","shell.execute_reply.started":"2024-11-20T07:04:41.380005Z","shell.execute_reply":"2024-11-20T07:04:42.024729Z"}},"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"((51088, 32), (21895, 32))"},"metadata":{}}],"execution_count":4},{"cell_type":"code","source":"def feature_screening(data, min_cv=0.1, mode_threshold=99, distinct_threshold=90):\n    processed_data = data.copy()\n    \n\n    columns = inputs.columns\n\n    continuous = [\n        'VehYear', 'VehicleAge', 'VehOdo', \n        'MMRAcquisitionAuctionAveragePrice', 'MMRAcquisitionAuctionCleanPrice',\n        'MMRAcquisitionRetailAveragePrice', 'MMRAcquisitonRetailCleanPrice',\n        'MMRCurrentAuctionAveragePrice', 'MMRCurrentAuctionCleanPrice',\n        'MMRCurrentRetailAveragePrice', 'MMRCurrentRetailCleanPrice',\n        'VehBCost', 'WarrantyCost'\n    ]\n    categorical = [j for j in columns if j not in continuous]\n\n    # Define a minimum value for coefficient of variation\n    min_cv = min_cv\n\n    # Calculate the coefficient of variation for each column\n    cv_values = processed_data[continuous].std() / processed_data[continuous].mean()\n\n    # Filter out columns with CV less than 0.1\n    screen_cv =  cv_values[cv_values < min_cv].index.tolist()\n\n\n    # Define a threshold for the dominant category percentage\n    mode_threshold = mode_threshold\n\n    # Calculate the percentage of the mode category for each column\n    mode_category = (processed_data[categorical].apply(lambda x: x.value_counts().max() / len(x)) * 100)\n\n    # Select columns where the mode category percentage is greater than the threshold\n    screen_mode = mode_category[mode_category > mode_threshold].index.tolist()\n\n\n    # Set a threshold for excluding columns \n    distinct_threshold = distinct_threshold\n\n    # Calculate the percentage of distinct categories in categorical variables\n    distinct_percentage = (processed_data[categorical].apply(lambda x: x.dropna().nunique() / x.count()) * 100)\n\n    # Select categorical columns based on distinct percentage threshold\n    screen_distinct = distinct_percentage[distinct_percentage > distinct_threshold].index.tolist()\n\n    screened_features  = list(set(screen_cv + screen_mode + screen_distinct))\n     \n    return screened_features ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T07:04:42.027721Z","iopub.execute_input":"2024-11-20T07:04:42.028296Z","iopub.status.idle":"2024-11-20T07:04:42.039397Z","shell.execute_reply.started":"2024-11-20T07:04:42.028241Z","shell.execute_reply":"2024-11-20T07:04:42.038136Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"drop_list = feature_screening(X_train, min_cv=0.1, mode_threshold=99, distinct_threshold=90)\n\nX_train = X_train.drop(drop_list, axis=1)\nX_test = X_test.drop(drop_list, axis=1)\n\nX_train.shape, X_test.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T07:04:42.041432Z","iopub.execute_input":"2024-11-20T07:04:42.041913Z","iopub.status.idle":"2024-11-20T07:04:42.355884Z","shell.execute_reply.started":"2024-11-20T07:04:42.041863Z","shell.execute_reply":"2024-11-20T07:04:42.354780Z"}},"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"((51088, 31), (21895, 31))"},"metadata":{}}],"execution_count":6},{"cell_type":"markdown","source":"# Handle Out-of-Range ","metadata":{}},{"cell_type":"code","source":"import pandas as pd\n\ndef range_consistency(data, target):\n    # Define ranges for each column\n    column_ranges = {\n    'VehicleAge': (0,30),\n    'VehOdo': (0,120000),\n    'MMRAcquisitionAuctionAveragePrice': (800,46000),\n    'MMRAcquisitionAuctionCleanPrice': (1000,46000),\n    'MMRAcquisitionRetailAveragePrice': (1000,46000),\n    'MMRAcquisitonRetailCleanPrice': (1000,46000),\n    'MMRCurrentAuctionAveragePrice': (300,46000),\n    'MMRCurrentAuctionCleanPrice': (400,46000),\n    'MMRCurrentRetailAveragePrice': (800,46000),\n    'MMRCurrentRetailCleanPrice': (1000,46000),\n    'VehBCost': (1000,46000),\n    'WarrantyCost': (400,8000)\n    }\n\n    # Iterate through each column and fill NaN values outside the defined range\n    for column, (min_val, max_val) in column_ranges.items():\n        data[column] = data[column].apply(lambda x: x if min_val <= x <= max_val else None)\n        \n    return data, target","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T07:04:42.357438Z","iopub.execute_input":"2024-11-20T07:04:42.357885Z","iopub.status.idle":"2024-11-20T07:04:42.365799Z","shell.execute_reply.started":"2024-11-20T07:04:42.357840Z","shell.execute_reply":"2024-11-20T07:04:42.364635Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"import numpy as np\n\ndef initial_preproc(data):\n    processed_data = data.copy()\n    # List of columns to drop\n    columns_to_drop = ['PurchDate', 'Model', 'Trim', 'SubModel', 'BYRNO', 'VNZIP1', 'VNST', 'WheelTypeID']\n    \n    # Drop the columns\n    processed_data = processed_data.drop(columns=columns_to_drop)\n    # Replace 'NOT AVAIL' in the 'Color' column with NaN\n    processed_data['Color'] = processed_data['Color'].replace('NOT AVAIL', np.nan)\n    processed_data['Transmission'] = processed_data['Transmission'].replace(['Manual'], 'MANUAL')\n    processed_data['Nationality'] = processed_data['Nationality'].replace(['OTHER','TOP LINE ASIAN'], 'OTHERS')\n    # Define a threshold for frequency (1% of total data)\n    threshold = 0.01 * len(processed_data)\n    \n    # Group classes in 'Color' column\n    color_freq = processed_data['Color'].value_counts()  # Get frequencies\n    color_to_other = color_freq[color_freq < threshold].index  # Classes with less than 1% frequency\n    processed_data['Color'] = processed_data['Color'].replace(color_to_other, 'OTHER')\n    \n    # Group classes in 'Make' column\n    make_freq = processed_data['Make'].value_counts()  # Get frequencies\n    make_to_other = make_freq[make_freq < threshold].index  # Classes with less than 1% frequency\n    processed_data['Make'] = processed_data['Make'].replace(make_to_other, 'OTHER')\n    \n    #From our previous Chi-Square Test\n    processed_data['PRIMEUNIT'].fillna('unknown', inplace=True)\n    processed_data['AUCGUART'].fillna('unknown', inplace=True)\n    \n    \n\n\n\n    return processed_data","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T07:04:42.367325Z","iopub.execute_input":"2024-11-20T07:04:42.367746Z","iopub.status.idle":"2024-11-20T07:04:42.379763Z","shell.execute_reply.started":"2024-11-20T07:04:42.367679Z","shell.execute_reply":"2024-11-20T07:04:42.378537Z"}},"outputs":[],"execution_count":8},{"cell_type":"code","source":"X_train = initial_preproc(X_train)\nX_test = initial_preproc(X_test)\n\nX_train.shape, X_test.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T07:04:42.381349Z","iopub.execute_input":"2024-11-20T07:04:42.381835Z","iopub.status.idle":"2024-11-20T07:04:42.567424Z","shell.execute_reply.started":"2024-11-20T07:04:42.381787Z","shell.execute_reply":"2024-11-20T07:04:42.566424Z"}},"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"((51088, 23), (21895, 23))"},"metadata":{}}],"execution_count":9},{"cell_type":"markdown","source":"# outliers","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\n\ndef outlier_handling(data, contamination=0.01):\n    inputs_iso = data.copy()\n    \n    # Continuous variables\n    continuous_columns = [\n        'VehicleAge', 'VehOdo', 'MMRAcquisitionAuctionAveragePrice', \n        'MMRAcquisitionAuctionCleanPrice', 'MMRAcquisitionRetailAveragePrice', \n        'MMRAcquisitonRetailCleanPrice', 'MMRCurrentAuctionAveragePrice', \n        'MMRCurrentAuctionCleanPrice', 'MMRCurrentRetailAveragePrice', \n        'MMRCurrentRetailCleanPrice', 'VehBCost', 'WarrantyCost'\n    ]\n    \n    # Categorical variables\n    categorical_columns = [\n        'Auction', 'Color', 'Transmission', 'WheelType', \n        'Nationality', 'Size', 'TopThreeAmericanName', \n        'PRIMEUNIT', 'AUCGUART', 'IsOnlineSale', 'Make' ]    \n    # Discard rows with NaN valuse\n    inputs_iso = inputs_iso.dropna()\n    \n    # Apply Z-score scaling to numerical columns\n    scaler = StandardScaler()\n    inputs_iso[continuous_columns] = scaler.fit_transform(inputs_iso[continuous_columns])\n    \n    # Apply label encoding to categorical columns\n    label_encoder = LabelEncoder()\n    inputs_iso[categorical_columns] = inputs_iso[categorical_columns].apply(label_encoder.fit_transform)\n    \n    # Fit Isolation Forest model\n    clf = IsolationForest(contamination=0.01, random_state=42)\n    clf.fit(inputs_iso)\n    \n    # Predict outliers\n    outliers = clf.predict(inputs_iso)\n    \n    # Add the outlier predictions to your DataFrame\n    inputs_iso['outlier'] = outliers\n    \n    outlier_index = inputs_iso[inputs_iso['outlier'] == -1].index\n\n    \n    return outlier_index","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T07:04:42.568581Z","iopub.execute_input":"2024-11-20T07:04:42.568902Z","iopub.status.idle":"2024-11-20T07:04:42.747196Z","shell.execute_reply.started":"2024-11-20T07:04:42.568871Z","shell.execute_reply":"2024-11-20T07:04:42.746058Z"}},"outputs":[],"execution_count":10},{"cell_type":"code","source":"outlier_index = outlier_handling(X_train, contamination=0.01)\n\nX_train = X_train.drop(outlier_index.tolist())\n\ny_train = y_train.drop(outlier_index.tolist())\n\nX_train.shape, y_train.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T07:04:42.748414Z","iopub.execute_input":"2024-11-20T07:04:42.748911Z","iopub.status.idle":"2024-11-20T07:04:43.839492Z","shell.execute_reply.started":"2024-11-20T07:04:42.748870Z","shell.execute_reply":"2024-11-20T07:04:43.838281Z"}},"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"((50601, 23), (50601,))"},"metadata":{}}],"execution_count":11},{"cell_type":"code","source":"X_train = range_consistency(X_train, y_train)[0]\nX_test = range_consistency(X_test, y_test)[0]\n\ny_train = range_consistency(X_train, y_train)[1]\ny_test = range_consistency(X_test, y_test)[1]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T07:04:43.843745Z","iopub.execute_input":"2024-11-20T07:04:43.844115Z","iopub.status.idle":"2024-11-20T07:04:44.478428Z","shell.execute_reply.started":"2024-11-20T07:04:43.844081Z","shell.execute_reply":"2024-11-20T07:04:44.477537Z"}},"outputs":[],"execution_count":12},{"cell_type":"markdown","source":"# missing values","metadata":{}},{"cell_type":"markdown","source":"## Row cleaning","metadata":{}},{"cell_type":"code","source":"def missing_row_report(data, missrow=12):\n    processed_data = data.copy()\n\n    # Create a new column with the number of missing values in each row\n    processed_data['Num_Missing_Values'] = processed_data.isnull().sum(axis=1)\n\n    discard_missing_row = processed_data[processed_data['Num_Missing_Values'] > missrow].index.tolist()\n\n    return discard_missing_row","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T07:04:44.479811Z","iopub.execute_input":"2024-11-20T07:04:44.480270Z","iopub.status.idle":"2024-11-20T07:04:44.486463Z","shell.execute_reply.started":"2024-11-20T07:04:44.480223Z","shell.execute_reply":"2024-11-20T07:04:44.485368Z"}},"outputs":[],"execution_count":13},{"cell_type":"code","source":"discard_missing_row = missing_row_report(X_train, missrow=35)\n\nX_train = X_train.drop(discard_missing_row)\ny_train = y_train.drop(discard_missing_row)\n\nX_train.shape, y_train.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T07:04:44.487630Z","iopub.execute_input":"2024-11-20T07:04:44.487957Z","iopub.status.idle":"2024-11-20T07:04:44.563515Z","shell.execute_reply.started":"2024-11-20T07:04:44.487926Z","shell.execute_reply":"2024-11-20T07:04:44.562519Z"}},"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"((50601, 23), (50601,))"},"metadata":{}}],"execution_count":14},{"cell_type":"markdown","source":"## column cleaning ","metadata":{}},{"cell_type":"code","source":"def missing_col_report(data, misscol=50):\n    processed_data = data.copy()\n    \n    # Report on count and percentage of missing values in each column\n    missing_values_report = pd.DataFrame({\n        'Column': processed_data.columns,\n        'Missing Values': processed_data.isnull().sum(),\n        'Percentage Missing': processed_data.isnull().mean() * 100\n        })\n    discard_missing_col = missing_values_report[missing_values_report['Percentage Missing'] > misscol].index.tolist()\n    \n    return discard_missing_col","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T07:04:44.565027Z","iopub.execute_input":"2024-11-20T07:04:44.565427Z","iopub.status.idle":"2024-11-20T07:04:44.573273Z","shell.execute_reply.started":"2024-11-20T07:04:44.565385Z","shell.execute_reply":"2024-11-20T07:04:44.571643Z"}},"outputs":[],"execution_count":15},{"cell_type":"code","source":"discard_missing_col = missing_col_report(X_train, misscol=50)\n\nX_train = X_train.drop(discard_missing_col, axis=1)\nX_test = X_test.drop(discard_missing_col, axis=1)\n\nX_train.shape, X_test.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T07:04:44.574544Z","iopub.execute_input":"2024-11-20T07:04:44.574865Z","iopub.status.idle":"2024-11-20T07:04:44.661548Z","shell.execute_reply.started":"2024-11-20T07:04:44.574835Z","shell.execute_reply":"2024-11-20T07:04:44.660551Z"}},"outputs":[{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"((50601, 23), (21895, 23))"},"metadata":{}}],"execution_count":16},{"cell_type":"markdown","source":"## impute missing values","metadata":{}},{"cell_type":"code","source":"from sklearn.impute import  SimpleImputer\n\ndef missing_imputer(train, test):\n    \n    continuous = train.select_dtypes(exclude=['object','category']).columns.tolist()\n    categorical = train.select_dtypes(include=['object','category']).columns.tolist()\n\n    # Define imputation strategies for each subset of columns\n    cat_imputer = SimpleImputer(strategy='most_frequent')\n    cont_imputer = SimpleImputer(strategy='median')\n    \n    try:\n\n    # Impute missing values\n        train[continuous] = cont_imputer.fit_transform(train[continuous])\n        train[categorical] = cat_imputer.fit_transform(train[categorical])\n    \n        test[continuous] = cont_imputer.transform(test[continuous])\n        test[categorical] = cat_imputer.transform(test[categorical])\n\n    except:\n        test[continuous] = cont_imputer.transform(test[continuous])\n        test[categorical] = cat_imputer.transform(test[categorical])\n        \n    return train, test","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T07:04:44.663136Z","iopub.execute_input":"2024-11-20T07:04:44.663448Z","iopub.status.idle":"2024-11-20T07:04:44.672953Z","shell.execute_reply.started":"2024-11-20T07:04:44.663417Z","shell.execute_reply":"2024-11-20T07:04:44.672023Z"}},"outputs":[],"execution_count":17},{"cell_type":"code","source":"X_train, X_test = missing_imputer(X_train, X_test)\n\nX_train.shape, X_test.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T07:04:44.674187Z","iopub.execute_input":"2024-11-20T07:04:44.674570Z","iopub.status.idle":"2024-11-20T07:04:44.925811Z","shell.execute_reply.started":"2024-11-20T07:04:44.674535Z","shell.execute_reply":"2024-11-20T07:04:44.924763Z"}},"outputs":[{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"((50601, 23), (21895, 23))"},"metadata":{}}],"execution_count":18},{"cell_type":"markdown","source":"# transformation using the Box-Cox","metadata":{}},{"cell_type":"code","source":"from sklearn.preprocessing import PowerTransformer\n\nfrom sklearn.preprocessing import PowerTransformer\nimport pandas as pd\n\ndef transform_features(data):\n   \n    data_transformed = data.copy()  # Avoid modifying the original DataFrame\n    features = [\"VehBCost\", \"WarrantyCost\"]\n\n    for feature in features:\n        # Check if the feature contains non-positive values\n        has_negative_values = (data[feature] <= 0).any()\n        \n        # Select transformation method based on values\n        method = 'yeo-johnson' if has_negative_values else 'box-cox'\n        transformer = PowerTransformer(method=method, standardize=False)\n        \n        # Fit and transform the feature\n        data_transformed[f\"{feature}_transformed\"] = transformer.fit_transform(data[[feature]])\n        # Drop the original columns used for PowerTransformer\n        \n\n    return data_transformed","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T07:04:44.927127Z","iopub.execute_input":"2024-11-20T07:04:44.927509Z","iopub.status.idle":"2024-11-20T07:04:44.934306Z","shell.execute_reply.started":"2024-11-20T07:04:44.927476Z","shell.execute_reply":"2024-11-20T07:04:44.933045Z"}},"outputs":[],"execution_count":19},{"cell_type":"code","source":"transformed_train = transform_features(X_train)\ntransformed_test = transform_features(X_test)\n\ntransformed_train.shape, transformed_test.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T07:04:44.935625Z","iopub.execute_input":"2024-11-20T07:04:44.935991Z","iopub.status.idle":"2024-11-20T07:04:45.713244Z","shell.execute_reply.started":"2024-11-20T07:04:44.935959Z","shell.execute_reply":"2024-11-20T07:04:45.712163Z"}},"outputs":[{"execution_count":20,"output_type":"execute_result","data":{"text/plain":"((50601, 25), (21895, 25))"},"metadata":{}}],"execution_count":20},{"cell_type":"code","source":"\n\n\n# continuous variables\ncontinuous_columns_trans = [\n        'VehicleAge', 'VehOdo', 'MMRAcquisitionAuctionAveragePrice', \n        'MMRAcquisitionAuctionCleanPrice', 'MMRAcquisitionRetailAveragePrice', \n        'MMRAcquisitonRetailCleanPrice', 'MMRCurrentAuctionAveragePrice', \n        'MMRCurrentAuctionCleanPrice', 'MMRCurrentRetailAveragePrice', \n        'MMRCurrentRetailCleanPrice','VehBCost_transformed','WarrantyCost_transformed']\n    \n# Categorical variables\ncategorical_columns_trans = [\n        'Auction', 'Color', 'Transmission', 'WheelType', \n        'Nationality', 'Size', 'TopThreeAmericanName', \n        'PRIMEUNIT', 'AUCGUART', 'IsOnlineSale', 'Make' ]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T07:04:45.714476Z","iopub.execute_input":"2024-11-20T07:04:45.714827Z","iopub.status.idle":"2024-11-20T07:04:45.720471Z","shell.execute_reply.started":"2024-11-20T07:04:45.714796Z","shell.execute_reply":"2024-11-20T07:04:45.719310Z"}},"outputs":[],"execution_count":21},{"cell_type":"markdown","source":"# discretization by Chi-Merge","metadata":{}},{"cell_type":"code","source":"pip install scorecardbundle -q","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T07:04:45.721898Z","iopub.execute_input":"2024-11-20T07:04:45.722332Z","iopub.status.idle":"2024-11-20T07:04:55.707332Z","shell.execute_reply.started":"2024-11-20T07:04:45.722284Z","shell.execute_reply":"2024-11-20T07:04:55.706007Z"}},"outputs":[{"name":"stdout","text":"Note: you may need to restart the kernel to use updated packages.\n","output_type":"stream"}],"execution_count":22},{"cell_type":"code","source":"import numpy as np\n\ndef frequency_table(variable):\n    \n    # Get unique elements and their counts\n    unique_elements, counts = np.unique(variable, return_counts=True)\n\n    # Calculate percentages\n    percentages = (counts / len(variable)) * 100\n\n    # Create a dictionary to store the value counts and percentages\n    value_counts_and_percentages = zip(unique_elements, counts, percentages)\n\n    # Print the value counts and percentages\n    for i, j, k in value_counts_and_percentages:\n        print(f\"{i}: Count: {j}, Percentage: {k:.2f}%\")\n    return","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T07:04:55.709113Z","iopub.execute_input":"2024-11-20T07:04:55.709500Z","iopub.status.idle":"2024-11-20T07:04:55.716337Z","shell.execute_reply.started":"2024-11-20T07:04:55.709463Z","shell.execute_reply":"2024-11-20T07:04:55.715220Z"}},"outputs":[],"execution_count":23},{"cell_type":"code","source":"from scorecardbundle.feature_discretization import ChiMerge as cm\n\ndef discretizer(train, test,y_train):\n    # Columns to discretize\n    chi_merge_list = [\"VehBCost\", \"WarrantyCost\"]\n    \n    # Initialize ChiMerge discretizer\n    trans_cm = cm.ChiMerge(max_intervals=5, min_intervals=1, decimal=3, output_dataframe=True)\n    result_cm = trans_cm.fit_transform(train[chi_merge_list], y_train.astype('int')) \n    boundaries_dict = {key: np.insert(boundaries, 0, -np.inf) for key, boundaries in trans_cm.boundaries_.items()}\n    \n    # Apply transformation to train and test sets\n    for key, boundaries in boundaries_dict.items():\n        column_name = f\"{key}_cat_cm\"\n        try:\n            # Discretize train set\n            train[column_name] = pd.cut(train[key], bins=boundaries, labels=False, right=False)\n            \n            # Discretize test set using the same boundaries\n            test[column_name] = pd.cut(test[key], bins=boundaries, labels=False, right=False)\n        except:\n            test[column_name] = pd.cut(test[key], bins=boundaries, labels=False, right=False)\n    \n    \n    return train, test\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T07:04:55.717875Z","iopub.execute_input":"2024-11-20T07:04:55.719024Z","iopub.status.idle":"2024-11-20T07:04:55.733369Z","shell.execute_reply.started":"2024-11-20T07:04:55.718980Z","shell.execute_reply":"2024-11-20T07:04:55.732165Z"}},"outputs":[],"execution_count":24},{"cell_type":"code","source":"X_train, X_test = discretizer(X_train, X_test, y_train)\n\nX_train.shape, X_test.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T07:04:55.734861Z","iopub.execute_input":"2024-11-20T07:04:55.735209Z","iopub.status.idle":"2024-11-20T07:05:56.981199Z","shell.execute_reply.started":"2024-11-20T07:04:55.735174Z","shell.execute_reply":"2024-11-20T07:05:56.980110Z"}},"outputs":[{"execution_count":25,"output_type":"execute_result","data":{"text/plain":"((50601, 25), (21895, 25))"},"metadata":{}}],"execution_count":25},{"cell_type":"code","source":"\n# ordinal variables\nordinal_columns = [ 'VehBCost_cat_cm', 'WarrantyCost_cat_cm']\n\n# continuous variables\ncontinuous_columns = [\n        'VehicleAge', 'VehOdo', 'MMRAcquisitionAuctionAveragePrice', \n        'MMRAcquisitionAuctionCleanPrice', 'MMRAcquisitionRetailAveragePrice', \n        'MMRAcquisitonRetailCleanPrice', 'MMRCurrentAuctionAveragePrice', \n        'MMRCurrentAuctionCleanPrice', 'MMRCurrentRetailAveragePrice', \n        'MMRCurrentRetailCleanPrice']\n    \n# Categorical variables\ncategorical_columns = [\n        'Auction', 'Color', 'Transmission', 'WheelType', \n        'Nationality', 'Size', 'TopThreeAmericanName', \n        'PRIMEUNIT', 'AUCGUART', 'IsOnlineSale', 'Make' ]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T07:05:56.982475Z","iopub.execute_input":"2024-11-20T07:05:56.982806Z","iopub.status.idle":"2024-11-20T07:05:56.988267Z","shell.execute_reply.started":"2024-11-20T07:05:56.982773Z","shell.execute_reply":"2024-11-20T07:05:56.987186Z"}},"outputs":[],"execution_count":26},{"cell_type":"code","source":"!pip install shapely>=2.0.1 -q","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T07:05:56.989772Z","iopub.execute_input":"2024-11-20T07:05:56.990266Z","iopub.status.idle":"2024-11-20T07:06:06.810663Z","shell.execute_reply.started":"2024-11-20T07:05:56.990209Z","shell.execute_reply":"2024-11-20T07:06:06.809348Z"}},"outputs":[],"execution_count":27},{"cell_type":"code","source":"pip install --upgrade scikit-learn -q\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T07:06:06.812566Z","iopub.execute_input":"2024-11-20T07:06:06.813580Z","iopub.status.idle":"2024-11-20T07:06:16.819065Z","shell.execute_reply.started":"2024-11-20T07:06:06.813531Z","shell.execute_reply":"2024-11-20T07:06:16.817781Z"}},"outputs":[{"name":"stdout","text":"Note: you may need to restart the kernel to use updated packages.\n","output_type":"stream"}],"execution_count":28},{"cell_type":"code","source":"pip install -U scikit-learn -q\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T07:06:16.820635Z","iopub.execute_input":"2024-11-20T07:06:16.821051Z","iopub.status.idle":"2024-11-20T07:06:26.809258Z","shell.execute_reply.started":"2024-11-20T07:06:16.821016Z","shell.execute_reply":"2024-11-20T07:06:26.807946Z"}},"outputs":[{"name":"stdout","text":"Note: you may need to restart the kernel to use updated packages.\n","output_type":"stream"}],"execution_count":29},{"cell_type":"markdown","source":"# Pipeline","metadata":{}},{"cell_type":"code","source":"from sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.feature_selection import RFECV\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.preprocessing import  OneHotEncoder, OrdinalEncoder, StandardScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n\n\n\none_hot_encoder = OneHotEncoder(drop='first', handle_unknown='ignore', sparse_output=False)\n\nordinal_encoder = OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\n\nz_score = StandardScaler()\n\nlda = LinearDiscriminantAnalysis(n_components=None)\n\npca = PCA(n_components=2, random_state=717)\n\nwrapper = RFECV(estimator=DecisionTreeClassifier(random_state=29), step=1, min_features_to_select=10, cv=5, n_jobs=-1)\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T07:06:26.811371Z","iopub.execute_input":"2024-11-20T07:06:26.812432Z","iopub.status.idle":"2024-11-20T07:06:26.834542Z","shell.execute_reply.started":"2024-11-20T07:06:26.812380Z","shell.execute_reply":"2024-11-20T07:06:26.833577Z"}},"outputs":[],"execution_count":30},{"cell_type":"code","source":"# Define the preprocessing steps for numerical and categorical features separately\nnumerical_preprocessing_1 = Pipeline(steps=[\n    ('scaler', z_score),  # Scale numerical features\n    ('pca', pca)])  # Feature extraction on numerical features\n\n    \nnominal_preprocessing_1 = Pipeline(steps=[\n    ('encoder', one_hot_encoder),  # ordinal_encoder for chimerged  features\n    ('scaler', z_score)])  # Scale encoded features\n\nordinal_preprocessing_1 = Pipeline(steps=[\n    ('encoder', ordinal_encoder),  # One-hot encode nominal features\n    ('scaler', z_score)])  # Scale encoded features\n\n\n# Define the ColumnTransformer for numerical and categorical features\npreprocessor_1 = ColumnTransformer(transformers=[\n    (\"ord\", ordinal_preprocessing_1, ordinal_columns),\n    ('num', numerical_preprocessing_1, continuous_columns),\n    ('nom', nominal_preprocessing_1, categorical_columns),\n], remainder='drop')  # Passthrough any columns not specified\n\n\npipeline_1 = Pipeline(steps=[\n    ('preprocessor', preprocessor_1),\n    ('wrapper', wrapper),\n    ('model', DecisionTreeClassifier(random_state=42))])\n\n# Train the pipeline\npipe_1 = pipeline_1.fit(X_train, y_train)\npipe_1[:-1].get_feature_names_out().tolist()\n\n# Use the pipeline for prediction or other tasks\npredictions_1 = pipe_1.predict(X_test)\n\nfrom sklearn.metrics import accuracy_score\n\n# Calculate accuracy\naccuracy = accuracy_score(y_test, predictions_1)\nprint(\"Accuracy:\", accuracy)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T07:06:26.835861Z","iopub.execute_input":"2024-11-20T07:06:26.836202Z","iopub.status.idle":"2024-11-20T07:07:30.982668Z","shell.execute_reply.started":"2024-11-20T07:06:26.836170Z","shell.execute_reply":"2024-11-20T07:07:30.981457Z"}},"outputs":[{"name":"stdout","text":"Accuracy: 0.7904544416533456\n","output_type":"stream"}],"execution_count":31},{"cell_type":"code","source":"from sklearn.metrics import classification_report\n\n# Print a detailed classification report\nprint(classification_report(y_test, predictions_1))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T07:07:30.984246Z","iopub.execute_input":"2024-11-20T07:07:30.984582Z","iopub.status.idle":"2024-11-20T07:07:31.032096Z","shell.execute_reply.started":"2024-11-20T07:07:30.984548Z","shell.execute_reply":"2024-11-20T07:07:31.031055Z"}},"outputs":[{"name":"stdout","text":"              precision    recall  f1-score   support\n\n           0       0.89      0.87      0.88     19212\n           1       0.18      0.20      0.19      2683\n\n    accuracy                           0.79     21895\n   macro avg       0.53      0.54      0.54     21895\nweighted avg       0.80      0.79      0.80     21895\n\n","output_type":"stream"}],"execution_count":32},{"cell_type":"code","source":"pipeline_1","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T07:07:31.033391Z","iopub.execute_input":"2024-11-20T07:07:31.033747Z","iopub.status.idle":"2024-11-20T07:07:31.136718Z","shell.execute_reply.started":"2024-11-20T07:07:31.033681Z","shell.execute_reply":"2024-11-20T07:07:31.135750Z"}},"outputs":[{"execution_count":33,"output_type":"execute_result","data":{"text/plain":"Pipeline(steps=[('preprocessor',\n                 ColumnTransformer(transformers=[('ord',\n                                                  Pipeline(steps=[('encoder',\n                                                                   OrdinalEncoder(handle_unknown='use_encoded_value',\n                                                                                  unknown_value=-1)),\n                                                                  ('scaler',\n                                                                   StandardScaler())]),\n                                                  ['VehBCost_cat_cm',\n                                                   'WarrantyCost_cat_cm']),\n                                                 ('num',\n                                                  Pipeline(steps=[('scaler',\n                                                                   StandardScaler()),\n                                                                  ('pca',\n                                                                   PCA(n_components=2,\n                                                                       random_state=717))]),\n                                                  ['VehicleAge...\n                                                                                 sparse_output=False)),\n                                                                  ('scaler',\n                                                                   StandardScaler())]),\n                                                  ['Auction', 'Color',\n                                                   'Transmission', 'WheelType',\n                                                   'Nationality', 'Size',\n                                                   'TopThreeAmericanName',\n                                                   'PRIMEUNIT', 'AUCGUART',\n                                                   'IsOnlineSale', 'Make'])])),\n                ('wrapper',\n                 RFECV(cv=5, estimator=DecisionTreeClassifier(random_state=29),\n                       min_features_to_select=10, n_jobs=-1)),\n                ('model', DecisionTreeClassifier(random_state=42))])","text/html":"<style>#sk-container-id-1 {\n  /* Definition of color scheme common for light and dark mode */\n  --sklearn-color-text: black;\n  --sklearn-color-line: gray;\n  /* Definition of color scheme for unfitted estimators */\n  --sklearn-color-unfitted-level-0: #fff5e6;\n  --sklearn-color-unfitted-level-1: #f6e4d2;\n  --sklearn-color-unfitted-level-2: #ffe0b3;\n  --sklearn-color-unfitted-level-3: chocolate;\n  /* Definition of color scheme for fitted estimators */\n  --sklearn-color-fitted-level-0: #f0f8ff;\n  --sklearn-color-fitted-level-1: #d4ebff;\n  --sklearn-color-fitted-level-2: #b3dbfd;\n  --sklearn-color-fitted-level-3: cornflowerblue;\n\n  /* Specific color for light theme */\n  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-icon: #696969;\n\n  @media (prefers-color-scheme: dark) {\n    /* Redefinition of color scheme for dark theme */\n    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-icon: #878787;\n  }\n}\n\n#sk-container-id-1 {\n  color: var(--sklearn-color-text);\n}\n\n#sk-container-id-1 pre {\n  padding: 0;\n}\n\n#sk-container-id-1 input.sk-hidden--visually {\n  border: 0;\n  clip: rect(1px 1px 1px 1px);\n  clip: rect(1px, 1px, 1px, 1px);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}\n\n#sk-container-id-1 div.sk-dashed-wrapped {\n  border: 1px dashed var(--sklearn-color-line);\n  margin: 0 0.4em 0.5em 0.4em;\n  box-sizing: border-box;\n  padding-bottom: 0.4em;\n  background-color: var(--sklearn-color-background);\n}\n\n#sk-container-id-1 div.sk-container {\n  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n     but bootstrap.min.css set `[hidden] { display: none !important; }`\n     so we also need the `!important` here to be able to override the\n     default hidden behavior on the sphinx rendered scikit-learn.org.\n     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n  display: inline-block !important;\n  position: relative;\n}\n\n#sk-container-id-1 div.sk-text-repr-fallback {\n  display: none;\n}\n\ndiv.sk-parallel-item,\ndiv.sk-serial,\ndiv.sk-item {\n  /* draw centered vertical line to link estimators */\n  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n  background-size: 2px 100%;\n  background-repeat: no-repeat;\n  background-position: center center;\n}\n\n/* Parallel-specific style estimator block */\n\n#sk-container-id-1 div.sk-parallel-item::after {\n  content: \"\";\n  width: 100%;\n  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n  flex-grow: 1;\n}\n\n#sk-container-id-1 div.sk-parallel {\n  display: flex;\n  align-items: stretch;\n  justify-content: center;\n  background-color: var(--sklearn-color-background);\n  position: relative;\n}\n\n#sk-container-id-1 div.sk-parallel-item {\n  display: flex;\n  flex-direction: column;\n}\n\n#sk-container-id-1 div.sk-parallel-item:first-child::after {\n  align-self: flex-end;\n  width: 50%;\n}\n\n#sk-container-id-1 div.sk-parallel-item:last-child::after {\n  align-self: flex-start;\n  width: 50%;\n}\n\n#sk-container-id-1 div.sk-parallel-item:only-child::after {\n  width: 0;\n}\n\n/* Serial-specific style estimator block */\n\n#sk-container-id-1 div.sk-serial {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: var(--sklearn-color-background);\n  padding-right: 1em;\n  padding-left: 1em;\n}\n\n\n/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\nclickable and can be expanded/collapsed.\n- Pipeline and ColumnTransformer use this feature and define the default style\n- Estimators will overwrite some part of the style using the `sk-estimator` class\n*/\n\n/* Pipeline and ColumnTransformer style (default) */\n\n#sk-container-id-1 div.sk-toggleable {\n  /* Default theme specific background. It is overwritten whether we have a\n  specific estimator or a Pipeline/ColumnTransformer */\n  background-color: var(--sklearn-color-background);\n}\n\n/* Toggleable label */\n#sk-container-id-1 label.sk-toggleable__label {\n  cursor: pointer;\n  display: block;\n  width: 100%;\n  margin-bottom: 0;\n  padding: 0.5em;\n  box-sizing: border-box;\n  text-align: center;\n}\n\n#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n  /* Arrow on the left of the label */\n  content: \"▸\";\n  float: left;\n  margin-right: 0.25em;\n  color: var(--sklearn-color-icon);\n}\n\n#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n  color: var(--sklearn-color-text);\n}\n\n/* Toggleable content - dropdown */\n\n#sk-container-id-1 div.sk-toggleable__content {\n  max-height: 0;\n  max-width: 0;\n  overflow: hidden;\n  text-align: left;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-1 div.sk-toggleable__content.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-1 div.sk-toggleable__content pre {\n  margin: 0.2em;\n  border-radius: 0.25em;\n  color: var(--sklearn-color-text);\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n  /* unfitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n  /* Expand drop-down */\n  max-height: 200px;\n  max-width: 100%;\n  overflow: auto;\n}\n\n#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n  content: \"▾\";\n}\n\n/* Pipeline/ColumnTransformer-specific style */\n\n#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator-specific style */\n\n/* Colorize estimator box */\n#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n#sk-container-id-1 div.sk-label label {\n  /* The background is the default theme color */\n  color: var(--sklearn-color-text-on-default-background);\n}\n\n/* On hover, darken the color of the background */\n#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n/* Label box, darken color on hover, fitted */\n#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator label */\n\n#sk-container-id-1 div.sk-label label {\n  font-family: monospace;\n  font-weight: bold;\n  display: inline-block;\n  line-height: 1.2em;\n}\n\n#sk-container-id-1 div.sk-label-container {\n  text-align: center;\n}\n\n/* Estimator-specific */\n#sk-container-id-1 div.sk-estimator {\n  font-family: monospace;\n  border: 1px dotted var(--sklearn-color-border-box);\n  border-radius: 0.25em;\n  box-sizing: border-box;\n  margin-bottom: 0.5em;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-1 div.sk-estimator.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n/* on hover */\n#sk-container-id-1 div.sk-estimator:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-1 div.sk-estimator.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Specification for estimator info (e.g. \"i\" and \"?\") */\n\n/* Common style for \"i\" and \"?\" */\n\n.sk-estimator-doc-link,\na:link.sk-estimator-doc-link,\na:visited.sk-estimator-doc-link {\n  float: right;\n  font-size: smaller;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1em;\n  height: 1em;\n  width: 1em;\n  text-decoration: none !important;\n  margin-left: 1ex;\n  /* unfitted */\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n  color: var(--sklearn-color-unfitted-level-1);\n}\n\n.sk-estimator-doc-link.fitted,\na:link.sk-estimator-doc-link.fitted,\na:visited.sk-estimator-doc-link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\ndiv.sk-estimator:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\ndiv.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n/* Span, style for the box shown on hovering the info icon */\n.sk-estimator-doc-link span {\n  display: none;\n  z-index: 9999;\n  position: relative;\n  font-weight: normal;\n  right: .2ex;\n  padding: .5ex;\n  margin: .5ex;\n  width: min-content;\n  min-width: 20ex;\n  max-width: 50ex;\n  color: var(--sklearn-color-text);\n  box-shadow: 2pt 2pt 4pt #999;\n  /* unfitted */\n  background: var(--sklearn-color-unfitted-level-0);\n  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n}\n\n.sk-estimator-doc-link.fitted span {\n  /* fitted */\n  background: var(--sklearn-color-fitted-level-0);\n  border: var(--sklearn-color-fitted-level-3);\n}\n\n.sk-estimator-doc-link:hover span {\n  display: block;\n}\n\n/* \"?\"-specific style due to the `<a>` HTML tag */\n\n#sk-container-id-1 a.estimator_doc_link {\n  float: right;\n  font-size: 1rem;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1rem;\n  height: 1rem;\n  width: 1rem;\n  text-decoration: none;\n  /* unfitted */\n  color: var(--sklearn-color-unfitted-level-1);\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n}\n\n#sk-container-id-1 a.estimator_doc_link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\n#sk-container-id-1 a.estimator_doc_link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n}\n</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n                 ColumnTransformer(transformers=[(&#x27;ord&#x27;,\n                                                  Pipeline(steps=[(&#x27;encoder&#x27;,\n                                                                   OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,\n                                                                                  unknown_value=-1)),\n                                                                  (&#x27;scaler&#x27;,\n                                                                   StandardScaler())]),\n                                                  [&#x27;VehBCost_cat_cm&#x27;,\n                                                   &#x27;WarrantyCost_cat_cm&#x27;]),\n                                                 (&#x27;num&#x27;,\n                                                  Pipeline(steps=[(&#x27;scaler&#x27;,\n                                                                   StandardScaler()),\n                                                                  (&#x27;pca&#x27;,\n                                                                   PCA(n_components=2,\n                                                                       random_state=717))]),\n                                                  [&#x27;VehicleAge...\n                                                                                 sparse_output=False)),\n                                                                  (&#x27;scaler&#x27;,\n                                                                   StandardScaler())]),\n                                                  [&#x27;Auction&#x27;, &#x27;Color&#x27;,\n                                                   &#x27;Transmission&#x27;, &#x27;WheelType&#x27;,\n                                                   &#x27;Nationality&#x27;, &#x27;Size&#x27;,\n                                                   &#x27;TopThreeAmericanName&#x27;,\n                                                   &#x27;PRIMEUNIT&#x27;, &#x27;AUCGUART&#x27;,\n                                                   &#x27;IsOnlineSale&#x27;, &#x27;Make&#x27;])])),\n                (&#x27;wrapper&#x27;,\n                 RFECV(cv=5, estimator=DecisionTreeClassifier(random_state=29),\n                       min_features_to_select=10, n_jobs=-1)),\n                (&#x27;model&#x27;, DecisionTreeClassifier(random_state=42))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;Pipeline<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.pipeline.Pipeline.html\">?<span>Documentation for Pipeline</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n                 ColumnTransformer(transformers=[(&#x27;ord&#x27;,\n                                                  Pipeline(steps=[(&#x27;encoder&#x27;,\n                                                                   OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,\n                                                                                  unknown_value=-1)),\n                                                                  (&#x27;scaler&#x27;,\n                                                                   StandardScaler())]),\n                                                  [&#x27;VehBCost_cat_cm&#x27;,\n                                                   &#x27;WarrantyCost_cat_cm&#x27;]),\n                                                 (&#x27;num&#x27;,\n                                                  Pipeline(steps=[(&#x27;scaler&#x27;,\n                                                                   StandardScaler()),\n                                                                  (&#x27;pca&#x27;,\n                                                                   PCA(n_components=2,\n                                                                       random_state=717))]),\n                                                  [&#x27;VehicleAge...\n                                                                                 sparse_output=False)),\n                                                                  (&#x27;scaler&#x27;,\n                                                                   StandardScaler())]),\n                                                  [&#x27;Auction&#x27;, &#x27;Color&#x27;,\n                                                   &#x27;Transmission&#x27;, &#x27;WheelType&#x27;,\n                                                   &#x27;Nationality&#x27;, &#x27;Size&#x27;,\n                                                   &#x27;TopThreeAmericanName&#x27;,\n                                                   &#x27;PRIMEUNIT&#x27;, &#x27;AUCGUART&#x27;,\n                                                   &#x27;IsOnlineSale&#x27;, &#x27;Make&#x27;])])),\n                (&#x27;wrapper&#x27;,\n                 RFECV(cv=5, estimator=DecisionTreeClassifier(random_state=29),\n                       min_features_to_select=10, n_jobs=-1)),\n                (&#x27;model&#x27;, DecisionTreeClassifier(random_state=42))])</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;preprocessor: ColumnTransformer<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.compose.ColumnTransformer.html\">?<span>Documentation for preprocessor: ColumnTransformer</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>ColumnTransformer(transformers=[(&#x27;ord&#x27;,\n                                 Pipeline(steps=[(&#x27;encoder&#x27;,\n                                                  OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,\n                                                                 unknown_value=-1)),\n                                                 (&#x27;scaler&#x27;, StandardScaler())]),\n                                 [&#x27;VehBCost_cat_cm&#x27;, &#x27;WarrantyCost_cat_cm&#x27;]),\n                                (&#x27;num&#x27;,\n                                 Pipeline(steps=[(&#x27;scaler&#x27;, StandardScaler()),\n                                                 (&#x27;pca&#x27;,\n                                                  PCA(n_components=2,\n                                                      random_state=717))]),\n                                 [&#x27;VehicleAge&#x27;, &#x27;VehOdo&#x27;,\n                                  &#x27;MMRAcquisitionAuctio...\n                                  &#x27;MMRCurrentAuctionCleanPrice&#x27;,\n                                  &#x27;MMRCurrentRetailAveragePrice&#x27;,\n                                  &#x27;MMRCurrentRetailCleanPrice&#x27;]),\n                                (&#x27;nom&#x27;,\n                                 Pipeline(steps=[(&#x27;encoder&#x27;,\n                                                  OneHotEncoder(drop=&#x27;first&#x27;,\n                                                                handle_unknown=&#x27;ignore&#x27;,\n                                                                sparse_output=False)),\n                                                 (&#x27;scaler&#x27;, StandardScaler())]),\n                                 [&#x27;Auction&#x27;, &#x27;Color&#x27;, &#x27;Transmission&#x27;,\n                                  &#x27;WheelType&#x27;, &#x27;Nationality&#x27;, &#x27;Size&#x27;,\n                                  &#x27;TopThreeAmericanName&#x27;, &#x27;PRIMEUNIT&#x27;,\n                                  &#x27;AUCGUART&#x27;, &#x27;IsOnlineSale&#x27;, &#x27;Make&#x27;])])</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">ord</label><div class=\"sk-toggleable__content fitted\"><pre>[&#x27;VehBCost_cat_cm&#x27;, &#x27;WarrantyCost_cat_cm&#x27;]</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;OrdinalEncoder<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.preprocessing.OrdinalEncoder.html\">?<span>Documentation for OrdinalEncoder</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;, unknown_value=-1)</pre></div> </div></div><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;StandardScaler<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.preprocessing.StandardScaler.html\">?<span>Documentation for StandardScaler</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>StandardScaler()</pre></div> </div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">num</label><div class=\"sk-toggleable__content fitted\"><pre>[&#x27;VehicleAge&#x27;, &#x27;VehOdo&#x27;, &#x27;MMRAcquisitionAuctionAveragePrice&#x27;, &#x27;MMRAcquisitionAuctionCleanPrice&#x27;, &#x27;MMRAcquisitionRetailAveragePrice&#x27;, &#x27;MMRAcquisitonRetailCleanPrice&#x27;, &#x27;MMRCurrentAuctionAveragePrice&#x27;, &#x27;MMRCurrentAuctionCleanPrice&#x27;, &#x27;MMRCurrentRetailAveragePrice&#x27;, &#x27;MMRCurrentRetailCleanPrice&#x27;]</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;StandardScaler<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.preprocessing.StandardScaler.html\">?<span>Documentation for StandardScaler</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>StandardScaler()</pre></div> </div></div><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" ><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;PCA<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.decomposition.PCA.html\">?<span>Documentation for PCA</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>PCA(n_components=2, random_state=717)</pre></div> </div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" ><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">nom</label><div class=\"sk-toggleable__content fitted\"><pre>[&#x27;Auction&#x27;, &#x27;Color&#x27;, &#x27;Transmission&#x27;, &#x27;WheelType&#x27;, &#x27;Nationality&#x27;, &#x27;Size&#x27;, &#x27;TopThreeAmericanName&#x27;, &#x27;PRIMEUNIT&#x27;, &#x27;AUCGUART&#x27;, &#x27;IsOnlineSale&#x27;, &#x27;Make&#x27;]</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-10\" type=\"checkbox\" ><label for=\"sk-estimator-id-10\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;OneHotEncoder<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.preprocessing.OneHotEncoder.html\">?<span>Documentation for OneHotEncoder</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>OneHotEncoder(drop=&#x27;first&#x27;, handle_unknown=&#x27;ignore&#x27;, sparse_output=False)</pre></div> </div></div><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-11\" type=\"checkbox\" ><label for=\"sk-estimator-id-11\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;StandardScaler<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.preprocessing.StandardScaler.html\">?<span>Documentation for StandardScaler</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>StandardScaler()</pre></div> </div></div></div></div></div></div></div></div></div><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-12\" type=\"checkbox\" ><label for=\"sk-estimator-id-12\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;wrapper: RFECV<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.feature_selection.RFECV.html\">?<span>Documentation for wrapper: RFECV</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>RFECV(cv=5, estimator=DecisionTreeClassifier(random_state=29),\n      min_features_to_select=10, n_jobs=-1)</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-13\" type=\"checkbox\" ><label for=\"sk-estimator-id-13\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">estimator: DecisionTreeClassifier</label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeClassifier(random_state=29)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-14\" type=\"checkbox\" ><label for=\"sk-estimator-id-14\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;DecisionTreeClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.tree.DecisionTreeClassifier.html\">?<span>Documentation for DecisionTreeClassifier</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeClassifier(random_state=29)</pre></div> </div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-15\" type=\"checkbox\" ><label for=\"sk-estimator-id-15\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;DecisionTreeClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.tree.DecisionTreeClassifier.html\">?<span>Documentation for DecisionTreeClassifier</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeClassifier(random_state=42)</pre></div> </div></div></div></div></div></div>"},"metadata":{}}],"execution_count":33},{"cell_type":"code","source":"pipe_1 = pipeline_1.fit(X_train, y_train)\npipe_1[:-1].get_feature_names_out().tolist()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T07:07:31.138004Z","iopub.execute_input":"2024-11-20T07:07:31.138342Z","iopub.status.idle":"2024-11-20T07:08:32.871784Z","shell.execute_reply.started":"2024-11-20T07:07:31.138309Z","shell.execute_reply":"2024-11-20T07:08:32.870753Z"}},"outputs":[{"execution_count":34,"output_type":"execute_result","data":{"text/plain":"['ord__VehBCost_cat_cm',\n 'ord__WarrantyCost_cat_cm',\n 'num__pca0',\n 'num__pca1',\n 'nom__Auction_MANHEIM',\n 'nom__Auction_OTHER',\n 'nom__Color_BLACK',\n 'nom__Color_BLUE',\n 'nom__Color_GOLD',\n 'nom__Color_GREEN',\n 'nom__Color_GREY',\n 'nom__Color_MAROON',\n 'nom__Color_OTHER',\n 'nom__Color_RED',\n 'nom__Color_SILVER',\n 'nom__Color_WHITE',\n 'nom__Transmission_MANUAL',\n 'nom__WheelType_Covers',\n 'nom__Nationality_OTHER ASIAN',\n 'nom__Size_LARGE',\n 'nom__Size_LARGE TRUCK',\n 'nom__Size_MEDIUM',\n 'nom__Size_MEDIUM SUV',\n 'nom__Size_SMALL SUV',\n 'nom__Size_SMALL TRUCK',\n 'nom__Size_VAN',\n 'nom__TopThreeAmericanName_FORD',\n 'nom__TopThreeAmericanName_GM',\n 'nom__TopThreeAmericanName_OTHER',\n 'nom__PRIMEUNIT_unknown',\n 'nom__IsOnlineSale_1.0',\n 'nom__Make_CHRYSLER',\n 'nom__Make_DODGE',\n 'nom__Make_FORD',\n 'nom__Make_HYUNDAI',\n 'nom__Make_JEEP',\n 'nom__Make_KIA',\n 'nom__Make_NISSAN',\n 'nom__Make_OTHER',\n 'nom__Make_PONTIAC',\n 'nom__Make_SATURN',\n 'nom__Make_SUZUKI']"},"metadata":{}}],"execution_count":34},{"cell_type":"code","source":"# Define the preprocessing steps for numerical and categorical features separately\nnumerical_preprocessing_2 = Pipeline(steps=[\n    ('scaler', z_score),  # Scale numerical features\n    ('LDA', lda)])  # Feature extraction on numerical features\n\nordinal_preprocessing_2 = Pipeline(steps=[\n    ('encoder', ordinal_encoder),  # ordinal_encoder for chimerged  features\n    ('scaler', z_score)])  # Scale encoded features\n\nnominal_preprocessing_2 = Pipeline(steps=[\n    ('encoder', one_hot_encoder),  # One-hot encode nominal features\n    ('scaler', z_score)])  # Scale encoded features\n\n\n\n# Define the ColumnTransformer for numerical and categorical features\npreprocessor_2 = ColumnTransformer(transformers=[\n    (\"ord\", ordinal_preprocessing_2, ordinal_columns),\n    ('num', numerical_preprocessing_2, continuous_columns),\n    ('nom', nominal_preprocessing_2, categorical_columns),\n], remainder='drop')  # Passthrough any columns not specified\n\n\npipeline_2 = Pipeline(steps=[\n    ('preprocessor', preprocessor_2),\n    ('wrapper', wrapper),\n    ('model', DecisionTreeClassifier(random_state=42))])\n\n# Train the pipeline\npipe_2 = pipeline_2.fit(X_train, y_train)\npipe_2[:-1].get_feature_names_out().tolist()\n\n# Use the pipeline for prediction or other tasks\npredictions_2 = pipe_2.predict(X_test)\n\nfrom sklearn.metrics import accuracy_score\n\n# Calculate accuracy\naccuracy = accuracy_score(y_test, predictions_2)\nprint(\"Accuracy:\", accuracy)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T07:08:32.873241Z","iopub.execute_input":"2024-11-20T07:08:32.873655Z","iopub.status.idle":"2024-11-20T07:09:13.234673Z","shell.execute_reply.started":"2024-11-20T07:08:32.873611Z","shell.execute_reply":"2024-11-20T07:09:13.233562Z"}},"outputs":[{"name":"stdout","text":"Accuracy: 0.7919616350765015\n","output_type":"stream"}],"execution_count":35},{"cell_type":"code","source":"pipe_2","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T07:09:13.235847Z","iopub.execute_input":"2024-11-20T07:09:13.236253Z","iopub.status.idle":"2024-11-20T07:09:13.334865Z","shell.execute_reply.started":"2024-11-20T07:09:13.236219Z","shell.execute_reply":"2024-11-20T07:09:13.333809Z"}},"outputs":[{"execution_count":36,"output_type":"execute_result","data":{"text/plain":"Pipeline(steps=[('preprocessor',\n                 ColumnTransformer(transformers=[('ord',\n                                                  Pipeline(steps=[('encoder',\n                                                                   OrdinalEncoder(handle_unknown='use_encoded_value',\n                                                                                  unknown_value=-1)),\n                                                                  ('scaler',\n                                                                   StandardScaler())]),\n                                                  ['VehBCost_cat_cm',\n                                                   'WarrantyCost_cat_cm']),\n                                                 ('num',\n                                                  Pipeline(steps=[('scaler',\n                                                                   StandardScaler()),\n                                                                  ('LDA',\n                                                                   LinearDiscriminantAnalysis())]),\n                                                  ['VehicleAge', 'VehOd...\n                                                                                 sparse_output=False)),\n                                                                  ('scaler',\n                                                                   StandardScaler())]),\n                                                  ['Auction', 'Color',\n                                                   'Transmission', 'WheelType',\n                                                   'Nationality', 'Size',\n                                                   'TopThreeAmericanName',\n                                                   'PRIMEUNIT', 'AUCGUART',\n                                                   'IsOnlineSale', 'Make'])])),\n                ('wrapper',\n                 RFECV(cv=5, estimator=DecisionTreeClassifier(random_state=29),\n                       min_features_to_select=10, n_jobs=-1)),\n                ('model', DecisionTreeClassifier(random_state=42))])","text/html":"<style>#sk-container-id-2 {\n  /* Definition of color scheme common for light and dark mode */\n  --sklearn-color-text: black;\n  --sklearn-color-line: gray;\n  /* Definition of color scheme for unfitted estimators */\n  --sklearn-color-unfitted-level-0: #fff5e6;\n  --sklearn-color-unfitted-level-1: #f6e4d2;\n  --sklearn-color-unfitted-level-2: #ffe0b3;\n  --sklearn-color-unfitted-level-3: chocolate;\n  /* Definition of color scheme for fitted estimators */\n  --sklearn-color-fitted-level-0: #f0f8ff;\n  --sklearn-color-fitted-level-1: #d4ebff;\n  --sklearn-color-fitted-level-2: #b3dbfd;\n  --sklearn-color-fitted-level-3: cornflowerblue;\n\n  /* Specific color for light theme */\n  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-icon: #696969;\n\n  @media (prefers-color-scheme: dark) {\n    /* Redefinition of color scheme for dark theme */\n    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-icon: #878787;\n  }\n}\n\n#sk-container-id-2 {\n  color: var(--sklearn-color-text);\n}\n\n#sk-container-id-2 pre {\n  padding: 0;\n}\n\n#sk-container-id-2 input.sk-hidden--visually {\n  border: 0;\n  clip: rect(1px 1px 1px 1px);\n  clip: rect(1px, 1px, 1px, 1px);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}\n\n#sk-container-id-2 div.sk-dashed-wrapped {\n  border: 1px dashed var(--sklearn-color-line);\n  margin: 0 0.4em 0.5em 0.4em;\n  box-sizing: border-box;\n  padding-bottom: 0.4em;\n  background-color: var(--sklearn-color-background);\n}\n\n#sk-container-id-2 div.sk-container {\n  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n     but bootstrap.min.css set `[hidden] { display: none !important; }`\n     so we also need the `!important` here to be able to override the\n     default hidden behavior on the sphinx rendered scikit-learn.org.\n     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n  display: inline-block !important;\n  position: relative;\n}\n\n#sk-container-id-2 div.sk-text-repr-fallback {\n  display: none;\n}\n\ndiv.sk-parallel-item,\ndiv.sk-serial,\ndiv.sk-item {\n  /* draw centered vertical line to link estimators */\n  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n  background-size: 2px 100%;\n  background-repeat: no-repeat;\n  background-position: center center;\n}\n\n/* Parallel-specific style estimator block */\n\n#sk-container-id-2 div.sk-parallel-item::after {\n  content: \"\";\n  width: 100%;\n  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n  flex-grow: 1;\n}\n\n#sk-container-id-2 div.sk-parallel {\n  display: flex;\n  align-items: stretch;\n  justify-content: center;\n  background-color: var(--sklearn-color-background);\n  position: relative;\n}\n\n#sk-container-id-2 div.sk-parallel-item {\n  display: flex;\n  flex-direction: column;\n}\n\n#sk-container-id-2 div.sk-parallel-item:first-child::after {\n  align-self: flex-end;\n  width: 50%;\n}\n\n#sk-container-id-2 div.sk-parallel-item:last-child::after {\n  align-self: flex-start;\n  width: 50%;\n}\n\n#sk-container-id-2 div.sk-parallel-item:only-child::after {\n  width: 0;\n}\n\n/* Serial-specific style estimator block */\n\n#sk-container-id-2 div.sk-serial {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: var(--sklearn-color-background);\n  padding-right: 1em;\n  padding-left: 1em;\n}\n\n\n/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\nclickable and can be expanded/collapsed.\n- Pipeline and ColumnTransformer use this feature and define the default style\n- Estimators will overwrite some part of the style using the `sk-estimator` class\n*/\n\n/* Pipeline and ColumnTransformer style (default) */\n\n#sk-container-id-2 div.sk-toggleable {\n  /* Default theme specific background. It is overwritten whether we have a\n  specific estimator or a Pipeline/ColumnTransformer */\n  background-color: var(--sklearn-color-background);\n}\n\n/* Toggleable label */\n#sk-container-id-2 label.sk-toggleable__label {\n  cursor: pointer;\n  display: block;\n  width: 100%;\n  margin-bottom: 0;\n  padding: 0.5em;\n  box-sizing: border-box;\n  text-align: center;\n}\n\n#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n  /* Arrow on the left of the label */\n  content: \"▸\";\n  float: left;\n  margin-right: 0.25em;\n  color: var(--sklearn-color-icon);\n}\n\n#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n  color: var(--sklearn-color-text);\n}\n\n/* Toggleable content - dropdown */\n\n#sk-container-id-2 div.sk-toggleable__content {\n  max-height: 0;\n  max-width: 0;\n  overflow: hidden;\n  text-align: left;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-2 div.sk-toggleable__content.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-2 div.sk-toggleable__content pre {\n  margin: 0.2em;\n  border-radius: 0.25em;\n  color: var(--sklearn-color-text);\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n  /* unfitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n  /* Expand drop-down */\n  max-height: 200px;\n  max-width: 100%;\n  overflow: auto;\n}\n\n#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n  content: \"▾\";\n}\n\n/* Pipeline/ColumnTransformer-specific style */\n\n#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator-specific style */\n\n/* Colorize estimator box */\n#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n#sk-container-id-2 div.sk-label label {\n  /* The background is the default theme color */\n  color: var(--sklearn-color-text-on-default-background);\n}\n\n/* On hover, darken the color of the background */\n#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n/* Label box, darken color on hover, fitted */\n#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator label */\n\n#sk-container-id-2 div.sk-label label {\n  font-family: monospace;\n  font-weight: bold;\n  display: inline-block;\n  line-height: 1.2em;\n}\n\n#sk-container-id-2 div.sk-label-container {\n  text-align: center;\n}\n\n/* Estimator-specific */\n#sk-container-id-2 div.sk-estimator {\n  font-family: monospace;\n  border: 1px dotted var(--sklearn-color-border-box);\n  border-radius: 0.25em;\n  box-sizing: border-box;\n  margin-bottom: 0.5em;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-2 div.sk-estimator.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n/* on hover */\n#sk-container-id-2 div.sk-estimator:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-2 div.sk-estimator.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Specification for estimator info (e.g. \"i\" and \"?\") */\n\n/* Common style for \"i\" and \"?\" */\n\n.sk-estimator-doc-link,\na:link.sk-estimator-doc-link,\na:visited.sk-estimator-doc-link {\n  float: right;\n  font-size: smaller;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1em;\n  height: 1em;\n  width: 1em;\n  text-decoration: none !important;\n  margin-left: 1ex;\n  /* unfitted */\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n  color: var(--sklearn-color-unfitted-level-1);\n}\n\n.sk-estimator-doc-link.fitted,\na:link.sk-estimator-doc-link.fitted,\na:visited.sk-estimator-doc-link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\ndiv.sk-estimator:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\ndiv.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n/* Span, style for the box shown on hovering the info icon */\n.sk-estimator-doc-link span {\n  display: none;\n  z-index: 9999;\n  position: relative;\n  font-weight: normal;\n  right: .2ex;\n  padding: .5ex;\n  margin: .5ex;\n  width: min-content;\n  min-width: 20ex;\n  max-width: 50ex;\n  color: var(--sklearn-color-text);\n  box-shadow: 2pt 2pt 4pt #999;\n  /* unfitted */\n  background: var(--sklearn-color-unfitted-level-0);\n  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n}\n\n.sk-estimator-doc-link.fitted span {\n  /* fitted */\n  background: var(--sklearn-color-fitted-level-0);\n  border: var(--sklearn-color-fitted-level-3);\n}\n\n.sk-estimator-doc-link:hover span {\n  display: block;\n}\n\n/* \"?\"-specific style due to the `<a>` HTML tag */\n\n#sk-container-id-2 a.estimator_doc_link {\n  float: right;\n  font-size: 1rem;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1rem;\n  height: 1rem;\n  width: 1rem;\n  text-decoration: none;\n  /* unfitted */\n  color: var(--sklearn-color-unfitted-level-1);\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n}\n\n#sk-container-id-2 a.estimator_doc_link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\n#sk-container-id-2 a.estimator_doc_link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n}\n</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n                 ColumnTransformer(transformers=[(&#x27;ord&#x27;,\n                                                  Pipeline(steps=[(&#x27;encoder&#x27;,\n                                                                   OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,\n                                                                                  unknown_value=-1)),\n                                                                  (&#x27;scaler&#x27;,\n                                                                   StandardScaler())]),\n                                                  [&#x27;VehBCost_cat_cm&#x27;,\n                                                   &#x27;WarrantyCost_cat_cm&#x27;]),\n                                                 (&#x27;num&#x27;,\n                                                  Pipeline(steps=[(&#x27;scaler&#x27;,\n                                                                   StandardScaler()),\n                                                                  (&#x27;LDA&#x27;,\n                                                                   LinearDiscriminantAnalysis())]),\n                                                  [&#x27;VehicleAge&#x27;, &#x27;VehOd...\n                                                                                 sparse_output=False)),\n                                                                  (&#x27;scaler&#x27;,\n                                                                   StandardScaler())]),\n                                                  [&#x27;Auction&#x27;, &#x27;Color&#x27;,\n                                                   &#x27;Transmission&#x27;, &#x27;WheelType&#x27;,\n                                                   &#x27;Nationality&#x27;, &#x27;Size&#x27;,\n                                                   &#x27;TopThreeAmericanName&#x27;,\n                                                   &#x27;PRIMEUNIT&#x27;, &#x27;AUCGUART&#x27;,\n                                                   &#x27;IsOnlineSale&#x27;, &#x27;Make&#x27;])])),\n                (&#x27;wrapper&#x27;,\n                 RFECV(cv=5, estimator=DecisionTreeClassifier(random_state=29),\n                       min_features_to_select=10, n_jobs=-1)),\n                (&#x27;model&#x27;, DecisionTreeClassifier(random_state=42))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-16\" type=\"checkbox\" ><label for=\"sk-estimator-id-16\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;Pipeline<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.pipeline.Pipeline.html\">?<span>Documentation for Pipeline</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n                 ColumnTransformer(transformers=[(&#x27;ord&#x27;,\n                                                  Pipeline(steps=[(&#x27;encoder&#x27;,\n                                                                   OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,\n                                                                                  unknown_value=-1)),\n                                                                  (&#x27;scaler&#x27;,\n                                                                   StandardScaler())]),\n                                                  [&#x27;VehBCost_cat_cm&#x27;,\n                                                   &#x27;WarrantyCost_cat_cm&#x27;]),\n                                                 (&#x27;num&#x27;,\n                                                  Pipeline(steps=[(&#x27;scaler&#x27;,\n                                                                   StandardScaler()),\n                                                                  (&#x27;LDA&#x27;,\n                                                                   LinearDiscriminantAnalysis())]),\n                                                  [&#x27;VehicleAge&#x27;, &#x27;VehOd...\n                                                                                 sparse_output=False)),\n                                                                  (&#x27;scaler&#x27;,\n                                                                   StandardScaler())]),\n                                                  [&#x27;Auction&#x27;, &#x27;Color&#x27;,\n                                                   &#x27;Transmission&#x27;, &#x27;WheelType&#x27;,\n                                                   &#x27;Nationality&#x27;, &#x27;Size&#x27;,\n                                                   &#x27;TopThreeAmericanName&#x27;,\n                                                   &#x27;PRIMEUNIT&#x27;, &#x27;AUCGUART&#x27;,\n                                                   &#x27;IsOnlineSale&#x27;, &#x27;Make&#x27;])])),\n                (&#x27;wrapper&#x27;,\n                 RFECV(cv=5, estimator=DecisionTreeClassifier(random_state=29),\n                       min_features_to_select=10, n_jobs=-1)),\n                (&#x27;model&#x27;, DecisionTreeClassifier(random_state=42))])</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-17\" type=\"checkbox\" ><label for=\"sk-estimator-id-17\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;preprocessor: ColumnTransformer<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.compose.ColumnTransformer.html\">?<span>Documentation for preprocessor: ColumnTransformer</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>ColumnTransformer(transformers=[(&#x27;ord&#x27;,\n                                 Pipeline(steps=[(&#x27;encoder&#x27;,\n                                                  OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,\n                                                                 unknown_value=-1)),\n                                                 (&#x27;scaler&#x27;, StandardScaler())]),\n                                 [&#x27;VehBCost_cat_cm&#x27;, &#x27;WarrantyCost_cat_cm&#x27;]),\n                                (&#x27;num&#x27;,\n                                 Pipeline(steps=[(&#x27;scaler&#x27;, StandardScaler()),\n                                                 (&#x27;LDA&#x27;,\n                                                  LinearDiscriminantAnalysis())]),\n                                 [&#x27;VehicleAge&#x27;, &#x27;VehOdo&#x27;,\n                                  &#x27;MMRAcquisitionAuctionAverage...\n                                  &#x27;MMRCurrentAuctionCleanPrice&#x27;,\n                                  &#x27;MMRCurrentRetailAveragePrice&#x27;,\n                                  &#x27;MMRCurrentRetailCleanPrice&#x27;]),\n                                (&#x27;nom&#x27;,\n                                 Pipeline(steps=[(&#x27;encoder&#x27;,\n                                                  OneHotEncoder(drop=&#x27;first&#x27;,\n                                                                handle_unknown=&#x27;ignore&#x27;,\n                                                                sparse_output=False)),\n                                                 (&#x27;scaler&#x27;, StandardScaler())]),\n                                 [&#x27;Auction&#x27;, &#x27;Color&#x27;, &#x27;Transmission&#x27;,\n                                  &#x27;WheelType&#x27;, &#x27;Nationality&#x27;, &#x27;Size&#x27;,\n                                  &#x27;TopThreeAmericanName&#x27;, &#x27;PRIMEUNIT&#x27;,\n                                  &#x27;AUCGUART&#x27;, &#x27;IsOnlineSale&#x27;, &#x27;Make&#x27;])])</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-18\" type=\"checkbox\" ><label for=\"sk-estimator-id-18\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">ord</label><div class=\"sk-toggleable__content fitted\"><pre>[&#x27;VehBCost_cat_cm&#x27;, &#x27;WarrantyCost_cat_cm&#x27;]</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-19\" type=\"checkbox\" ><label for=\"sk-estimator-id-19\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;OrdinalEncoder<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.preprocessing.OrdinalEncoder.html\">?<span>Documentation for OrdinalEncoder</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;, unknown_value=-1)</pre></div> </div></div><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-20\" type=\"checkbox\" ><label for=\"sk-estimator-id-20\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;StandardScaler<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.preprocessing.StandardScaler.html\">?<span>Documentation for StandardScaler</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>StandardScaler()</pre></div> </div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-21\" type=\"checkbox\" ><label for=\"sk-estimator-id-21\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">num</label><div class=\"sk-toggleable__content fitted\"><pre>[&#x27;VehicleAge&#x27;, &#x27;VehOdo&#x27;, &#x27;MMRAcquisitionAuctionAveragePrice&#x27;, &#x27;MMRAcquisitionAuctionCleanPrice&#x27;, &#x27;MMRAcquisitionRetailAveragePrice&#x27;, &#x27;MMRAcquisitonRetailCleanPrice&#x27;, &#x27;MMRCurrentAuctionAveragePrice&#x27;, &#x27;MMRCurrentAuctionCleanPrice&#x27;, &#x27;MMRCurrentRetailAveragePrice&#x27;, &#x27;MMRCurrentRetailCleanPrice&#x27;]</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-22\" type=\"checkbox\" ><label for=\"sk-estimator-id-22\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;StandardScaler<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.preprocessing.StandardScaler.html\">?<span>Documentation for StandardScaler</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>StandardScaler()</pre></div> </div></div><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-23\" type=\"checkbox\" ><label for=\"sk-estimator-id-23\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;LinearDiscriminantAnalysis<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.html\">?<span>Documentation for LinearDiscriminantAnalysis</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>LinearDiscriminantAnalysis()</pre></div> </div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-24\" type=\"checkbox\" ><label for=\"sk-estimator-id-24\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">nom</label><div class=\"sk-toggleable__content fitted\"><pre>[&#x27;Auction&#x27;, &#x27;Color&#x27;, &#x27;Transmission&#x27;, &#x27;WheelType&#x27;, &#x27;Nationality&#x27;, &#x27;Size&#x27;, &#x27;TopThreeAmericanName&#x27;, &#x27;PRIMEUNIT&#x27;, &#x27;AUCGUART&#x27;, &#x27;IsOnlineSale&#x27;, &#x27;Make&#x27;]</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-25\" type=\"checkbox\" ><label for=\"sk-estimator-id-25\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;OneHotEncoder<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.preprocessing.OneHotEncoder.html\">?<span>Documentation for OneHotEncoder</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>OneHotEncoder(drop=&#x27;first&#x27;, handle_unknown=&#x27;ignore&#x27;, sparse_output=False)</pre></div> </div></div><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-26\" type=\"checkbox\" ><label for=\"sk-estimator-id-26\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;StandardScaler<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.preprocessing.StandardScaler.html\">?<span>Documentation for StandardScaler</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>StandardScaler()</pre></div> </div></div></div></div></div></div></div></div></div><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-27\" type=\"checkbox\" ><label for=\"sk-estimator-id-27\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;wrapper: RFECV<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.feature_selection.RFECV.html\">?<span>Documentation for wrapper: RFECV</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>RFECV(cv=5, estimator=DecisionTreeClassifier(random_state=29),\n      min_features_to_select=10, n_jobs=-1)</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-28\" type=\"checkbox\" ><label for=\"sk-estimator-id-28\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">estimator: DecisionTreeClassifier</label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeClassifier(random_state=29)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-29\" type=\"checkbox\" ><label for=\"sk-estimator-id-29\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;DecisionTreeClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.tree.DecisionTreeClassifier.html\">?<span>Documentation for DecisionTreeClassifier</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeClassifier(random_state=29)</pre></div> </div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-30\" type=\"checkbox\" ><label for=\"sk-estimator-id-30\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;DecisionTreeClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.tree.DecisionTreeClassifier.html\">?<span>Documentation for DecisionTreeClassifier</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeClassifier(random_state=42)</pre></div> </div></div></div></div></div></div>"},"metadata":{}}],"execution_count":36},{"cell_type":"code","source":"pipe_2 = pipeline_2.fit(X_train, y_train)\npipe_2[:-1].get_feature_names_out().tolist()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T07:09:13.336374Z","iopub.execute_input":"2024-11-20T07:09:13.336664Z","iopub.status.idle":"2024-11-20T07:09:53.324282Z","shell.execute_reply.started":"2024-11-20T07:09:13.336635Z","shell.execute_reply":"2024-11-20T07:09:53.323200Z"}},"outputs":[{"execution_count":37,"output_type":"execute_result","data":{"text/plain":"['ord__VehBCost_cat_cm',\n 'ord__WarrantyCost_cat_cm',\n 'num__lineardiscriminantanalysis0',\n 'nom__Auction_MANHEIM',\n 'nom__Auction_OTHER',\n 'nom__Color_BLACK',\n 'nom__Color_BLUE',\n 'nom__Color_GOLD',\n 'nom__Color_GREEN',\n 'nom__Color_GREY',\n 'nom__Color_MAROON',\n 'nom__Color_OTHER',\n 'nom__Color_RED',\n 'nom__Color_SILVER',\n 'nom__Color_WHITE',\n 'nom__Transmission_MANUAL',\n 'nom__WheelType_Covers',\n 'nom__WheelType_Special',\n 'nom__Nationality_OTHER ASIAN',\n 'nom__Nationality_OTHERS',\n 'nom__Size_CROSSOVER',\n 'nom__Size_LARGE',\n 'nom__Size_LARGE SUV',\n 'nom__Size_LARGE TRUCK',\n 'nom__Size_MEDIUM',\n 'nom__Size_MEDIUM SUV',\n 'nom__Size_SMALL SUV',\n 'nom__Size_SMALL TRUCK',\n 'nom__Size_SPORTS',\n 'nom__Size_VAN',\n 'nom__TopThreeAmericanName_FORD',\n 'nom__TopThreeAmericanName_GM',\n 'nom__TopThreeAmericanName_OTHER',\n 'nom__PRIMEUNIT_unknown',\n 'nom__AUCGUART_unknown',\n 'nom__IsOnlineSale_1.0',\n 'nom__Make_CHRYSLER',\n 'nom__Make_DODGE',\n 'nom__Make_FORD',\n 'nom__Make_HYUNDAI',\n 'nom__Make_JEEP',\n 'nom__Make_KIA',\n 'nom__Make_MAZDA',\n 'nom__Make_MERCURY',\n 'nom__Make_MITSUBISHI',\n 'nom__Make_NISSAN',\n 'nom__Make_OTHER',\n 'nom__Make_PONTIAC',\n 'nom__Make_SATURN',\n 'nom__Make_SUZUKI']"},"metadata":{}}],"execution_count":37},{"cell_type":"code","source":"from sklearn.metrics import classification_report\n\n# Print a detailed classification report\nprint(classification_report(y_test, predictions_2))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T07:09:53.325521Z","iopub.execute_input":"2024-11-20T07:09:53.325861Z","iopub.status.idle":"2024-11-20T07:09:53.374132Z","shell.execute_reply.started":"2024-11-20T07:09:53.325829Z","shell.execute_reply":"2024-11-20T07:09:53.373141Z"}},"outputs":[{"name":"stdout","text":"              precision    recall  f1-score   support\n\n           0       0.89      0.87      0.88     19212\n           1       0.18      0.20      0.19      2683\n\n    accuracy                           0.79     21895\n   macro avg       0.54      0.54      0.54     21895\nweighted avg       0.80      0.79      0.80     21895\n\n","output_type":"stream"}],"execution_count":38},{"cell_type":"code","source":"# Define the preprocessing steps for numerical and categorical features separately\nnumerical_preprocessing_3 = Pipeline(steps=[\n    ('scaler', z_score),  # Scale numerical features\n    ('LDA', lda)])  # Feature extraction on numerical features\n\n\n\nnominal_preprocessing_3 = Pipeline(steps=[\n    ('encoder', one_hot_encoder),  # One-hot encode nominal features\n    ('scaler', z_score)])  # Scale encoded features\n\n\n\n# Define the ColumnTransformer for numerical and categorical features\npreprocessor_3 = ColumnTransformer(transformers=[\n    ('num', numerical_preprocessing_3, continuous_columns_trans),\n    ('nom', nominal_preprocessing_3, categorical_columns_trans),\n], remainder='drop')  # Passthrough any columns not specified\n\n\npipeline_3 = Pipeline(steps=[\n    ('preprocessor', preprocessor_3),\n    ('wrapper', wrapper),\n    ('model', DecisionTreeClassifier(random_state=42))])\n\n# Train the pipeline\npipe_3 = pipeline_3.fit(transformed_train, y_train)\npipe_3[:-1].get_feature_names_out().tolist()\n\n# Use the pipeline for prediction or other tasks\npredictions_3 = pipe_3.predict(transformed_test)\n\nfrom sklearn.metrics import accuracy_score\n\n# Calculate accuracy\naccuracy = accuracy_score(y_test, predictions_3)\nprint(\"Accuracy:\", accuracy)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T07:33:59.503874Z","iopub.execute_input":"2024-11-20T07:33:59.504331Z","iopub.status.idle":"2024-11-20T07:34:46.574050Z","shell.execute_reply.started":"2024-11-20T07:33:59.504295Z","shell.execute_reply":"2024-11-20T07:34:46.572720Z"}},"outputs":[{"name":"stdout","text":"Accuracy: 0.5915049097967573\n","output_type":"stream"}],"execution_count":40},{"cell_type":"code","source":"pipe_3","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T07:37:16.236720Z","iopub.execute_input":"2024-11-20T07:37:16.237161Z","iopub.status.idle":"2024-11-20T07:37:16.327833Z","shell.execute_reply.started":"2024-11-20T07:37:16.237122Z","shell.execute_reply":"2024-11-20T07:37:16.326748Z"}},"outputs":[{"execution_count":41,"output_type":"execute_result","data":{"text/plain":"Pipeline(steps=[('preprocessor',\n                 ColumnTransformer(transformers=[('num',\n                                                  Pipeline(steps=[('scaler',\n                                                                   StandardScaler()),\n                                                                  ('LDA',\n                                                                   LinearDiscriminantAnalysis())]),\n                                                  ['VehicleAge', 'VehOdo',\n                                                   'MMRAcquisitionAuctionAveragePrice',\n                                                   'MMRAcquisitionAuctionCleanPrice',\n                                                   'MMRAcquisitionRetailAveragePrice',\n                                                   'MMRAcquisitonRetailCleanPrice',\n                                                   'MMRCurrentAuctionAveragePrice',\n                                                   'MMR...\n                                                                                 sparse_output=False)),\n                                                                  ('scaler',\n                                                                   StandardScaler())]),\n                                                  ['Auction', 'Color',\n                                                   'Transmission', 'WheelType',\n                                                   'Nationality', 'Size',\n                                                   'TopThreeAmericanName',\n                                                   'PRIMEUNIT', 'AUCGUART',\n                                                   'IsOnlineSale', 'Make'])])),\n                ('wrapper',\n                 RFECV(cv=5, estimator=DecisionTreeClassifier(random_state=29),\n                       min_features_to_select=10, n_jobs=-1)),\n                ('model', DecisionTreeClassifier(random_state=42))])","text/html":"<style>#sk-container-id-3 {\n  /* Definition of color scheme common for light and dark mode */\n  --sklearn-color-text: black;\n  --sklearn-color-line: gray;\n  /* Definition of color scheme for unfitted estimators */\n  --sklearn-color-unfitted-level-0: #fff5e6;\n  --sklearn-color-unfitted-level-1: #f6e4d2;\n  --sklearn-color-unfitted-level-2: #ffe0b3;\n  --sklearn-color-unfitted-level-3: chocolate;\n  /* Definition of color scheme for fitted estimators */\n  --sklearn-color-fitted-level-0: #f0f8ff;\n  --sklearn-color-fitted-level-1: #d4ebff;\n  --sklearn-color-fitted-level-2: #b3dbfd;\n  --sklearn-color-fitted-level-3: cornflowerblue;\n\n  /* Specific color for light theme */\n  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-icon: #696969;\n\n  @media (prefers-color-scheme: dark) {\n    /* Redefinition of color scheme for dark theme */\n    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-icon: #878787;\n  }\n}\n\n#sk-container-id-3 {\n  color: var(--sklearn-color-text);\n}\n\n#sk-container-id-3 pre {\n  padding: 0;\n}\n\n#sk-container-id-3 input.sk-hidden--visually {\n  border: 0;\n  clip: rect(1px 1px 1px 1px);\n  clip: rect(1px, 1px, 1px, 1px);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}\n\n#sk-container-id-3 div.sk-dashed-wrapped {\n  border: 1px dashed var(--sklearn-color-line);\n  margin: 0 0.4em 0.5em 0.4em;\n  box-sizing: border-box;\n  padding-bottom: 0.4em;\n  background-color: var(--sklearn-color-background);\n}\n\n#sk-container-id-3 div.sk-container {\n  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n     but bootstrap.min.css set `[hidden] { display: none !important; }`\n     so we also need the `!important` here to be able to override the\n     default hidden behavior on the sphinx rendered scikit-learn.org.\n     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n  display: inline-block !important;\n  position: relative;\n}\n\n#sk-container-id-3 div.sk-text-repr-fallback {\n  display: none;\n}\n\ndiv.sk-parallel-item,\ndiv.sk-serial,\ndiv.sk-item {\n  /* draw centered vertical line to link estimators */\n  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n  background-size: 2px 100%;\n  background-repeat: no-repeat;\n  background-position: center center;\n}\n\n/* Parallel-specific style estimator block */\n\n#sk-container-id-3 div.sk-parallel-item::after {\n  content: \"\";\n  width: 100%;\n  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n  flex-grow: 1;\n}\n\n#sk-container-id-3 div.sk-parallel {\n  display: flex;\n  align-items: stretch;\n  justify-content: center;\n  background-color: var(--sklearn-color-background);\n  position: relative;\n}\n\n#sk-container-id-3 div.sk-parallel-item {\n  display: flex;\n  flex-direction: column;\n}\n\n#sk-container-id-3 div.sk-parallel-item:first-child::after {\n  align-self: flex-end;\n  width: 50%;\n}\n\n#sk-container-id-3 div.sk-parallel-item:last-child::after {\n  align-self: flex-start;\n  width: 50%;\n}\n\n#sk-container-id-3 div.sk-parallel-item:only-child::after {\n  width: 0;\n}\n\n/* Serial-specific style estimator block */\n\n#sk-container-id-3 div.sk-serial {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: var(--sklearn-color-background);\n  padding-right: 1em;\n  padding-left: 1em;\n}\n\n\n/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\nclickable and can be expanded/collapsed.\n- Pipeline and ColumnTransformer use this feature and define the default style\n- Estimators will overwrite some part of the style using the `sk-estimator` class\n*/\n\n/* Pipeline and ColumnTransformer style (default) */\n\n#sk-container-id-3 div.sk-toggleable {\n  /* Default theme specific background. It is overwritten whether we have a\n  specific estimator or a Pipeline/ColumnTransformer */\n  background-color: var(--sklearn-color-background);\n}\n\n/* Toggleable label */\n#sk-container-id-3 label.sk-toggleable__label {\n  cursor: pointer;\n  display: block;\n  width: 100%;\n  margin-bottom: 0;\n  padding: 0.5em;\n  box-sizing: border-box;\n  text-align: center;\n}\n\n#sk-container-id-3 label.sk-toggleable__label-arrow:before {\n  /* Arrow on the left of the label */\n  content: \"▸\";\n  float: left;\n  margin-right: 0.25em;\n  color: var(--sklearn-color-icon);\n}\n\n#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {\n  color: var(--sklearn-color-text);\n}\n\n/* Toggleable content - dropdown */\n\n#sk-container-id-3 div.sk-toggleable__content {\n  max-height: 0;\n  max-width: 0;\n  overflow: hidden;\n  text-align: left;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-3 div.sk-toggleable__content.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-3 div.sk-toggleable__content pre {\n  margin: 0.2em;\n  border-radius: 0.25em;\n  color: var(--sklearn-color-text);\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-3 div.sk-toggleable__content.fitted pre {\n  /* unfitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n  /* Expand drop-down */\n  max-height: 200px;\n  max-width: 100%;\n  overflow: auto;\n}\n\n#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n  content: \"▾\";\n}\n\n/* Pipeline/ColumnTransformer-specific style */\n\n#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-3 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator-specific style */\n\n/* Colorize estimator box */\n#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-3 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n#sk-container-id-3 div.sk-label label.sk-toggleable__label,\n#sk-container-id-3 div.sk-label label {\n  /* The background is the default theme color */\n  color: var(--sklearn-color-text-on-default-background);\n}\n\n/* On hover, darken the color of the background */\n#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n/* Label box, darken color on hover, fitted */\n#sk-container-id-3 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator label */\n\n#sk-container-id-3 div.sk-label label {\n  font-family: monospace;\n  font-weight: bold;\n  display: inline-block;\n  line-height: 1.2em;\n}\n\n#sk-container-id-3 div.sk-label-container {\n  text-align: center;\n}\n\n/* Estimator-specific */\n#sk-container-id-3 div.sk-estimator {\n  font-family: monospace;\n  border: 1px dotted var(--sklearn-color-border-box);\n  border-radius: 0.25em;\n  box-sizing: border-box;\n  margin-bottom: 0.5em;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-3 div.sk-estimator.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n/* on hover */\n#sk-container-id-3 div.sk-estimator:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-3 div.sk-estimator.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Specification for estimator info (e.g. \"i\" and \"?\") */\n\n/* Common style for \"i\" and \"?\" */\n\n.sk-estimator-doc-link,\na:link.sk-estimator-doc-link,\na:visited.sk-estimator-doc-link {\n  float: right;\n  font-size: smaller;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1em;\n  height: 1em;\n  width: 1em;\n  text-decoration: none !important;\n  margin-left: 1ex;\n  /* unfitted */\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n  color: var(--sklearn-color-unfitted-level-1);\n}\n\n.sk-estimator-doc-link.fitted,\na:link.sk-estimator-doc-link.fitted,\na:visited.sk-estimator-doc-link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\ndiv.sk-estimator:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\ndiv.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n/* Span, style for the box shown on hovering the info icon */\n.sk-estimator-doc-link span {\n  display: none;\n  z-index: 9999;\n  position: relative;\n  font-weight: normal;\n  right: .2ex;\n  padding: .5ex;\n  margin: .5ex;\n  width: min-content;\n  min-width: 20ex;\n  max-width: 50ex;\n  color: var(--sklearn-color-text);\n  box-shadow: 2pt 2pt 4pt #999;\n  /* unfitted */\n  background: var(--sklearn-color-unfitted-level-0);\n  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n}\n\n.sk-estimator-doc-link.fitted span {\n  /* fitted */\n  background: var(--sklearn-color-fitted-level-0);\n  border: var(--sklearn-color-fitted-level-3);\n}\n\n.sk-estimator-doc-link:hover span {\n  display: block;\n}\n\n/* \"?\"-specific style due to the `<a>` HTML tag */\n\n#sk-container-id-3 a.estimator_doc_link {\n  float: right;\n  font-size: 1rem;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1rem;\n  height: 1rem;\n  width: 1rem;\n  text-decoration: none;\n  /* unfitted */\n  color: var(--sklearn-color-unfitted-level-1);\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n}\n\n#sk-container-id-3 a.estimator_doc_link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\n#sk-container-id-3 a.estimator_doc_link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n#sk-container-id-3 a.estimator_doc_link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n}\n</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n                 ColumnTransformer(transformers=[(&#x27;num&#x27;,\n                                                  Pipeline(steps=[(&#x27;scaler&#x27;,\n                                                                   StandardScaler()),\n                                                                  (&#x27;LDA&#x27;,\n                                                                   LinearDiscriminantAnalysis())]),\n                                                  [&#x27;VehicleAge&#x27;, &#x27;VehOdo&#x27;,\n                                                   &#x27;MMRAcquisitionAuctionAveragePrice&#x27;,\n                                                   &#x27;MMRAcquisitionAuctionCleanPrice&#x27;,\n                                                   &#x27;MMRAcquisitionRetailAveragePrice&#x27;,\n                                                   &#x27;MMRAcquisitonRetailCleanPrice&#x27;,\n                                                   &#x27;MMRCurrentAuctionAveragePrice&#x27;,\n                                                   &#x27;MMR...\n                                                                                 sparse_output=False)),\n                                                                  (&#x27;scaler&#x27;,\n                                                                   StandardScaler())]),\n                                                  [&#x27;Auction&#x27;, &#x27;Color&#x27;,\n                                                   &#x27;Transmission&#x27;, &#x27;WheelType&#x27;,\n                                                   &#x27;Nationality&#x27;, &#x27;Size&#x27;,\n                                                   &#x27;TopThreeAmericanName&#x27;,\n                                                   &#x27;PRIMEUNIT&#x27;, &#x27;AUCGUART&#x27;,\n                                                   &#x27;IsOnlineSale&#x27;, &#x27;Make&#x27;])])),\n                (&#x27;wrapper&#x27;,\n                 RFECV(cv=5, estimator=DecisionTreeClassifier(random_state=29),\n                       min_features_to_select=10, n_jobs=-1)),\n                (&#x27;model&#x27;, DecisionTreeClassifier(random_state=42))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-31\" type=\"checkbox\" ><label for=\"sk-estimator-id-31\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;Pipeline<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.pipeline.Pipeline.html\">?<span>Documentation for Pipeline</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n                 ColumnTransformer(transformers=[(&#x27;num&#x27;,\n                                                  Pipeline(steps=[(&#x27;scaler&#x27;,\n                                                                   StandardScaler()),\n                                                                  (&#x27;LDA&#x27;,\n                                                                   LinearDiscriminantAnalysis())]),\n                                                  [&#x27;VehicleAge&#x27;, &#x27;VehOdo&#x27;,\n                                                   &#x27;MMRAcquisitionAuctionAveragePrice&#x27;,\n                                                   &#x27;MMRAcquisitionAuctionCleanPrice&#x27;,\n                                                   &#x27;MMRAcquisitionRetailAveragePrice&#x27;,\n                                                   &#x27;MMRAcquisitonRetailCleanPrice&#x27;,\n                                                   &#x27;MMRCurrentAuctionAveragePrice&#x27;,\n                                                   &#x27;MMR...\n                                                                                 sparse_output=False)),\n                                                                  (&#x27;scaler&#x27;,\n                                                                   StandardScaler())]),\n                                                  [&#x27;Auction&#x27;, &#x27;Color&#x27;,\n                                                   &#x27;Transmission&#x27;, &#x27;WheelType&#x27;,\n                                                   &#x27;Nationality&#x27;, &#x27;Size&#x27;,\n                                                   &#x27;TopThreeAmericanName&#x27;,\n                                                   &#x27;PRIMEUNIT&#x27;, &#x27;AUCGUART&#x27;,\n                                                   &#x27;IsOnlineSale&#x27;, &#x27;Make&#x27;])])),\n                (&#x27;wrapper&#x27;,\n                 RFECV(cv=5, estimator=DecisionTreeClassifier(random_state=29),\n                       min_features_to_select=10, n_jobs=-1)),\n                (&#x27;model&#x27;, DecisionTreeClassifier(random_state=42))])</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-32\" type=\"checkbox\" ><label for=\"sk-estimator-id-32\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;preprocessor: ColumnTransformer<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.compose.ColumnTransformer.html\">?<span>Documentation for preprocessor: ColumnTransformer</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>ColumnTransformer(transformers=[(&#x27;num&#x27;,\n                                 Pipeline(steps=[(&#x27;scaler&#x27;, StandardScaler()),\n                                                 (&#x27;LDA&#x27;,\n                                                  LinearDiscriminantAnalysis())]),\n                                 [&#x27;VehicleAge&#x27;, &#x27;VehOdo&#x27;,\n                                  &#x27;MMRAcquisitionAuctionAveragePrice&#x27;,\n                                  &#x27;MMRAcquisitionAuctionCleanPrice&#x27;,\n                                  &#x27;MMRAcquisitionRetailAveragePrice&#x27;,\n                                  &#x27;MMRAcquisitonRetailCleanPrice&#x27;,\n                                  &#x27;MMRCurrentAuctionAveragePrice&#x27;,\n                                  &#x27;MMRCurrentAuctionCleanPrice&#x27;,\n                                  &#x27;MMRCu...\n                                  &#x27;MMRCurrentRetailCleanPrice&#x27;,\n                                  &#x27;VehBCost_transformed&#x27;,\n                                  &#x27;WarrantyCost_transformed&#x27;]),\n                                (&#x27;nom&#x27;,\n                                 Pipeline(steps=[(&#x27;encoder&#x27;,\n                                                  OneHotEncoder(drop=&#x27;first&#x27;,\n                                                                handle_unknown=&#x27;ignore&#x27;,\n                                                                sparse_output=False)),\n                                                 (&#x27;scaler&#x27;, StandardScaler())]),\n                                 [&#x27;Auction&#x27;, &#x27;Color&#x27;, &#x27;Transmission&#x27;,\n                                  &#x27;WheelType&#x27;, &#x27;Nationality&#x27;, &#x27;Size&#x27;,\n                                  &#x27;TopThreeAmericanName&#x27;, &#x27;PRIMEUNIT&#x27;,\n                                  &#x27;AUCGUART&#x27;, &#x27;IsOnlineSale&#x27;, &#x27;Make&#x27;])])</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-33\" type=\"checkbox\" ><label for=\"sk-estimator-id-33\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">num</label><div class=\"sk-toggleable__content fitted\"><pre>[&#x27;VehicleAge&#x27;, &#x27;VehOdo&#x27;, &#x27;MMRAcquisitionAuctionAveragePrice&#x27;, &#x27;MMRAcquisitionAuctionCleanPrice&#x27;, &#x27;MMRAcquisitionRetailAveragePrice&#x27;, &#x27;MMRAcquisitonRetailCleanPrice&#x27;, &#x27;MMRCurrentAuctionAveragePrice&#x27;, &#x27;MMRCurrentAuctionCleanPrice&#x27;, &#x27;MMRCurrentRetailAveragePrice&#x27;, &#x27;MMRCurrentRetailCleanPrice&#x27;, &#x27;VehBCost_transformed&#x27;, &#x27;WarrantyCost_transformed&#x27;]</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-34\" type=\"checkbox\" ><label for=\"sk-estimator-id-34\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;StandardScaler<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.preprocessing.StandardScaler.html\">?<span>Documentation for StandardScaler</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>StandardScaler()</pre></div> </div></div><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-35\" type=\"checkbox\" ><label for=\"sk-estimator-id-35\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;LinearDiscriminantAnalysis<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.html\">?<span>Documentation for LinearDiscriminantAnalysis</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>LinearDiscriminantAnalysis()</pre></div> </div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-36\" type=\"checkbox\" ><label for=\"sk-estimator-id-36\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">nom</label><div class=\"sk-toggleable__content fitted\"><pre>[&#x27;Auction&#x27;, &#x27;Color&#x27;, &#x27;Transmission&#x27;, &#x27;WheelType&#x27;, &#x27;Nationality&#x27;, &#x27;Size&#x27;, &#x27;TopThreeAmericanName&#x27;, &#x27;PRIMEUNIT&#x27;, &#x27;AUCGUART&#x27;, &#x27;IsOnlineSale&#x27;, &#x27;Make&#x27;]</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-37\" type=\"checkbox\" ><label for=\"sk-estimator-id-37\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;OneHotEncoder<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.preprocessing.OneHotEncoder.html\">?<span>Documentation for OneHotEncoder</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>OneHotEncoder(drop=&#x27;first&#x27;, handle_unknown=&#x27;ignore&#x27;, sparse_output=False)</pre></div> </div></div><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-38\" type=\"checkbox\" ><label for=\"sk-estimator-id-38\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;StandardScaler<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.preprocessing.StandardScaler.html\">?<span>Documentation for StandardScaler</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>StandardScaler()</pre></div> </div></div></div></div></div></div></div></div></div><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-39\" type=\"checkbox\" ><label for=\"sk-estimator-id-39\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;wrapper: RFECV<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.feature_selection.RFECV.html\">?<span>Documentation for wrapper: RFECV</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>RFECV(cv=5, estimator=DecisionTreeClassifier(random_state=29),\n      min_features_to_select=10, n_jobs=-1)</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-40\" type=\"checkbox\" ><label for=\"sk-estimator-id-40\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">estimator: DecisionTreeClassifier</label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeClassifier(random_state=29)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-41\" type=\"checkbox\" ><label for=\"sk-estimator-id-41\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;DecisionTreeClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.tree.DecisionTreeClassifier.html\">?<span>Documentation for DecisionTreeClassifier</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeClassifier(random_state=29)</pre></div> </div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-42\" type=\"checkbox\" ><label for=\"sk-estimator-id-42\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;DecisionTreeClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.tree.DecisionTreeClassifier.html\">?<span>Documentation for DecisionTreeClassifier</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeClassifier(random_state=42)</pre></div> </div></div></div></div></div></div>"},"metadata":{}}],"execution_count":41},{"cell_type":"code","source":"pipe_3 = pipeline_3.fit(transformed_train, y_train)\npipe_3[:-1].get_feature_names_out().tolist()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T07:37:49.180446Z","iopub.execute_input":"2024-11-20T07:37:49.180866Z","iopub.status.idle":"2024-11-20T07:38:33.322923Z","shell.execute_reply.started":"2024-11-20T07:37:49.180828Z","shell.execute_reply":"2024-11-20T07:38:33.321885Z"}},"outputs":[{"execution_count":42,"output_type":"execute_result","data":{"text/plain":"['num__lineardiscriminantanalysis0',\n 'nom__Auction_MANHEIM',\n 'nom__Auction_OTHER',\n 'nom__Color_BLACK',\n 'nom__Color_BLUE',\n 'nom__Color_GOLD',\n 'nom__Color_GREEN',\n 'nom__Color_GREY',\n 'nom__Color_MAROON',\n 'nom__Color_RED',\n 'nom__Color_SILVER',\n 'nom__Color_WHITE',\n 'nom__Transmission_MANUAL',\n 'nom__WheelType_Covers',\n 'nom__Nationality_OTHER ASIAN',\n 'nom__Size_LARGE',\n 'nom__Size_LARGE TRUCK',\n 'nom__Size_MEDIUM',\n 'nom__Size_MEDIUM SUV',\n 'nom__Size_SMALL SUV',\n 'nom__Size_VAN',\n 'nom__TopThreeAmericanName_FORD',\n 'nom__TopThreeAmericanName_GM',\n 'nom__TopThreeAmericanName_OTHER',\n 'nom__AUCGUART_unknown',\n 'nom__IsOnlineSale_1.0',\n 'nom__Make_CHRYSLER',\n 'nom__Make_DODGE',\n 'nom__Make_FORD',\n 'nom__Make_KIA',\n 'nom__Make_NISSAN',\n 'nom__Make_OTHER',\n 'nom__Make_PONTIAC',\n 'nom__Make_SATURN']"},"metadata":{}}],"execution_count":42},{"cell_type":"code","source":"# Define the preprocessing steps for numerical and categorical features separately\nnumerical_preprocessing_4 = Pipeline(steps=[\n    ('scaler', z_score),  # Scale numerical features\n    ('pca', pca)])  # Feature extraction on numerical features\n\n\n\nnominal_preprocessing_4 = Pipeline(steps=[\n    ('encoder', one_hot_encoder),  # One-hot encode nominal features\n    ('scaler', z_score)])  # Scale encoded features\n\n\n\n# Define the ColumnTransformer for numerical and categorical features\npreprocessor_4 = ColumnTransformer(transformers=[\n    ('num', numerical_preprocessing_4, continuous_columns_trans),\n    ('nom', nominal_preprocessing_4, categorical_columns_trans),\n], remainder='drop')  # Passthrough any columns not specified\n\n\npipeline_4 = Pipeline(steps=[\n    ('preprocessor', preprocessor_4),\n    ('wrapper', wrapper),\n    ('model', DecisionTreeClassifier(random_state=42))])\n\n# Train the pipeline\npipe_4 = pipeline_4.fit(transformed_train, y_train)\npipe_4[:-1].get_feature_names_out().tolist()\n\n# Use the pipeline for prediction or other tasks\npredictions_4 = pipe_4.predict(transformed_test)\n\nfrom sklearn.metrics import accuracy_score\n\n# Calculate accuracy\naccuracy = accuracy_score(y_test, predictions_4)\nprint(\"Accuracy:\", accuracy)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T07:43:20.796856Z","iopub.execute_input":"2024-11-20T07:43:20.797276Z","iopub.status.idle":"2024-11-20T07:44:24.447431Z","shell.execute_reply.started":"2024-11-20T07:43:20.797242Z","shell.execute_reply":"2024-11-20T07:44:24.446241Z"}},"outputs":[{"name":"stdout","text":"Accuracy: 0.7740123315825531\n","output_type":"stream"}],"execution_count":46},{"cell_type":"markdown","source":"# submission","metadata":{}},{"cell_type":"code","source":"test = pd.read_csv('/kaggle/input/DontGetKicked/test.csv').set_index('RefId')\n\n\ntest.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T07:10:38.391880Z","iopub.status.idle":"2024-11-20T07:10:38.392474Z","shell.execute_reply.started":"2024-11-20T07:10:38.392165Z","shell.execute_reply":"2024-11-20T07:10:38.392206Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"test = initial_preproc(test)\n\ntest = test.drop(drop_list, axis=1)\ntest = test.drop(discard_missing_col, axis=1)\ntest = missing_imputer(X_train, test)[1]\ntest = discretizer(X_train, test)[1]\ntest = transform(X_train, test)[1]\npredictions_2 = pipe_2.predict(test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T07:10:38.393800Z","iopub.status.idle":"2024-11-20T07:10:38.394195Z","shell.execute_reply.started":"2024-11-20T07:10:38.394009Z","shell.execute_reply":"2024-11-20T07:10:38.394028Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Create the submission DataFrame\nsubmission_df = pd.DataFrame(data={'Id': test.index, 'IsBadBuy': predictions_2})\n\n# Save the submission file\nsubmission_df.to_csv('submission.csv', index=False)\n\nprint(\"Submission file 'submission.csv' created successfully!\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T07:10:38.395445Z","iopub.status.idle":"2024-11-20T07:10:38.395830Z","shell.execute_reply.started":"2024-11-20T07:10:38.395620Z","shell.execute_reply":"2024-11-20T07:10:38.395637Z"}},"outputs":[],"execution_count":null}]}