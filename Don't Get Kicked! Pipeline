{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":2564,"databundleVersionId":29456,"sourceType":"competition"}],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# read the data","metadata":{}},{"cell_type":"code","source":"import pandas as pd\n\ndf = pd.read_csv('/kaggle/input/DontGetKicked/training.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-03T08:58:36.881261Z","iopub.execute_input":"2025-01-03T08:58:36.881614Z","iopub.status.idle":"2025-01-03T08:58:38.184038Z","shell.execute_reply.started":"2025-01-03T08:58:36.881562Z","shell.execute_reply":"2025-01-03T08:58:38.182873Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"import warnings\nwarnings.filterwarnings('ignore')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-03T08:58:38.185674Z","iopub.execute_input":"2025-01-03T08:58:38.185969Z","iopub.status.idle":"2025-01-03T08:58:38.191202Z","shell.execute_reply.started":"2025-01-03T08:58:38.185941Z","shell.execute_reply":"2025-01-03T08:58:38.190061Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"# Set 'RefId' as the index in df first\ndf = df.set_index('RefId')\n\n# Then define target and inputs\ntarget = df['IsBadBuy']\ninputs = df.drop(columns=['IsBadBuy'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-03T08:58:38.192403Z","iopub.execute_input":"2025-01-03T08:58:38.193044Z","iopub.status.idle":"2025-01-03T08:58:38.249591Z","shell.execute_reply.started":"2025-01-03T08:58:38.193016Z","shell.execute_reply":"2025-01-03T08:58:38.248508Z"}},"outputs":[],"execution_count":3},{"cell_type":"markdown","source":"# feature screening","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\n\n\n# split into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(inputs, target, test_size=0.30, random_state=42)\n\nX_train.shape,X_test.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-03T08:58:38.250835Z","iopub.execute_input":"2025-01-03T08:58:38.251222Z","iopub.status.idle":"2025-01-03T08:58:39.076750Z","shell.execute_reply.started":"2025-01-03T08:58:38.251182Z","shell.execute_reply":"2025-01-03T08:58:39.075599Z"}},"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"((51088, 32), (21895, 32))"},"metadata":{}}],"execution_count":4},{"cell_type":"code","source":"def feature_screening(data, min_cv=0.1, mode_threshold=99, distinct_threshold=90):\n    processed_data = data.copy()\n    \n\n    columns = inputs.columns\n\n    continuous = [\n        'VehYear', 'VehicleAge', 'VehOdo', \n        'MMRAcquisitionAuctionAveragePrice', 'MMRAcquisitionAuctionCleanPrice',\n        'MMRAcquisitionRetailAveragePrice', 'MMRAcquisitonRetailCleanPrice',\n        'MMRCurrentAuctionAveragePrice', 'MMRCurrentAuctionCleanPrice',\n        'MMRCurrentRetailAveragePrice', 'MMRCurrentRetailCleanPrice',\n        'VehBCost', 'WarrantyCost'\n    ]\n    categorical = [j for j in columns if j not in continuous]\n\n    # Define a minimum value for coefficient of variation\n    min_cv = min_cv\n\n    # Calculate the coefficient of variation for each column\n    cv_values = processed_data[continuous].std() / processed_data[continuous].mean()\n\n    # Filter out columns with CV less than 0.1\n    screen_cv =  cv_values[cv_values < min_cv].index.tolist()\n\n\n    # Define a threshold for the dominant category percentage\n    mode_threshold = mode_threshold\n\n    # Calculate the percentage of the mode category for each column\n    mode_category = (processed_data[categorical].apply(lambda x: x.value_counts().max() / len(x)) * 100)\n\n    # Select columns where the mode category percentage is greater than the threshold\n    screen_mode = mode_category[mode_category > mode_threshold].index.tolist()\n\n\n    # Set a threshold for excluding columns \n    distinct_threshold = distinct_threshold\n\n    # Calculate the percentage of distinct categories in categorical variables\n    distinct_percentage = (processed_data[categorical].apply(lambda x: x.dropna().nunique() / x.count()) * 100)\n\n    # Select categorical columns based on distinct percentage threshold\n    screen_distinct = distinct_percentage[distinct_percentage > distinct_threshold].index.tolist()\n\n    screened_features  = list(set(screen_cv + screen_mode + screen_distinct))\n     \n    return screened_features ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-03T08:58:39.079991Z","iopub.execute_input":"2025-01-03T08:58:39.080744Z","iopub.status.idle":"2025-01-03T08:58:39.089973Z","shell.execute_reply.started":"2025-01-03T08:58:39.080712Z","shell.execute_reply":"2025-01-03T08:58:39.088683Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"drop_list = feature_screening(X_train, min_cv=0.1, mode_threshold=99, distinct_threshold=90)\n\nX_train = X_train.drop(drop_list, axis=1)\nX_test = X_test.drop(drop_list, axis=1)\n\nX_train.shape, X_test.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-03T08:58:39.091409Z","iopub.execute_input":"2025-01-03T08:58:39.091721Z","iopub.status.idle":"2025-01-03T08:58:39.420082Z","shell.execute_reply.started":"2025-01-03T08:58:39.091693Z","shell.execute_reply":"2025-01-03T08:58:39.419032Z"}},"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"((51088, 31), (21895, 31))"},"metadata":{}}],"execution_count":6},{"cell_type":"markdown","source":"# Handle Out-of-Range ","metadata":{}},{"cell_type":"code","source":"import pandas as pd\n\ndef range_consistency(data, target):\n    # Define ranges for each column\n    column_ranges = {\n    'VehicleAge': (0,30),\n    'VehOdo': (0,120000),\n    'MMRAcquisitionAuctionAveragePrice': (800,46000),\n    'MMRAcquisitionAuctionCleanPrice': (1000,46000),\n    'MMRAcquisitionRetailAveragePrice': (1000,46000),\n    'MMRAcquisitonRetailCleanPrice': (1000,46000),\n    'MMRCurrentAuctionAveragePrice': (300,46000),\n    'MMRCurrentAuctionCleanPrice': (400,46000),\n    'MMRCurrentRetailAveragePrice': (800,46000),\n    'MMRCurrentRetailCleanPrice': (1000,46000),\n    'VehBCost': (1000,46000),\n    'WarrantyCost': (400,8000)\n    }\n\n    # Iterate through each column and fill NaN values outside the defined range\n    for column, (min_val, max_val) in column_ranges.items():\n        data[column] = data[column].apply(lambda x: x if min_val <= x <= max_val else None)\n        \n    return data, target","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-03T08:58:39.421477Z","iopub.execute_input":"2025-01-03T08:58:39.421910Z","iopub.status.idle":"2025-01-03T08:58:39.429683Z","shell.execute_reply.started":"2025-01-03T08:58:39.421869Z","shell.execute_reply":"2025-01-03T08:58:39.428642Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"X_train = range_consistency(X_train, y_train)[0]\nX_test = range_consistency(X_test, y_test)[0]\n\ny_train = range_consistency(X_train, y_train)[1]\ny_test = range_consistency(X_test, y_test)[1]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-03T08:58:39.431013Z","iopub.execute_input":"2025-01-03T08:58:39.431370Z","iopub.status.idle":"2025-01-03T08:58:40.117507Z","shell.execute_reply.started":"2025-01-03T08:58:39.431332Z","shell.execute_reply":"2025-01-03T08:58:40.116716Z"}},"outputs":[],"execution_count":8},{"cell_type":"code","source":"import numpy as np\n\ndef initial_preproc(data):\n    processed_data = data.copy()\n    # List of columns to drop\n    columns_to_drop = ['PurchDate', 'Model', 'Trim', 'SubModel', 'BYRNO', 'VNZIP1', 'VNST', 'WheelTypeID']\n    \n    # Drop the columns\n    processed_data = processed_data.drop(columns=columns_to_drop)\n    # Replace 'NOT AVAIL' in the 'Color' column with NaN\n    processed_data['Color'] = processed_data['Color'].replace('NOT AVAIL', np.nan)\n    processed_data['Transmission'] = processed_data['Transmission'].replace(['Manual'], 'MANUAL')\n    processed_data['Nationality'] = processed_data['Nationality'].replace(['OTHER','TOP LINE ASIAN'], 'OTHERS')\n    # Define a threshold for frequency (1% of total data)\n    threshold = 0.01 * len(processed_data)\n    \n    # Group classes in 'Color' column\n    color_freq = processed_data['Color'].value_counts()  # Get frequencies\n    color_to_other = color_freq[color_freq < threshold].index  # Classes with less than 1% frequency\n    processed_data['Color'] = processed_data['Color'].replace(color_to_other, 'OTHER')\n    \n    # Group classes in 'Make' column\n    make_freq = processed_data['Make'].value_counts()  # Get frequencies\n    make_to_other = make_freq[make_freq < threshold].index  # Classes with less than 1% frequency\n    processed_data['Make'] = processed_data['Make'].replace(make_to_other, 'OTHER')\n    \n    #From our previous Chi-Square Test\n    processed_data['PRIMEUNIT'].fillna('unknown', inplace=True)\n    processed_data['AUCGUART'].fillna('unknown', inplace=True)\n    \n    \n\n\n\n    return processed_data","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-03T08:58:40.118609Z","iopub.execute_input":"2025-01-03T08:58:40.118902Z","iopub.status.idle":"2025-01-03T08:58:40.126842Z","shell.execute_reply.started":"2025-01-03T08:58:40.118875Z","shell.execute_reply":"2025-01-03T08:58:40.125738Z"}},"outputs":[],"execution_count":9},{"cell_type":"code","source":"X_train = initial_preproc(X_train)\nX_test = initial_preproc(X_test)\n\nX_train.shape, X_test.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-03T08:58:40.128188Z","iopub.execute_input":"2025-01-03T08:58:40.128523Z","iopub.status.idle":"2025-01-03T08:58:40.308345Z","shell.execute_reply.started":"2025-01-03T08:58:40.128494Z","shell.execute_reply":"2025-01-03T08:58:40.307375Z"}},"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"((51088, 23), (21895, 23))"},"metadata":{}}],"execution_count":10},{"cell_type":"markdown","source":"# outliers","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\n\ndef outlier_handling(data, contamination=0.01):\n    inputs_iso = data.copy()\n    \n    # Continuous variables\n    continuous_columns = [\n        'VehicleAge', 'VehOdo', 'MMRAcquisitionAuctionAveragePrice', \n        'MMRAcquisitionAuctionCleanPrice', 'MMRAcquisitionRetailAveragePrice', \n        'MMRAcquisitonRetailCleanPrice', 'MMRCurrentAuctionAveragePrice', \n        'MMRCurrentAuctionCleanPrice', 'MMRCurrentRetailAveragePrice', \n        'MMRCurrentRetailCleanPrice', 'VehBCost', 'WarrantyCost'\n    ]\n    \n    # Categorical variables\n    categorical_columns = [\n        'Auction', 'Color', 'Transmission', 'WheelType', \n        'Nationality', 'Size', 'TopThreeAmericanName', \n        'PRIMEUNIT', 'AUCGUART', 'IsOnlineSale', 'Make' ]    \n    # Discard rows with NaN valuse\n    inputs_iso = inputs_iso.dropna()\n    \n    # Apply Z-score scaling to numerical columns\n    scaler = StandardScaler()\n    inputs_iso[continuous_columns] = scaler.fit_transform(inputs_iso[continuous_columns])\n    \n    # Apply label encoding to categorical columns\n    label_encoder = LabelEncoder()\n    inputs_iso[categorical_columns] = inputs_iso[categorical_columns].apply(label_encoder.fit_transform)\n    \n    # Fit Isolation Forest model\n    clf = IsolationForest(contamination=0.01, random_state=42)\n    clf.fit(inputs_iso)\n    \n    # Predict outliers\n    outliers = clf.predict(inputs_iso)\n    \n    # Add the outlier predictions to your DataFrame\n    inputs_iso['outlier'] = outliers\n    \n    outlier_index = inputs_iso[inputs_iso['outlier'] == -1].index\n\n    \n    return outlier_index","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-03T08:58:40.309553Z","iopub.execute_input":"2025-01-03T08:58:40.309850Z","iopub.status.idle":"2025-01-03T08:58:40.627678Z","shell.execute_reply.started":"2025-01-03T08:58:40.309822Z","shell.execute_reply":"2025-01-03T08:58:40.626572Z"}},"outputs":[],"execution_count":11},{"cell_type":"code","source":"outlier_index = outlier_handling(X_train, contamination=0.01)\n\nX_train = X_train.drop(outlier_index.tolist())\n\ny_train = y_train.drop(outlier_index.tolist())\n\nX_train.shape, y_train.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-03T08:58:40.629099Z","iopub.execute_input":"2025-01-03T08:58:40.629518Z","iopub.status.idle":"2025-01-03T08:58:43.684709Z","shell.execute_reply.started":"2025-01-03T08:58:40.629475Z","shell.execute_reply":"2025-01-03T08:58:43.683597Z"}},"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"((50607, 23), (50607,))"},"metadata":{}}],"execution_count":12},{"cell_type":"markdown","source":"# missing values","metadata":{}},{"cell_type":"markdown","source":"## Row cleaning","metadata":{}},{"cell_type":"code","source":"def missing_row_report(data, missrow=12):\n    processed_data = data.copy()\n\n    # Create a new column with the number of missing values in each row\n    processed_data['Num_Missing_Values'] = processed_data.isnull().sum(axis=1)\n\n    discard_missing_row = processed_data[processed_data['Num_Missing_Values'] > missrow].index.tolist()\n\n    return discard_missing_row","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-03T08:58:43.686075Z","iopub.execute_input":"2025-01-03T08:58:43.686464Z","iopub.status.idle":"2025-01-03T08:58:43.692015Z","shell.execute_reply.started":"2025-01-03T08:58:43.686426Z","shell.execute_reply":"2025-01-03T08:58:43.690883Z"}},"outputs":[],"execution_count":13},{"cell_type":"code","source":"discard_missing_row = missing_row_report(X_train, missrow=35)\n\nX_train = X_train.drop(discard_missing_row)\ny_train = y_train.drop(discard_missing_row)\n\nX_train.shape, y_train.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-03T08:58:43.696927Z","iopub.execute_input":"2025-01-03T08:58:43.697227Z","iopub.status.idle":"2025-01-03T08:58:43.766437Z","shell.execute_reply.started":"2025-01-03T08:58:43.697198Z","shell.execute_reply":"2025-01-03T08:58:43.765345Z"}},"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"((50607, 23), (50607,))"},"metadata":{}}],"execution_count":14},{"cell_type":"markdown","source":"## column cleaning ","metadata":{}},{"cell_type":"code","source":"def missing_col_report(data, misscol=50):\n    processed_data = data.copy()\n    \n    # Report on count and percentage of missing values in each column\n    missing_values_report = pd.DataFrame({\n        'Column': processed_data.columns,\n        'Missing Values': processed_data.isnull().sum(),\n        'Percentage Missing': processed_data.isnull().mean() * 100\n        })\n    discard_missing_col = missing_values_report[missing_values_report['Percentage Missing'] > misscol].index.tolist()\n    \n    return discard_missing_col","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-03T08:58:43.767835Z","iopub.execute_input":"2025-01-03T08:58:43.768271Z","iopub.status.idle":"2025-01-03T08:58:43.774903Z","shell.execute_reply.started":"2025-01-03T08:58:43.768227Z","shell.execute_reply":"2025-01-03T08:58:43.773519Z"}},"outputs":[],"execution_count":15},{"cell_type":"code","source":"discard_missing_col = missing_col_report(X_train, misscol=50)\n\nX_train = X_train.drop(discard_missing_col, axis=1)\nX_test = X_test.drop(discard_missing_col, axis=1)\n\nX_train.shape, X_test.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-03T08:58:43.776333Z","iopub.execute_input":"2025-01-03T08:58:43.776769Z","iopub.status.idle":"2025-01-03T08:58:43.912184Z","shell.execute_reply.started":"2025-01-03T08:58:43.776716Z","shell.execute_reply":"2025-01-03T08:58:43.910964Z"}},"outputs":[{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"((50607, 23), (21895, 23))"},"metadata":{}}],"execution_count":16},{"cell_type":"markdown","source":"## impute missing values","metadata":{}},{"cell_type":"code","source":"from sklearn.impute import  SimpleImputer\n\ndef missing_imputer(train, test):\n    \n    continuous = train.select_dtypes(exclude=['object','category']).columns.tolist()\n    categorical = train.select_dtypes(include=['object','category']).columns.tolist()\n\n    # Define imputation strategies for each subset of columns\n    cat_imputer = SimpleImputer(strategy='most_frequent')\n    cont_imputer = SimpleImputer(strategy='median')\n    \n    try:\n\n    # Impute missing values\n        train[continuous] = cont_imputer.fit_transform(train[continuous])\n        train[categorical] = cat_imputer.fit_transform(train[categorical])\n    \n        test[continuous] = cont_imputer.transform(test[continuous])\n        test[categorical] = cat_imputer.transform(test[categorical])\n\n    except:\n        test[continuous] = cont_imputer.transform(test[continuous])\n        test[categorical] = cat_imputer.transform(test[categorical])\n        \n    return train, test","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-03T08:58:43.913332Z","iopub.execute_input":"2025-01-03T08:58:43.913880Z","iopub.status.idle":"2025-01-03T08:58:43.925692Z","shell.execute_reply.started":"2025-01-03T08:58:43.913846Z","shell.execute_reply":"2025-01-03T08:58:43.924591Z"}},"outputs":[],"execution_count":17},{"cell_type":"code","source":"X_train, X_test = missing_imputer(X_train, X_test)\n\nX_train.shape, X_test.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-03T08:58:43.927038Z","iopub.execute_input":"2025-01-03T08:58:43.927519Z","iopub.status.idle":"2025-01-03T08:58:44.164939Z","shell.execute_reply.started":"2025-01-03T08:58:43.927462Z","shell.execute_reply":"2025-01-03T08:58:44.163793Z"}},"outputs":[{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"((50607, 23), (21895, 23))"},"metadata":{}}],"execution_count":18},{"cell_type":"markdown","source":"# transformation using the Box-Cox","metadata":{}},{"cell_type":"code","source":"\nfrom sklearn.preprocessing import PowerTransformer\nimport pandas as pd\n\ndef transform_features(data):\n   \n    data_transformed = data.copy()  # Avoid modifying the original DataFrame\n    features = [\"VehBCost\", \"WarrantyCost\"]\n\n    for feature in features:\n        # Check if the feature contains non-positive values\n        has_negative_values = (data[feature] <= 0).any()\n        \n        # Select transformation method based on values\n        method = 'yeo-johnson' if has_negative_values else 'box-cox'\n        transformer = PowerTransformer(method=method, standardize=False)\n        \n        # Fit and transform the feature\n        data_transformed[f\"{feature}_transformed\"] = transformer.fit_transform(data[[feature]])\n        # Drop the original columns used for PowerTransformer\n        \n\n    return data_transformed","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-03T08:58:44.166381Z","iopub.execute_input":"2025-01-03T08:58:44.166801Z","iopub.status.idle":"2025-01-03T08:58:44.174729Z","shell.execute_reply.started":"2025-01-03T08:58:44.166749Z","shell.execute_reply":"2025-01-03T08:58:44.173581Z"}},"outputs":[],"execution_count":19},{"cell_type":"code","source":"transformed_train = transform_features(X_train)\ntransformed_test = transform_features(X_test)\n\ntransformed_train.shape, transformed_test.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-03T08:58:44.176262Z","iopub.execute_input":"2025-01-03T08:58:44.176657Z","iopub.status.idle":"2025-01-03T08:58:45.178934Z","shell.execute_reply.started":"2025-01-03T08:58:44.176612Z","shell.execute_reply":"2025-01-03T08:58:45.177947Z"}},"outputs":[{"execution_count":20,"output_type":"execute_result","data":{"text/plain":"((50607, 25), (21895, 25))"},"metadata":{}}],"execution_count":20},{"cell_type":"code","source":"\n\n\n# continuous variables\ncontinuous_columns_trans = [\n        'VehicleAge', 'VehOdo', 'MMRAcquisitionAuctionAveragePrice', \n        'MMRAcquisitionAuctionCleanPrice', 'MMRAcquisitionRetailAveragePrice', \n        'MMRAcquisitonRetailCleanPrice', 'MMRCurrentAuctionAveragePrice', \n        'MMRCurrentAuctionCleanPrice', 'MMRCurrentRetailAveragePrice', \n        'MMRCurrentRetailCleanPrice','VehBCost_transformed','WarrantyCost_transformed']\n    \n# Categorical variables\ncategorical_columns_trans = [\n        'Auction', 'Color', 'Transmission', 'WheelType', \n        'Nationality', 'Size', 'TopThreeAmericanName', \n        'PRIMEUNIT', 'AUCGUART', 'IsOnlineSale', 'Make' ]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-03T08:58:45.180158Z","iopub.execute_input":"2025-01-03T08:58:45.180460Z","iopub.status.idle":"2025-01-03T08:58:45.185776Z","shell.execute_reply.started":"2025-01-03T08:58:45.180430Z","shell.execute_reply":"2025-01-03T08:58:45.184600Z"}},"outputs":[],"execution_count":21},{"cell_type":"markdown","source":"# Pipeline","metadata":{}},{"cell_type":"code","source":"from sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.feature_selection import RFECV\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.preprocessing import  OneHotEncoder, OrdinalEncoder, StandardScaler\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom xgboost import XGBClassifier\n\n\n\none_hot_encoder = OneHotEncoder(drop='first', handle_unknown='ignore', sparse_output=False)\n\nordinal_encoder = OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\n\nz_score = StandardScaler()\n\nlda = LinearDiscriminantAnalysis(n_components=None)\n\n\n\n# Calculate scale_pos_weight\nscale_pos_weight = 35513 / 5079  # Example value, replace it with your own dataset's class distribution\n\n# Replace DecisionTreeClassifier with XGBClassifier in RFECV\nwrapper = RFECV(\n    estimator=XGBClassifier(\n        colsample_bylevel=0.5, \n        colsample_bynode=0.5, \n        colsample_bytree=1.0,\n        learning_rate=0.05133807866946395, \n        max_depth=8, \n        gamma=0.0,\n        random_state=8,\n        scale_pos_weight=scale_pos_weight  # Add balanced mode parameter\n    ),\n    step=1, \n    min_features_to_select=10, \n    cv=5, \n    n_jobs=-1\n)\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-03T08:58:45.187063Z","iopub.execute_input":"2025-01-03T08:58:45.187450Z","iopub.status.idle":"2025-01-03T08:58:45.400227Z","shell.execute_reply.started":"2025-01-03T08:58:45.187409Z","shell.execute_reply":"2025-01-03T08:58:45.399190Z"}},"outputs":[],"execution_count":22},{"cell_type":"code","source":"from xgboost import XGBClassifier\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.metrics import accuracy_score\n\n\n# Parameters for XGBClassifier\nscale_pos_weight = 0  # Adjust based on class imbalance\nxgb_model = XGBClassifier(\n    colsample_bylevel=0.5,\n    colsample_bynode=0.5,\n    colsample_bytree=1.0,\n    learning_rate=0.05133807866946395,\n    max_depth=8,\n    gamma=0.0,\n    random_state=8,\n    scale_pos_weight=scale_pos_weight\n)\n\n# Preprocessing steps\none_hot_encoder = OneHotEncoder(drop='first', handle_unknown='ignore', sparse_output=False)\nz_score = StandardScaler()\n\n# Define preprocessing for numerical and categorical features\nnumerical_preprocessing = Pipeline(steps=[\n    ('scaler', z_score),  # Scale numerical features\n    ('LDA', lda)          # Feature extraction on numerical features\n])\n\nnominal_preprocessing = Pipeline(steps=[\n    ('encoder', one_hot_encoder),  # One-hot encode nominal features\n    ('scaler', z_score)            # Scale encoded features\n])\n\n# Combine preprocessing\npreprocessor = ColumnTransformer(transformers=[\n    ('num', numerical_preprocessing, continuous_columns_trans),  # Replace with your numerical column names\n    ('nom', nominal_preprocessing, categorical_columns_trans)    # Replace with your categorical column names\n], remainder='drop')  # Drop any columns not specified\n\n# Define the full pipeline\npipeline = Pipeline(steps=[\n    ('preprocessor', preprocessor),\n    ('model', xgb_model)  # Use the XGBClassifier as the model\n])\n\n# Fit the pipeline\npipe = pipeline.fit(transformed_train, y_train)\n\n# Predict on the test set\npredictions = pipe.predict(transformed_test)\n\n# Calculate accuracy\naccuracy = accuracy_score(y_test, predictions)\nprint(\"Accuracy:\", accuracy)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-03T09:11:07.301890Z","iopub.execute_input":"2025-01-03T09:11:07.302764Z","iopub.status.idle":"2025-01-03T09:11:08.231531Z","shell.execute_reply.started":"2025-01-03T09:11:07.302726Z","shell.execute_reply":"2025-01-03T09:11:08.229051Z"}},"outputs":[{"name":"stdout","text":"Accuracy: 0.8774606074446221\n","output_type":"stream"}],"execution_count":40},{"cell_type":"code","source":"pipe","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-03T09:11:11.735854Z","iopub.execute_input":"2025-01-03T09:11:11.736257Z","iopub.status.idle":"2025-01-03T09:11:11.812191Z","shell.execute_reply.started":"2025-01-03T09:11:11.736223Z","shell.execute_reply":"2025-01-03T09:11:11.811083Z"}},"outputs":[{"execution_count":41,"output_type":"execute_result","data":{"text/plain":"Pipeline(steps=[('preprocessor',\n                 ColumnTransformer(transformers=[('num',\n                                                  Pipeline(steps=[('scaler',\n                                                                   StandardScaler()),\n                                                                  ('LDA',\n                                                                   LinearDiscriminantAnalysis())]),\n                                                  ['VehicleAge', 'VehOdo',\n                                                   'MMRAcquisitionAuctionAveragePrice',\n                                                   'MMRAcquisitionAuctionCleanPrice',\n                                                   'MMRAcquisitionRetailAveragePrice',\n                                                   'MMRAcquisitonRetailCleanPrice',\n                                                   'MMRCurrentAuctionAveragePrice',\n                                                   'MMR...\n                               feature_types=None, gamma=0.0, grow_policy=None,\n                               importance_type=None,\n                               interaction_constraints=None,\n                               learning_rate=0.05133807866946395, max_bin=None,\n                               max_cat_threshold=None, max_cat_to_onehot=None,\n                               max_delta_step=None, max_depth=8,\n                               max_leaves=None, min_child_weight=None,\n                               missing=nan, monotone_constraints=None,\n                               multi_strategy=None, n_estimators=None,\n                               n_jobs=None, num_parallel_tree=None,\n                               random_state=8, ...))])","text/html":"<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n                 ColumnTransformer(transformers=[(&#x27;num&#x27;,\n                                                  Pipeline(steps=[(&#x27;scaler&#x27;,\n                                                                   StandardScaler()),\n                                                                  (&#x27;LDA&#x27;,\n                                                                   LinearDiscriminantAnalysis())]),\n                                                  [&#x27;VehicleAge&#x27;, &#x27;VehOdo&#x27;,\n                                                   &#x27;MMRAcquisitionAuctionAveragePrice&#x27;,\n                                                   &#x27;MMRAcquisitionAuctionCleanPrice&#x27;,\n                                                   &#x27;MMRAcquisitionRetailAveragePrice&#x27;,\n                                                   &#x27;MMRAcquisitonRetailCleanPrice&#x27;,\n                                                   &#x27;MMRCurrentAuctionAveragePrice&#x27;,\n                                                   &#x27;MMR...\n                               feature_types=None, gamma=0.0, grow_policy=None,\n                               importance_type=None,\n                               interaction_constraints=None,\n                               learning_rate=0.05133807866946395, max_bin=None,\n                               max_cat_threshold=None, max_cat_to_onehot=None,\n                               max_delta_step=None, max_depth=8,\n                               max_leaves=None, min_child_weight=None,\n                               missing=nan, monotone_constraints=None,\n                               multi_strategy=None, n_estimators=None,\n                               n_jobs=None, num_parallel_tree=None,\n                               random_state=8, ...))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-18\" type=\"checkbox\" ><label for=\"sk-estimator-id-18\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n                 ColumnTransformer(transformers=[(&#x27;num&#x27;,\n                                                  Pipeline(steps=[(&#x27;scaler&#x27;,\n                                                                   StandardScaler()),\n                                                                  (&#x27;LDA&#x27;,\n                                                                   LinearDiscriminantAnalysis())]),\n                                                  [&#x27;VehicleAge&#x27;, &#x27;VehOdo&#x27;,\n                                                   &#x27;MMRAcquisitionAuctionAveragePrice&#x27;,\n                                                   &#x27;MMRAcquisitionAuctionCleanPrice&#x27;,\n                                                   &#x27;MMRAcquisitionRetailAveragePrice&#x27;,\n                                                   &#x27;MMRAcquisitonRetailCleanPrice&#x27;,\n                                                   &#x27;MMRCurrentAuctionAveragePrice&#x27;,\n                                                   &#x27;MMR...\n                               feature_types=None, gamma=0.0, grow_policy=None,\n                               importance_type=None,\n                               interaction_constraints=None,\n                               learning_rate=0.05133807866946395, max_bin=None,\n                               max_cat_threshold=None, max_cat_to_onehot=None,\n                               max_delta_step=None, max_depth=8,\n                               max_leaves=None, min_child_weight=None,\n                               missing=nan, monotone_constraints=None,\n                               multi_strategy=None, n_estimators=None,\n                               n_jobs=None, num_parallel_tree=None,\n                               random_state=8, ...))])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-19\" type=\"checkbox\" ><label for=\"sk-estimator-id-19\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">preprocessor: ColumnTransformer</label><div class=\"sk-toggleable__content\"><pre>ColumnTransformer(transformers=[(&#x27;num&#x27;,\n                                 Pipeline(steps=[(&#x27;scaler&#x27;, StandardScaler()),\n                                                 (&#x27;LDA&#x27;,\n                                                  LinearDiscriminantAnalysis())]),\n                                 [&#x27;VehicleAge&#x27;, &#x27;VehOdo&#x27;,\n                                  &#x27;MMRAcquisitionAuctionAveragePrice&#x27;,\n                                  &#x27;MMRAcquisitionAuctionCleanPrice&#x27;,\n                                  &#x27;MMRAcquisitionRetailAveragePrice&#x27;,\n                                  &#x27;MMRAcquisitonRetailCleanPrice&#x27;,\n                                  &#x27;MMRCurrentAuctionAveragePrice&#x27;,\n                                  &#x27;MMRCurrentAuctionCleanPrice&#x27;,\n                                  &#x27;MMRCu...\n                                  &#x27;MMRCurrentRetailCleanPrice&#x27;,\n                                  &#x27;VehBCost_transformed&#x27;,\n                                  &#x27;WarrantyCost_transformed&#x27;]),\n                                (&#x27;nom&#x27;,\n                                 Pipeline(steps=[(&#x27;encoder&#x27;,\n                                                  OneHotEncoder(drop=&#x27;first&#x27;,\n                                                                handle_unknown=&#x27;ignore&#x27;,\n                                                                sparse_output=False)),\n                                                 (&#x27;scaler&#x27;, StandardScaler())]),\n                                 [&#x27;Auction&#x27;, &#x27;Color&#x27;, &#x27;Transmission&#x27;,\n                                  &#x27;WheelType&#x27;, &#x27;Nationality&#x27;, &#x27;Size&#x27;,\n                                  &#x27;TopThreeAmericanName&#x27;, &#x27;PRIMEUNIT&#x27;,\n                                  &#x27;AUCGUART&#x27;, &#x27;IsOnlineSale&#x27;, &#x27;Make&#x27;])])</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-20\" type=\"checkbox\" ><label for=\"sk-estimator-id-20\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">num</label><div class=\"sk-toggleable__content\"><pre>[&#x27;VehicleAge&#x27;, &#x27;VehOdo&#x27;, &#x27;MMRAcquisitionAuctionAveragePrice&#x27;, &#x27;MMRAcquisitionAuctionCleanPrice&#x27;, &#x27;MMRAcquisitionRetailAveragePrice&#x27;, &#x27;MMRAcquisitonRetailCleanPrice&#x27;, &#x27;MMRCurrentAuctionAveragePrice&#x27;, &#x27;MMRCurrentAuctionCleanPrice&#x27;, &#x27;MMRCurrentRetailAveragePrice&#x27;, &#x27;MMRCurrentRetailCleanPrice&#x27;, &#x27;VehBCost_transformed&#x27;, &#x27;WarrantyCost_transformed&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-21\" type=\"checkbox\" ><label for=\"sk-estimator-id-21\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StandardScaler</label><div class=\"sk-toggleable__content\"><pre>StandardScaler()</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-22\" type=\"checkbox\" ><label for=\"sk-estimator-id-22\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearDiscriminantAnalysis</label><div class=\"sk-toggleable__content\"><pre>LinearDiscriminantAnalysis()</pre></div></div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-23\" type=\"checkbox\" ><label for=\"sk-estimator-id-23\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">nom</label><div class=\"sk-toggleable__content\"><pre>[&#x27;Auction&#x27;, &#x27;Color&#x27;, &#x27;Transmission&#x27;, &#x27;WheelType&#x27;, &#x27;Nationality&#x27;, &#x27;Size&#x27;, &#x27;TopThreeAmericanName&#x27;, &#x27;PRIMEUNIT&#x27;, &#x27;AUCGUART&#x27;, &#x27;IsOnlineSale&#x27;, &#x27;Make&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-24\" type=\"checkbox\" ><label for=\"sk-estimator-id-24\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">OneHotEncoder</label><div class=\"sk-toggleable__content\"><pre>OneHotEncoder(drop=&#x27;first&#x27;, handle_unknown=&#x27;ignore&#x27;, sparse_output=False)</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-25\" type=\"checkbox\" ><label for=\"sk-estimator-id-25\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StandardScaler</label><div class=\"sk-toggleable__content\"><pre>StandardScaler()</pre></div></div></div></div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-26\" type=\"checkbox\" ><label for=\"sk-estimator-id-26\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n              colsample_bylevel=0.5, colsample_bynode=0.5, colsample_bytree=1.0,\n              device=None, early_stopping_rounds=None, enable_categorical=False,\n              eval_metric=None, feature_types=None, gamma=0.0, grow_policy=None,\n              importance_type=None, interaction_constraints=None,\n              learning_rate=0.05133807866946395, max_bin=None,\n              max_cat_threshold=None, max_cat_to_onehot=None,\n              max_delta_step=None, max_depth=8, max_leaves=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              multi_strategy=None, n_estimators=None, n_jobs=None,\n              num_parallel_tree=None, random_state=8, ...)</pre></div></div></div></div></div></div></div>"},"metadata":{}}],"execution_count":41},{"cell_type":"code","source":"pipe = pipeline.fit(transformed_train, y_train)\npipe[:-1].get_feature_names_out().tolist()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-03T09:11:14.694809Z","iopub.execute_input":"2025-01-03T09:11:14.695194Z","iopub.status.idle":"2025-01-03T09:11:15.306906Z","shell.execute_reply.started":"2025-01-03T09:11:14.695150Z","shell.execute_reply":"2025-01-03T09:11:15.305079Z"}},"outputs":[{"execution_count":42,"output_type":"execute_result","data":{"text/plain":"['num__lineardiscriminantanalysis0',\n 'nom__Auction_MANHEIM',\n 'nom__Auction_OTHER',\n 'nom__Color_BLACK',\n 'nom__Color_BLUE',\n 'nom__Color_GOLD',\n 'nom__Color_GREEN',\n 'nom__Color_GREY',\n 'nom__Color_MAROON',\n 'nom__Color_OTHER',\n 'nom__Color_RED',\n 'nom__Color_SILVER',\n 'nom__Color_WHITE',\n 'nom__Transmission_MANUAL',\n 'nom__WheelType_Covers',\n 'nom__WheelType_Special',\n 'nom__Nationality_OTHER ASIAN',\n 'nom__Nationality_OTHERS',\n 'nom__Size_CROSSOVER',\n 'nom__Size_LARGE',\n 'nom__Size_LARGE SUV',\n 'nom__Size_LARGE TRUCK',\n 'nom__Size_MEDIUM',\n 'nom__Size_MEDIUM SUV',\n 'nom__Size_SMALL SUV',\n 'nom__Size_SMALL TRUCK',\n 'nom__Size_SPECIALTY',\n 'nom__Size_SPORTS',\n 'nom__Size_VAN',\n 'nom__TopThreeAmericanName_FORD',\n 'nom__TopThreeAmericanName_GM',\n 'nom__TopThreeAmericanName_OTHER',\n 'nom__PRIMEUNIT_YES',\n 'nom__PRIMEUNIT_unknown',\n 'nom__AUCGUART_RED',\n 'nom__AUCGUART_unknown',\n 'nom__IsOnlineSale_1.0',\n 'nom__Make_CHRYSLER',\n 'nom__Make_DODGE',\n 'nom__Make_FORD',\n 'nom__Make_HYUNDAI',\n 'nom__Make_JEEP',\n 'nom__Make_KIA',\n 'nom__Make_MAZDA',\n 'nom__Make_MERCURY',\n 'nom__Make_MITSUBISHI',\n 'nom__Make_NISSAN',\n 'nom__Make_OTHER',\n 'nom__Make_PONTIAC',\n 'nom__Make_SATURN',\n 'nom__Make_SUZUKI',\n 'nom__Make_TOYOTA']"},"metadata":{}}],"execution_count":42},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}